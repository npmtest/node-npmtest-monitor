{"/home/travis/build/npmtest/node-npmtest-monitor/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":2,"37":2,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":1,"46":1,"47":1,"48":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1,1],"10":[1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":2,"9":2,"10":2,"11":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":83},"end":{"line":105,"column":10}},"skip":true},"7":{"name":"(anonymous_7)","line":113,"loc":{"start":{"line":113,"column":77},"end":{"line":116,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":127,"loc":{"start":{"line":127,"column":77},"end":{"line":130,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":138,"loc":{"start":{"line":138,"column":83},"end":{"line":141,"column":10}},"skip":true},"10":{"name":"(anonymous_10)","line":149,"loc":{"start":{"line":149,"column":79},"end":{"line":152,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":160,"loc":{"start":{"line":160,"column":75},"end":{"line":163,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":175,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":174,"column":5}},"24":{"start":{"line":92,"column":8},"end":{"line":94,"column":63}},"25":{"start":{"line":95,"column":8},"end":{"line":95,"column":14}},"26":{"start":{"line":102,"column":8},"end":{"line":111,"column":10},"skip":true},"27":{"start":{"line":109,"column":12},"end":{"line":109,"column":55},"skip":true},"28":{"start":{"line":110,"column":12},"end":{"line":110,"column":48},"skip":true},"29":{"start":{"line":113,"column":8},"end":{"line":125,"column":10},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":76},"skip":true},"31":{"start":{"line":121,"column":12},"end":{"line":121,"column":73},"skip":true},"32":{"start":{"line":122,"column":12},"end":{"line":122,"column":74},"skip":true},"33":{"start":{"line":123,"column":12},"end":{"line":123,"column":25},"skip":true},"34":{"start":{"line":124,"column":12},"end":{"line":124,"column":45},"skip":true},"35":{"start":{"line":127,"column":8},"end":{"line":136,"column":10},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":147,"column":10},"skip":true},"39":{"start":{"line":145,"column":12},"end":{"line":145,"column":25},"skip":true},"40":{"start":{"line":146,"column":12},"end":{"line":146,"column":48},"skip":true},"41":{"start":{"line":149,"column":8},"end":{"line":158,"column":10},"skip":true},"42":{"start":{"line":156,"column":12},"end":{"line":156,"column":25},"skip":true},"43":{"start":{"line":157,"column":12},"end":{"line":157,"column":46},"skip":true},"44":{"start":{"line":160,"column":8},"end":{"line":169,"column":10},"skip":true},"45":{"start":{"line":167,"column":12},"end":{"line":167,"column":94},"skip":true},"46":{"start":{"line":168,"column":12},"end":{"line":168,"column":48},"skip":true},"47":{"start":{"line":172,"column":8},"end":{"line":172,"column":35},"skip":true},"48":{"start":{"line":173,"column":8},"end":{"line":173,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":95,"column":14}},{"start":{"line":101,"column":4},"end":{"line":173,"column":14},"skip":true}]},"9":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":18},"end":{"line":92,"column":32}},{"start":{"line":93,"column":12},"end":{"line":93,"column":53}},{"start":{"line":94,"column":12},"end":{"line":94,"column":61}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":45},"end":{"line":102,"column":79},"skip":true},{"start":{"line":102,"column":83},"end":{"line":111,"column":9},"skip":true}]},"11":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":42},"end":{"line":113,"column":73},"skip":true},{"start":{"line":113,"column":77},"end":{"line":125,"column":9},"skip":true}]},"12":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":42},"end":{"line":127,"column":73},"skip":true},{"start":{"line":127,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":45},"end":{"line":138,"column":79},"skip":true},{"start":{"line":138,"column":83},"end":{"line":147,"column":9},"skip":true}]},"14":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":43},"end":{"line":149,"column":75},"skip":true},{"start":{"line":149,"column":79},"end":{"line":158,"column":9},"skip":true}]},"15":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":41},"end":{"line":160,"column":71},"skip":true},{"start":{"line":160,"column":75},"end":{"line":169,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_monitor */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"92":1,"95":1,"102":1,"109":1,"110":1,"113":1,"120":1,"121":1,"122":1,"123":1,"124":1,"127":1,"134":2,"135":2,"138":1,"145":2,"146":2,"149":1,"156":2,"157":2,"160":1,"167":1,"168":1,"172":1,"173":1}},"/home/travis/build/npmtest/node-npmtest-monitor/lib.npmtest_monitor.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/lib.npmtest_monitor.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":52}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":58}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_monitor */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_monitor = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_monitor = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-monitor/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":0,"42":2,"43":2,"44":2,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,2],"16":[2,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":314,"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":325,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":324,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":53},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":294,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":302,"column":8},"end":{"line":302,"column":82},"skip":true},"70":{"start":{"line":305,"column":8},"end":{"line":307,"column":9},"skip":true},"71":{"start":{"line":306,"column":12},"end":{"line":306,"column":82},"skip":true},"72":{"start":{"line":309,"column":8},"end":{"line":311,"column":9},"skip":true},"73":{"start":{"line":310,"column":12},"end":{"line":310,"column":18},"skip":true},"74":{"start":{"line":312,"column":8},"end":{"line":312,"column":54},"skip":true},"75":{"start":{"line":313,"column":8},"end":{"line":313,"column":69},"skip":true},"76":{"start":{"line":314,"column":8},"end":{"line":322,"column":36},"skip":true},"77":{"start":{"line":315,"column":12},"end":{"line":315,"column":61},"skip":true},"78":{"start":{"line":316,"column":12},"end":{"line":319,"column":13},"skip":true},"79":{"start":{"line":317,"column":16},"end":{"line":317,"column":75},"skip":true},"80":{"start":{"line":318,"column":16},"end":{"line":318,"column":23},"skip":true},"81":{"start":{"line":320,"column":12},"end":{"line":320,"column":38},"skip":true},"82":{"start":{"line":321,"column":12},"end":{"line":321,"column":27},"skip":true},"83":{"start":{"line":323,"column":8},"end":{"line":323,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":51}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":323,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":295,"type":"binary-expr","locations":[{"start":{"line":295,"column":12},"end":{"line":295,"column":65},"skip":true},{"start":{"line":296,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":43},"end":{"line":302,"column":75},"skip":true},{"start":{"line":302,"column":79},"end":{"line":302,"column":81},"skip":true}]},"25":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true},{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true}]},"26":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true},{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true}]},"27":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":27},"end":{"line":312,"column":43},"skip":true},{"start":{"line":312,"column":47},"end":{"line":312,"column":53},"skip":true}]},"28":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true},{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-monitor && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_monitor */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_monitor","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught.stack);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_monitor.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        local.assetsDict['/assets.npmtest_monitor.rollup.js'] =","            local.assetsDict['/assets.npmtest_monitor.rollup.js'] ||","            local.fs.readFileSync(","                // buildCustomOrg-hack","                local.npmtest_monitor.__dirname +","                    '/lib.npmtest_monitor.js',","                'utf8'","            ).replace((/^#!/), '//');","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":2,"127":2,"128":2,"129":2,"130":1,"133":2,"134":2,"139":2,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"294":1,"302":1,"305":1,"306":1,"309":1,"310":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"320":1,"321":1,"323":1}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":1,"8":1,"9":1,"10":1,"11":20},"b":{"1":[1,0],"2":[0,1]},"f":{"1":1,"2":20},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":23},"end":{"line":35,"column":38}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":39,"column":9}},"2":{"start":{"line":14,"column":2},"end":{"line":14,"column":50}},"3":{"start":{"line":15,"column":2},"end":{"line":37,"column":3}},"4":{"start":{"line":18,"column":4},"end":{"line":36,"column":5}},"5":{"start":{"line":19,"column":6},"end":{"line":19,"column":38}},"6":{"start":{"line":25,"column":6},"end":{"line":25,"column":75}},"7":{"start":{"line":28,"column":6},"end":{"line":28,"column":61}},"8":{"start":{"line":31,"column":6},"end":{"line":31,"column":57}},"9":{"start":{"line":34,"column":6},"end":{"line":34,"column":62}},"10":{"start":{"line":35,"column":6},"end":{"line":35,"column":64}},"11":{"start":{"line":35,"column":39},"end":{"line":35,"column":61}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"2":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]}},"code":["// index.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  /*","  * Entry point for commonJS style loading","  *","  * This file coordinates the loading of modules in a consistent order","  * in a commonJS environment.","  */","","  var commonJS = (typeof exports !== 'undefined');","  if (commonJS) {","","    // Only load once","    if (global.Monitor) {","      module.exports = global.Monitor;","    }","    else {","","      // Export the Monitor class to module and global scope to assure","      // a single load, and to match the browser-side global Monitor.","      var Monitor = global.Monitor = module.exports = require('./Monitor');","","      // Attach backbone callbacks","      require('backbone-callbacks').attach(Monitor.Backbone);","","      // Grunt.js contains the module definition files","      var MODULE_DEF = require('../grunt.js').MODULE_DEF;","","      // Load local library files, then server-only probes","      var allFiles = MODULE_DEF.lib.concat(MODULE_DEF.probes);","      allFiles.forEach(function(file) {require('../' + file);});","    }","  }","","}(this));",""],"l":{"5":1,"14":1,"15":1,"18":1,"19":0,"25":1,"28":1,"31":1,"34":1,"35":20}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Monitor.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Monitor.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1,"71":0,"72":1,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":1,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":1,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":1,"137":0,"138":0,"139":1,"140":1,"141":5,"142":1,"143":1,"144":1,"145":10,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":0,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":0,"160":1,"161":1,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0},"b":{"1":[1,0],"2":[1,0],"3":[1,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[1,0],"51":[1,0],"52":[0,1],"53":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":5,"32":1,"33":10,"34":0,"35":0,"36":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":125,"loc":{"start":{"line":125,"column":16},"end":{"line":125,"column":42}}},"3":{"name":"(anonymous_3)","line":142,"loc":{"start":{"line":142,"column":13},"end":{"line":142,"column":32}}},"4":{"name":"(anonymous_4)","line":144,"loc":{"start":{"line":144,"column":44},"end":{"line":144,"column":60}}},"5":{"name":"(anonymous_5)","line":184,"loc":{"start":{"line":184,"column":19},"end":{"line":184,"column":30}}},"6":{"name":"(anonymous_6)","line":195,"loc":{"start":{"line":195,"column":17},"end":{"line":195,"column":28}}},"7":{"name":"(anonymous_7)","line":222,"loc":{"start":{"line":222,"column":16},"end":{"line":222,"column":35}}},"8":{"name":"(anonymous_8)","line":232,"loc":{"start":{"line":232,"column":55},"end":{"line":232,"column":79}}},"9":{"name":"(anonymous_9)","line":251,"loc":{"start":{"line":251,"column":14},"end":{"line":251,"column":25}}},"10":{"name":"(anonymous_10)","line":268,"loc":{"start":{"line":268,"column":42},"end":{"line":268,"column":58}}},"11":{"name":"(anonymous_11)","line":299,"loc":{"start":{"line":299,"column":13},"end":{"line":299,"column":46}}},"12":{"name":"(anonymous_12)","line":313,"loc":{"start":{"line":313,"column":21},"end":{"line":313,"column":43}}},"13":{"name":"(anonymous_13)","line":355,"loc":{"start":{"line":355,"column":17},"end":{"line":355,"column":35}}},"14":{"name":"(anonymous_14)","line":360,"loc":{"start":{"line":360,"column":32},"end":{"line":360,"column":53}}},"15":{"name":"(anonymous_15)","line":381,"loc":{"start":{"line":381,"column":19},"end":{"line":381,"column":37}}},"16":{"name":"(anonymous_16)","line":386,"loc":{"start":{"line":386,"column":32},"end":{"line":386,"column":53}}},"17":{"name":"(anonymous_17)","line":407,"loc":{"start":{"line":407,"column":20},"end":{"line":407,"column":31}}},"18":{"name":"(anonymous_18)","line":429,"loc":{"start":{"line":429,"column":29},"end":{"line":429,"column":40}}},"19":{"name":"rhs4","line":432,"loc":{"start":{"line":432,"column":4},"end":{"line":432,"column":20}}},"20":{"name":"(anonymous_20)","line":447,"loc":{"start":{"line":447,"column":39},"end":{"line":447,"column":68}}},"21":{"name":"(anonymous_21)","line":454,"loc":{"start":{"line":454,"column":25},"end":{"line":454,"column":39}}},"22":{"name":"(anonymous_22)","line":476,"loc":{"start":{"line":476,"column":22},"end":{"line":476,"column":33}}},"23":{"name":"(anonymous_23)","line":519,"loc":{"start":{"line":519,"column":18},"end":{"line":519,"column":46}}},"24":{"name":"(anonymous_24)","line":521,"loc":{"start":{"line":521,"column":27},"end":{"line":521,"column":37}}},"25":{"name":"(anonymous_25)","line":540,"loc":{"start":{"line":540,"column":17},"end":{"line":540,"column":36}}},"26":{"name":"(anonymous_26)","line":542,"loc":{"start":{"line":542,"column":27},"end":{"line":542,"column":37}}},"27":{"name":"(anonymous_27)","line":568,"loc":{"start":{"line":568,"column":27},"end":{"line":568,"column":49}}},"28":{"name":"(anonymous_28)","line":597,"loc":{"start":{"line":597,"column":21},"end":{"line":597,"column":44}}},"29":{"name":"(anonymous_29)","line":672,"loc":{"start":{"line":672,"column":22},"end":{"line":672,"column":53}}},"30":{"name":"(anonymous_30)","line":688,"loc":{"start":{"line":688,"column":31},"end":{"line":688,"column":57}}},"31":{"name":"(anonymous_31)","line":691,"loc":{"start":{"line":691,"column":28},"end":{"line":691,"column":45}}},"32":{"name":"(anonymous_32)","line":706,"loc":{"start":{"line":706,"column":27},"end":{"line":706,"column":49}}},"33":{"name":"(anonymous_33)","line":709,"loc":{"start":{"line":709,"column":24},"end":{"line":709,"column":41}}},"34":{"name":"(anonymous_34)","line":765,"loc":{"start":{"line":765,"column":15},"end":{"line":765,"column":25}}},"35":{"name":"(anonymous_35)","line":766,"loc":{"start":{"line":766,"column":32},"end":{"line":766,"column":48}}},"36":{"name":"(anonymous_36)","line":768,"loc":{"start":{"line":768,"column":28},"end":{"line":768,"column":44}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":778,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":13,"column":47}},"3":{"start":{"line":16,"column":2},"end":{"line":16,"column":34}},"4":{"start":{"line":111,"column":2},"end":{"line":411,"column":5}},"5":{"start":{"line":126,"column":6},"end":{"line":126,"column":31}},"6":{"start":{"line":143,"column":6},"end":{"line":143,"column":43}},"7":{"start":{"line":144,"column":6},"end":{"line":169,"column":9}},"8":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"9":{"start":{"line":148,"column":10},"end":{"line":148,"column":40}},"10":{"start":{"line":153,"column":8},"end":{"line":153,"column":40}},"11":{"start":{"line":153,"column":23},"end":{"line":153,"column":39}},"12":{"start":{"line":158,"column":8},"end":{"line":168,"column":9}},"13":{"start":{"line":163,"column":10},"end":{"line":163,"column":34}},"14":{"start":{"line":164,"column":10},"end":{"line":164,"column":33}},"15":{"start":{"line":166,"column":10},"end":{"line":166,"column":94}},"16":{"start":{"line":167,"column":10},"end":{"line":167,"column":55}},"17":{"start":{"line":185,"column":6},"end":{"line":185,"column":19}},"18":{"start":{"line":186,"column":6},"end":{"line":186,"column":73}},"19":{"start":{"line":196,"column":6},"end":{"line":196,"column":19}},"20":{"start":{"line":197,"column":6},"end":{"line":197,"column":31}},"21":{"start":{"line":223,"column":6},"end":{"line":226,"column":37}},"22":{"start":{"line":229,"column":6},"end":{"line":229,"column":37}},"23":{"start":{"line":232,"column":6},"end":{"line":242,"column":9}},"24":{"start":{"line":233,"column":8},"end":{"line":233,"column":40}},"25":{"start":{"line":233,"column":23},"end":{"line":233,"column":39}},"26":{"start":{"line":234,"column":8},"end":{"line":241,"column":9}},"27":{"start":{"line":235,"column":10},"end":{"line":235,"column":50}},"28":{"start":{"line":238,"column":10},"end":{"line":238,"column":42}},"29":{"start":{"line":239,"column":10},"end":{"line":239,"column":71}},"30":{"start":{"line":240,"column":10},"end":{"line":240,"column":58}},"31":{"start":{"line":252,"column":6},"end":{"line":254,"column":31}},"32":{"start":{"line":257,"column":6},"end":{"line":257,"column":39}},"33":{"start":{"line":258,"column":6},"end":{"line":258,"column":27}},"34":{"start":{"line":259,"column":6},"end":{"line":264,"column":7}},"35":{"start":{"line":260,"column":8},"end":{"line":260,"column":97}},"36":{"start":{"line":261,"column":8},"end":{"line":263,"column":9}},"37":{"start":{"line":262,"column":10},"end":{"line":262,"column":61}},"38":{"start":{"line":267,"column":6},"end":{"line":273,"column":7}},"39":{"start":{"line":268,"column":8},"end":{"line":272,"column":11}},"40":{"start":{"line":269,"column":10},"end":{"line":271,"column":11}},"41":{"start":{"line":270,"column":12},"end":{"line":270,"column":104}},"42":{"start":{"line":300,"column":6},"end":{"line":303,"column":33}},"43":{"start":{"line":306,"column":6},"end":{"line":309,"column":7}},"44":{"start":{"line":307,"column":8},"end":{"line":307,"column":26}},"45":{"start":{"line":308,"column":8},"end":{"line":308,"column":22}},"46":{"start":{"line":311,"column":6},"end":{"line":311,"column":30}},"47":{"start":{"line":313,"column":6},"end":{"line":325,"column":8}},"48":{"start":{"line":314,"column":8},"end":{"line":320,"column":9}},"49":{"start":{"line":315,"column":10},"end":{"line":315,"column":34}},"50":{"start":{"line":318,"column":10},"end":{"line":318,"column":44}},"51":{"start":{"line":319,"column":10},"end":{"line":319,"column":51}},"52":{"start":{"line":322,"column":8},"end":{"line":324,"column":9}},"53":{"start":{"line":323,"column":10},"end":{"line":323,"column":39}},"54":{"start":{"line":327,"column":6},"end":{"line":329,"column":7}},"55":{"start":{"line":328,"column":8},"end":{"line":328,"column":47}},"56":{"start":{"line":332,"column":6},"end":{"line":336,"column":7}},"57":{"start":{"line":333,"column":8},"end":{"line":333,"column":113}},"58":{"start":{"line":335,"column":8},"end":{"line":335,"column":48}},"59":{"start":{"line":356,"column":6},"end":{"line":357,"column":40}},"60":{"start":{"line":360,"column":6},"end":{"line":364,"column":9}},"61":{"start":{"line":361,"column":8},"end":{"line":363,"column":9}},"62":{"start":{"line":362,"column":10},"end":{"line":362,"column":28}},"63":{"start":{"line":365,"column":6},"end":{"line":365,"column":18}},"64":{"start":{"line":382,"column":6},"end":{"line":383,"column":20}},"65":{"start":{"line":386,"column":6},"end":{"line":390,"column":9}},"66":{"start":{"line":387,"column":8},"end":{"line":389,"column":9}},"67":{"start":{"line":388,"column":10},"end":{"line":388,"column":28}},"68":{"start":{"line":391,"column":6},"end":{"line":391,"column":18}},"69":{"start":{"line":408,"column":6},"end":{"line":408,"column":58}},"70":{"start":{"line":429,"column":2},"end":{"line":434,"column":4}},"71":{"start":{"line":431,"column":4},"end":{"line":431,"column":39}},"72":{"start":{"line":432,"column":4},"end":{"line":432,"column":93}},"73":{"start":{"line":432,"column":21},"end":{"line":432,"column":92}},"74":{"start":{"line":433,"column":4},"end":{"line":433,"column":85}},"75":{"start":{"line":447,"column":2},"end":{"line":464,"column":4}},"76":{"start":{"line":448,"column":4},"end":{"line":448,"column":16}},"77":{"start":{"line":449,"column":4},"end":{"line":449,"column":26}},"78":{"start":{"line":452,"column":4},"end":{"line":461,"column":5}},"79":{"start":{"line":453,"column":6},"end":{"line":453,"column":32}},"80":{"start":{"line":454,"column":6},"end":{"line":460,"column":9}},"81":{"start":{"line":455,"column":8},"end":{"line":456,"column":49}},"82":{"start":{"line":457,"column":8},"end":{"line":459,"column":9}},"83":{"start":{"line":458,"column":10},"end":{"line":458,"column":47}},"84":{"start":{"line":463,"column":4},"end":{"line":463,"column":44}},"85":{"start":{"line":476,"column":2},"end":{"line":494,"column":4}},"86":{"start":{"line":479,"column":4},"end":{"line":490,"column":5}},"87":{"start":{"line":480,"column":6},"end":{"line":480,"column":51}},"88":{"start":{"line":485,"column":6},"end":{"line":489,"column":7}},"89":{"start":{"line":486,"column":8},"end":{"line":488,"column":11}},"90":{"start":{"line":493,"column":4},"end":{"line":493,"column":33}},"91":{"start":{"line":519,"column":2},"end":{"line":531,"column":4}},"92":{"start":{"line":520,"column":4},"end":{"line":520,"column":31}},"93":{"start":{"line":521,"column":4},"end":{"line":521,"column":40}},"94":{"start":{"line":524,"column":4},"end":{"line":529,"column":5}},"95":{"start":{"line":525,"column":6},"end":{"line":525,"column":51}},"96":{"start":{"line":526,"column":6},"end":{"line":526,"column":53}},"97":{"start":{"line":528,"column":6},"end":{"line":528,"column":17}},"98":{"start":{"line":530,"column":4},"end":{"line":530,"column":19}},"99":{"start":{"line":540,"column":2},"end":{"line":549,"column":4}},"100":{"start":{"line":541,"column":4},"end":{"line":541,"column":21}},"101":{"start":{"line":542,"column":4},"end":{"line":542,"column":40}},"102":{"start":{"line":543,"column":4},"end":{"line":548,"column":5}},"103":{"start":{"line":544,"column":6},"end":{"line":544,"column":43}},"104":{"start":{"line":545,"column":6},"end":{"line":545,"column":35}},"105":{"start":{"line":547,"column":6},"end":{"line":547,"column":17}},"106":{"start":{"line":568,"column":2},"end":{"line":577,"column":4}},"107":{"start":{"line":569,"column":4},"end":{"line":569,"column":35}},"108":{"start":{"line":570,"column":4},"end":{"line":575,"column":5}},"109":{"start":{"line":571,"column":6},"end":{"line":571,"column":39}},"110":{"start":{"line":572,"column":6},"end":{"line":574,"column":7}},"111":{"start":{"line":573,"column":8},"end":{"line":573,"column":45}},"112":{"start":{"line":576,"column":4},"end":{"line":576,"column":15}},"113":{"start":{"line":597,"column":2},"end":{"line":651,"column":4}},"114":{"start":{"line":600,"column":4},"end":{"line":600,"column":76}},"115":{"start":{"line":603,"column":4},"end":{"line":605,"column":5}},"116":{"start":{"line":604,"column":6},"end":{"line":604,"column":19}},"117":{"start":{"line":608,"column":4},"end":{"line":608,"column":29}},"118":{"start":{"line":609,"column":4},"end":{"line":613,"column":5}},"119":{"start":{"line":610,"column":6},"end":{"line":610,"column":29}},"120":{"start":{"line":611,"column":11},"end":{"line":613,"column":5}},"121":{"start":{"line":612,"column":6},"end":{"line":612,"column":26}},"122":{"start":{"line":616,"column":4},"end":{"line":618,"column":5}},"123":{"start":{"line":617,"column":6},"end":{"line":617,"column":21}},"124":{"start":{"line":622,"column":4},"end":{"line":622,"column":46}},"125":{"start":{"line":625,"column":4},"end":{"line":635,"column":5}},"126":{"start":{"line":626,"column":6},"end":{"line":634,"column":7}},"127":{"start":{"line":627,"column":8},"end":{"line":627,"column":31}},"128":{"start":{"line":628,"column":8},"end":{"line":633,"column":9}},"129":{"start":{"line":629,"column":10},"end":{"line":629,"column":57}},"130":{"start":{"line":632,"column":10},"end":{"line":632,"column":28}},"131":{"start":{"line":638,"column":4},"end":{"line":647,"column":5}},"132":{"start":{"line":639,"column":6},"end":{"line":646,"column":7}},"133":{"start":{"line":641,"column":8},"end":{"line":641,"column":23}},"134":{"start":{"line":645,"column":8},"end":{"line":645,"column":53}},"135":{"start":{"line":650,"column":4},"end":{"line":650,"column":16}},"136":{"start":{"line":672,"column":2},"end":{"line":679,"column":4}},"137":{"start":{"line":675,"column":4},"end":{"line":675,"column":57}},"138":{"start":{"line":678,"column":4},"end":{"line":678,"column":72}},"139":{"start":{"line":688,"column":2},"end":{"line":697,"column":4}},"140":{"start":{"line":691,"column":4},"end":{"line":693,"column":6}},"141":{"start":{"line":692,"column":6},"end":{"line":692,"column":41}},"142":{"start":{"line":696,"column":4},"end":{"line":696,"column":44}},"143":{"start":{"line":706,"column":2},"end":{"line":715,"column":4}},"144":{"start":{"line":709,"column":4},"end":{"line":711,"column":6}},"145":{"start":{"line":710,"column":6},"end":{"line":710,"column":37}},"146":{"start":{"line":714,"column":4},"end":{"line":714,"column":39}},"147":{"start":{"line":727,"column":2},"end":{"line":727,"column":62}},"148":{"start":{"line":732,"column":2},"end":{"line":741,"column":4}},"149":{"start":{"line":742,"column":2},"end":{"line":747,"column":3}},"150":{"start":{"line":743,"column":4},"end":{"line":743,"column":39}},"151":{"start":{"line":744,"column":4},"end":{"line":744,"column":63}},"152":{"start":{"line":746,"column":4},"end":{"line":746,"column":46}},"153":{"start":{"line":750,"column":2},"end":{"line":750,"column":16}},"154":{"start":{"line":751,"column":2},"end":{"line":751,"column":30}},"155":{"start":{"line":752,"column":2},"end":{"line":752,"column":22}},"156":{"start":{"line":753,"column":2},"end":{"line":753,"column":30}},"157":{"start":{"line":756,"column":2},"end":{"line":760,"column":3}},"158":{"start":{"line":757,"column":4},"end":{"line":757,"column":29}},"159":{"start":{"line":759,"column":4},"end":{"line":759,"column":27}},"160":{"start":{"line":763,"column":2},"end":{"line":763,"column":51}},"161":{"start":{"line":764,"column":2},"end":{"line":776,"column":3}},"162":{"start":{"line":765,"column":4},"end":{"line":775,"column":9}},"163":{"start":{"line":766,"column":6},"end":{"line":774,"column":9}},"164":{"start":{"line":767,"column":8},"end":{"line":767,"column":45}},"165":{"start":{"line":768,"column":8},"end":{"line":773,"column":11}},"166":{"start":{"line":769,"column":10},"end":{"line":771,"column":11}},"167":{"start":{"line":770,"column":12},"end":{"line":770,"column":80}},"168":{"start":{"line":772,"column":10},"end":{"line":772,"column":48}}},"branchMap":{"1":{"line":9,"type":"cond-expr","locations":[{"start":{"line":9,"column":28},"end":{"line":9,"column":47}},{"start":{"line":9,"column":50},"end":{"line":9,"column":63}}]},"2":{"line":10,"type":"cond-expr","locations":[{"start":{"line":10,"column":21},"end":{"line":10,"column":44}},{"start":{"line":10,"column":47},"end":{"line":10,"column":53}}]},"3":{"line":13,"type":"cond-expr","locations":[{"start":{"line":13,"column":24},"end":{"line":13,"column":39}},{"start":{"line":13,"column":42},"end":{"line":13,"column":46}}]},"4":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":8},"end":{"line":147,"column":8}},{"start":{"line":147,"column":8},"end":{"line":147,"column":8}}]},"5":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":12},"end":{"line":147,"column":18}},{"start":{"line":147,"column":22},"end":{"line":147,"column":60}}]},"6":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":8},"end":{"line":153,"column":8}},{"start":{"line":153,"column":8},"end":{"line":153,"column":8}}]},"7":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":8},"end":{"line":158,"column":8}},{"start":{"line":158,"column":8},"end":{"line":158,"column":8}}]},"8":{"line":186,"type":"cond-expr","locations":[{"start":{"line":186,"column":46},"end":{"line":186,"column":64}},{"start":{"line":186,"column":67},"end":{"line":186,"column":71}}]},"9":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":14},"end":{"line":186,"column":21}},{"start":{"line":186,"column":25},"end":{"line":186,"column":43}}]},"10":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":233,"column":8}},{"start":{"line":233,"column":8},"end":{"line":233,"column":8}}]},"11":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":8},"end":{"line":234,"column":8}},{"start":{"line":234,"column":8},"end":{"line":234,"column":8}}]},"12":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":25},"end":{"line":260,"column":51}},{"start":{"line":260,"column":55},"end":{"line":260,"column":96}}]},"13":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":8},"end":{"line":261,"column":8}},{"start":{"line":261,"column":8},"end":{"line":261,"column":8}}]},"14":{"line":261,"type":"binary-expr","locations":[{"start":{"line":261,"column":12},"end":{"line":261,"column":22}},{"start":{"line":261,"column":26},"end":{"line":261,"column":88}}]},"15":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":6},"end":{"line":267,"column":6}},{"start":{"line":267,"column":6},"end":{"line":267,"column":6}}]},"16":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":10},"end":{"line":269,"column":10}},{"start":{"line":269,"column":10},"end":{"line":269,"column":10}}]},"17":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":6},"end":{"line":306,"column":6}},{"start":{"line":306,"column":6},"end":{"line":306,"column":6}}]},"18":{"line":314,"type":"if","locations":[{"start":{"line":314,"column":8},"end":{"line":314,"column":8}},{"start":{"line":314,"column":8},"end":{"line":314,"column":8}}]},"19":{"line":322,"type":"if","locations":[{"start":{"line":322,"column":8},"end":{"line":322,"column":8}},{"start":{"line":322,"column":8},"end":{"line":322,"column":8}}]},"20":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":6},"end":{"line":327,"column":6}},{"start":{"line":327,"column":6},"end":{"line":327,"column":6}}]},"21":{"line":332,"type":"if","locations":[{"start":{"line":332,"column":6},"end":{"line":332,"column":6}},{"start":{"line":332,"column":6},"end":{"line":332,"column":6}}]},"22":{"line":361,"type":"if","locations":[{"start":{"line":361,"column":8},"end":{"line":361,"column":8}},{"start":{"line":361,"column":8},"end":{"line":361,"column":8}}]},"23":{"line":387,"type":"if","locations":[{"start":{"line":387,"column":8},"end":{"line":387,"column":8}},{"start":{"line":387,"column":8},"end":{"line":387,"column":8}}]},"24":{"line":449,"type":"binary-expr","locations":[{"start":{"line":449,"column":13},"end":{"line":449,"column":19}},{"start":{"line":449,"column":23},"end":{"line":449,"column":25}}]},"25":{"line":452,"type":"if","locations":[{"start":{"line":452,"column":4},"end":{"line":452,"column":4}},{"start":{"line":452,"column":4},"end":{"line":452,"column":4}}]},"26":{"line":455,"type":"binary-expr","locations":[{"start":{"line":455,"column":17},"end":{"line":455,"column":31}},{"start":{"line":455,"column":35},"end":{"line":455,"column":37}}]},"27":{"line":457,"type":"if","locations":[{"start":{"line":457,"column":8},"end":{"line":457,"column":8}},{"start":{"line":457,"column":8},"end":{"line":457,"column":8}}]},"28":{"line":479,"type":"if","locations":[{"start":{"line":479,"column":4},"end":{"line":479,"column":4}},{"start":{"line":479,"column":4},"end":{"line":479,"column":4}}]},"29":{"line":485,"type":"if","locations":[{"start":{"line":485,"column":6},"end":{"line":485,"column":6}},{"start":{"line":485,"column":6},"end":{"line":485,"column":6}}]},"30":{"line":521,"type":"binary-expr","locations":[{"start":{"line":521,"column":15},"end":{"line":521,"column":23}},{"start":{"line":521,"column":27},"end":{"line":521,"column":39}}]},"31":{"line":524,"type":"if","locations":[{"start":{"line":524,"column":4},"end":{"line":524,"column":4}},{"start":{"line":524,"column":4},"end":{"line":524,"column":4}}]},"32":{"line":542,"type":"binary-expr","locations":[{"start":{"line":542,"column":15},"end":{"line":542,"column":23}},{"start":{"line":542,"column":27},"end":{"line":542,"column":39}}]},"33":{"line":543,"type":"if","locations":[{"start":{"line":543,"column":4},"end":{"line":543,"column":4}},{"start":{"line":543,"column":4},"end":{"line":543,"column":4}}]},"34":{"line":570,"type":"if","locations":[{"start":{"line":570,"column":4},"end":{"line":570,"column":4}},{"start":{"line":570,"column":4},"end":{"line":570,"column":4}}]},"35":{"line":572,"type":"if","locations":[{"start":{"line":572,"column":6},"end":{"line":572,"column":6}},{"start":{"line":572,"column":6},"end":{"line":572,"column":6}}]},"36":{"line":600,"type":"cond-expr","locations":[{"start":{"line":600,"column":44},"end":{"line":600,"column":67}},{"start":{"line":600,"column":70},"end":{"line":600,"column":75}}]},"37":{"line":603,"type":"if","locations":[{"start":{"line":603,"column":4},"end":{"line":603,"column":4}},{"start":{"line":603,"column":4},"end":{"line":603,"column":4}}]},"38":{"line":603,"type":"binary-expr","locations":[{"start":{"line":603,"column":8},"end":{"line":603,"column":33}},{"start":{"line":603,"column":37},"end":{"line":603,"column":64}}]},"39":{"line":609,"type":"if","locations":[{"start":{"line":609,"column":4},"end":{"line":609,"column":4}},{"start":{"line":609,"column":4},"end":{"line":609,"column":4}}]},"40":{"line":611,"type":"if","locations":[{"start":{"line":611,"column":11},"end":{"line":611,"column":11}},{"start":{"line":611,"column":11},"end":{"line":611,"column":11}}]},"41":{"line":616,"type":"if","locations":[{"start":{"line":616,"column":4},"end":{"line":616,"column":4}},{"start":{"line":616,"column":4},"end":{"line":616,"column":4}}]},"42":{"line":622,"type":"cond-expr","locations":[{"start":{"line":622,"column":38},"end":{"line":622,"column":40}},{"start":{"line":622,"column":43},"end":{"line":622,"column":45}}]},"43":{"line":626,"type":"if","locations":[{"start":{"line":626,"column":6},"end":{"line":626,"column":6}},{"start":{"line":626,"column":6},"end":{"line":626,"column":6}}]},"44":{"line":626,"type":"binary-expr","locations":[{"start":{"line":626,"column":10},"end":{"line":626,"column":31}},{"start":{"line":626,"column":35},"end":{"line":626,"column":61}}]},"45":{"line":628,"type":"if","locations":[{"start":{"line":628,"column":8},"end":{"line":628,"column":8}},{"start":{"line":628,"column":8},"end":{"line":628,"column":8}}]},"46":{"line":628,"type":"binary-expr","locations":[{"start":{"line":628,"column":12},"end":{"line":628,"column":36}},{"start":{"line":628,"column":40},"end":{"line":628,"column":66}}]},"47":{"line":638,"type":"if","locations":[{"start":{"line":638,"column":4},"end":{"line":638,"column":4}},{"start":{"line":638,"column":4},"end":{"line":638,"column":4}}]},"48":{"line":639,"type":"if","locations":[{"start":{"line":639,"column":6},"end":{"line":639,"column":6}},{"start":{"line":639,"column":6},"end":{"line":639,"column":6}}]},"49":{"line":675,"type":"cond-expr","locations":[{"start":{"line":675,"column":46},"end":{"line":675,"column":47}},{"start":{"line":675,"column":50},"end":{"line":675,"column":56}}]},"50":{"line":742,"type":"if","locations":[{"start":{"line":742,"column":2},"end":{"line":742,"column":2}},{"start":{"line":742,"column":2},"end":{"line":742,"column":2}}]},"51":{"line":756,"type":"if","locations":[{"start":{"line":756,"column":2},"end":{"line":756,"column":2}},{"start":{"line":756,"column":2},"end":{"line":756,"column":2}}]},"52":{"line":764,"type":"if","locations":[{"start":{"line":764,"column":2},"end":{"line":764,"column":2}},{"start":{"line":764,"column":2},"end":{"line":764,"column":2}}]},"53":{"line":769,"type":"if","locations":[{"start":{"line":769,"column":10},"end":{"line":769,"column":10}},{"start":{"line":769,"column":10},"end":{"line":769,"column":10}}]}},"code":["// Monitor.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading","  var commonJS = (typeof exports !== 'undefined'),","      Backbone = commonJS ? require('backbone') : root.Backbone,","      _ = commonJS ? require('underscore')._ : root._,","      log = null, stat = null,","      autoStartedMonitors = [],","      Cron = commonJS ? require('cron') : null;","","  // Constants","  var DEFAULT_DEEP_COPY_DEPTH = 4;","","  /**","  * Monitor a remote probe","  *","  * Monitor objects are the local interface to a remote <a href=\"Probe.html\">Probe</a>.","  * The probe may be running in this process or on a remote server.","  *","  * In a disconnected state, the monitor object contains information about","  * the type, attributes, and location of the probe it will monitor.","  *","  * In a connected state, the monitor object contains the data attributes of","  * the probe it is monitoring, and emits change events as the probe changes","  * state.","  *","  * Many monitors may be attached to a single probe.  When the probe data model","  * changes, changes are broadcast to the connected monitors.","  *","  * Probes can be remotely controlled using the control() method.","  * The control() method acts an RPC in that it accepts input arguments and","  * returns results to the monitor initiating the request.","  *","  * Example:","  *","  *     // Connecting a monitor to a probe","  *     var processMonitor = new Monitor({","  *       probeClass: 'Process'","  *     });","  *     processMonitor.connect();","  *","  *     // Monitoring the probe","  *     processMonitor.on('change', function(){","  *       console.log('Changes:', processMonitor.getChangedAttributes());","  *     });","  *","  *     // Remote control","  *     processMonitor.control('ping', function(error, response) {","  *       console.log('Ping response: ', response);","  *     });","  *","  * Monitoring a probe on a remote server requires the ```hostName``` parameter","  * to be set.","  *","  *     // Connecting to a remote monitor","  *     var processMonitor = new Monitor({","  *       probeClass: 'Process',","  *       hostName: 'remote-server1'","  *     });","  *     processMonitor.connect();","  *","  * Additional parameters can be set to identify a specific server if many","  * servers are running on the specified ```hostName```.","  *","  * @class Monitor","  * @extends Backbone.Model","  * @constructor","  * @param model - Initial data model.  Can be a JS object or another Model.","  *     @param [model.id] {String} An optional ID to assign to the monitor","  *     @param [model.name] {String} An optional name to assign to the monitor","  *     @param [model.probeClass] {String} Class name of the probe this is (or will be) monitoring.","  *     @param [model.probeName] {String} External name given to the probe.  If specified, the probe","  *       started by this monitor can be identified by other monitors with this name.","  *     @param [model.initParams] {Object} Initialization parameters passed to the probe during instantiation.","  *     @param [model.hostName] {String} Hostname the probe is (or will) run on.","  *       If not set, the Router will connect with the first host capable of running this probe.","  *     @param [model.appName] {String} Application name the probe is (or will) run within.","  *       If not set, the Router will disregard the appName of the process it is connecting with.","  *     @param [model.appInstance] {String} Application instance ID the probe is (or will) run within.","  *       If not set, the Router will disregard the appInstance of the process it is connecting with.","  *       Application instances can (should) set the $NODE_APP_INSTANCE environment","  *       variable prior to running to uniquely identify their unique instance within a","  *       server or network.  If this variable is not set prior to running the","  *       app, node-monitor will assign a unique ID among other running apps on the host.","  *     @param model.probeId {String} ID of the probe this is monitoring (once connected). READONLY","  *     @param model.writableAttributes {'*' or Array of String} Most probe attributes are readonly.","  *       If a probe allows set() to be called on an attribute, that attribute name is specified","  *       in this array (once connected).  A value of '*' signifies all attributes as writable.  READONLY","  *     @param model.PROBE_PARAMS... {(defined by the probe)} ... all other <strong>```model```</strong> parameters are READONLY parameters of the connected probe","  */","  /**","  * Receive real time notifications from the probe","  *","  * When the probe data model changes, all changed attributes are forwarded","  * to monitors, triggering this event.","  *","  * All probe attributes are available in the monitor, and the","  * getChangedAttributes() method returns the list of attributes changed","  * since the last change event.","  *","  *     myMonitor.on('change', function(){","  *       console.log('Changes:', myMonitor.getChangedAttributes());","  *     });","  *","  * @event change","  */","  var Monitor = Backbone.Model.extend({","","    defaults: {","      id: '',","      name: '',","      probeName: '',","      probeClass: '',","      initParams: {},","      hostName: '',","      appName: '',","      appInstance: '',","      probeId: '',","      writableAttributes: []","    },","    initialize: function(params, options) {","      log.info('init', params);","    },","","    /**","    * Connect the monitor to the remote probe","    *","    * Upon connection, the monitor data model is a proxy of the current state","    * of the probe.","    *","    * @method connect","    * @param callback {Function(error)} Called when the probe is connected (or error)","    */","    /**","    * The monitor has successfully connected with the probe","    * @event connect","    */","    connect: function(callback) {","      var t = this, startTime = Date.now();","      Monitor.getRouter().connectMonitor(t, function(error) {","","        // Monitor changes to writable attributes","        if (!error && t.get('writableAttributes').length > 0) {","          t.on('change', t.onChange, t);","        }","","        // Give the caller first crack at knowing we're connected,","        // followed by anyone registered for the connect event.","        if (callback) {callback(error);}","","        // Initial data setting into the model was done silently","        // in order for the connect event to fire before the first","        // change event.  Fire the connect / change in the proper order.","        if (!error) {","","          // An unfortunate side effect is any change listeners registered during","          // connect will get triggered with the same values as during connect.","          // To get around this, add change listeners from connect on nextTick.","          t.trigger('connect', t);","          t.trigger('change', t);","","          log.info('connected', {initParams: t.get('initParams'), probeId: t.get('probeId')});","          stat.time('connect', Date.now() - startTime);","        }","      });","    },","","    /**","    * Get the connection to the remote probe","    *","    * This method returns the Connection object that represents the remote","    * server used for communicating with the connected probe.","    *","    * If the probe is running internally or the monitor isn't currently","    * connected, this will return null.","    *","    * @method getConnection","    * @return connection {Connection} The connection object","    */","    getConnection: function() {","      var t = this;","      return (t.probe && t.probe.connection ? t.probe.connection : null);","    },","","    /**","    * Is the monitor currently connected?","    *","    * @method isConnected","    * @return {boolean} True if the monitor is currently connected","    */","    isConnected: function() {","      var t = this;","      return (t.probe != null);","    },","","    /**","    * Disconnect from the remote probe","    *","    * This should be called when the monitor is no longer needed.","    * It releases resources associated with monitoring the probe.","    *","    * If this was the last object monitoring the probe, the probe will be","    * stopped, releasing resources associated with running the probe.","    *","    * @method disconnect","    * @param callback {Function(error)} Called when disconnected (or error)","    */","    /**","    * The monitor has disconnected from the probe","    * @event disconnect","    * @param reason {String} Reason specified for the disconnect","    * <ul>Known Reasons:","    *   <li>manual_disconnect - A manual call to disconnect() was made.</li>","    *   <li>connect_failed - Underlying transport connection problem.</li>","    *   <li>remote_disconnect - Underlying transport disconnected.</li>","    * </ul>","    */","    disconnect: function(callback) {","      var t = this,","          reason = 'manual_disconnect',","          startTime = Date.now(),","          probeId = t.get('probeId');","","      // Stop forwarding changes to the probe","      t.off('change', t.onChange, t);","","      // Disconnect from the router","      Monitor.getRouter().disconnectMonitor(t, reason, function(error, reason) {","        if (callback) {callback(error);}","        if (error) {","          log.error('disconnect', {error: error});","        }","        else {","          t.trigger('disconnect', reason);","          log.info('disconnected', {reason: reason, probeId: probeId});","          stat.time('disconnect', Date.now() - startTime);","        }","      });","    },","","    /**","    * Forward changes on to the probe, when connected.","    *","    * This is called whenever a change trigger is fired.  It forwards any","    * changes of writable attributes onto the probe using control('set').","    */","    onChange: function() {","      var t = this,","          writableAttributes = t.get('writableAttributes'),","          writableChanges = {};","","      // Add any writable changes","      var probeAttrs = t.toProbeJSON();","      delete probeAttrs.id;","      for (var attrName in probeAttrs) {","        var isWritable = writableAttributes === '*' || writableAttributes.indexOf(attrName) >= 0;","        if (isWritable && !(_.isEqual(t.attributes[attrName], t._probeValues[attrName]))) {","          writableChanges[attrName] = t.attributes[attrName];","        }","      }","","      // Pass any writable changes on to control.set()","      if (Monitor._.size(writableChanges)) {","        t.control('set', writableChanges, function(error) {","          if (error) {","            log.error('probeSet', 'Problem setting writable value', writableChanges, t.toMonitorJSON());","          }","        });","      }","    },","","    /**","    * Send a control message to the probe.","    *","    * Monitors can use this method to send a message and receive a response","    * from a connected probe.","    *","    * The probe must implement the specified control method.  All probes are","    * derived from the base <a href=\"Probe.html\">Probe</a> class, which offers","    * a ping control.","    *","    * To send a ping message to a probe and log the results:","    *","    *     var myMonitor.control('ping', console.log);","    *","    * @method control","    * @param name {String} Name of the control message.","    * @param [params] {Object} Named input parameters specific to the control message.","    * @param [callback] {Function(error, response)} Function to call upon return.","    * <ul>","    *   <li>error (Any) - An object describing an error (null if no errors)</li>","    *   <li>response (Any) - Response parameters specific to the control message.</li>","    * </ul>","    */","    control: function(name, params, callback) {","      var t = this,","          probe = t.probe,","          logId = 'control.' + t.get('probeClass') + '.' + name,","          startTime = Date.now();","","      // Switch callback if sent in 2nd arg","      if (typeof params === 'function') {","        callback = params;","        params = null;","      }","","      log.info(logId, params);","","      var whenDone = function(error, args) {","        if (error) {","          log.error(logId, error);","        }","        else {","          log.info('return.' + logId, args);","          stat.time(logId, Date.now() - startTime);","        }","","        if (callback) {","          callback.apply(t, arguments);","        }","      };","","      if (!probe) {","        return whenDone('Probe not connected');","      }","","      // Send the message internally or to the probe connection","      if (probe.connection) {","        probe.connection.emit('probe:control', {probeId: t.get('probeId'), name: name, params:params}, whenDone);","      } else {","        probe.onControl(name, params, whenDone);","      }","    },","","    /**","    * Produce an object without monitor attributes","    *","    * A Monitor object contains a union of the connection attributes required for","    * a Monitor, and the additional attributes defined by the probe it's monitoring.","    *","    * This method produces an object containing only the probe portion of","    * those attributes.","    *","    * The id attribute of the returned JSON is set to the probeId from","    * the monitor.","    *","    * @method toProbeJSON","    * @param [options] {Object} Options to pass onto the model toJSON","    * @return {Object} The probe attributes","    */","    toProbeJSON: function(options) {","      var t = this,","          json = {id: t.get('probeId')};","","      // Transfer all non-monitor attrs","      _.each(t.toJSON(options), function(value, key) {","        if (!(key in t.defaults)) {","          json[key] = value;","        }","      });","      return json;","    },","","    /**","    * Produce an object with the monitor only attributes.","    *","    * A Monitor object contains a union of the connection attributes required for","    * a Monitor, and the additional attributes defined by the probe it's monitoring.","    *","    * This method produces an object containing only the monitor portion of","    * those attributes.","    *","    * @method toMonitorJSON","    * @param [options] {Object} Options to pass onto the model toJSON","    * @return {Object} The monitor attributes","    */","    toMonitorJSON: function(options) {","      var t = this,","          json = {};","","      // Transfer all monitor attrs","      _.each(t.toJSON(options), function(value, key) {","        if (key in t.defaults) {","          json[key] = value;","        }","      });","      return json;","    },","","    /**","    * Produce a server string representation of the hostName:appName:appInstance","    *","    * Depending on the presence of the appName and appInstance, this will produce","    * one of the following:","    *","    *     hostName","    *     hostName:appName","    *     hostName:appName:appInstance","    *","    * @method toServerString","    * @return {String} A string representation of the monitor server","    */","    toServerString: function() {","      return Monitor.toServerString(this.toMonitorJSON());","    }","","  });","","  /////////////////////////","  // Static helper methods","  /////////////////////////","","  /**","  * Generate a unique UUID-v4 style string","  *","  * This is a cross-platform UUID implementation used to uniquely identify","  * model instances.  It is a random number based UUID, and as such can't be","  * guaranteed unique.","  *","  * @static","  * @protected","  * @method generateUniqueId","  * @return {String} A globally unique ID","  */","  Monitor.generateUniqueId = function() {","    // Generate a 4 digit random hex string","    stat.increment('generateUniqueId');","    function rhs4() {return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);}","    return (rhs4()+rhs4()+\"-\"+rhs4()+\"-\"+rhs4()+\"-\"+rhs4()+\"-\"+rhs4()+rhs4()+rhs4());","  };","","  /**","  * Generate a unique ID for a collection","  *","  * This generates an ID to be used for new elements of the collection,","  * assuring they don't clash with other elements in the collection.","  *","  * @method Monitor.generateUniqueCollectionId","  * @param collection {Backbone.Collection} The collection to generate an ID for","  * @param [prefix] {String} An optional prefix for the id","  * @return id {String} A unique ID with the specified prefix","  */","  Monitor.generateUniqueCollectionId = function(collection, prefix) {","    var id = '';","    prefix = prefix || '';","","    // First time - get the largest idSequence in the collection","    if (!collection.idSequence) {","      collection.idSequence = 0;","      collection.forEach(function(item){","        var id = item.get('id') || '',","            sequence = +id.substr(prefix.length);","        if (collection.idSequence <= sequence) {","          collection.idSequence = sequence + 1;","        }","      });","    }","","    return prefix + collection.idSequence++;","  };","","  /**","  * Get the default router (an application singleton)","  *","  * This instantiates a Router on first call.","  *","  * @static","  * @protected","  * @method getRouter","  * @return {Router} The default router.","  */","  Monitor.getRouter = function() {","","    // Instantiate a router if no default","    if (!Monitor.defaultRouter) {","      Monitor.defaultRouter = new Monitor.Router();","","      // If there's a global socket.io server available,","      // then we're running on the browser.  Set the default","      // gateway to the global io socket.","      if (root.io) {","        Monitor.defaultRouter.setGateway({","          socket:root.io.connect()","        });","      }","    }","","    // Return the router","    return Monitor.defaultRouter;","  };","","  /**","  * Start a monitor server in this process","  *","  * This is a shortand for the following:","  *","  *     var Monitor = require('monitor');","  *     var server = new Monitor.Server();","  *     server.start();","  *","  * It can be chained like this:","  *","  *     var Monitor = require('monitor').start(),","  *         log = Monitor.getLogger('my-app');","  *","  * For more fine-tuned starting, see the <a href=\"Server.html\">Server</a> api.","  *","  * @static","  * @method start","  * @param options {Object} - Server.start() options.  OPTIONAL","  *     @param options.port {Integer} - Port to attempt listening on if server isn't specified.  Default: 42000","  * @param callback {Function(error)} - Called when the server is accepting connections.","  * @return monitor {Monitor} - Returns the static Monitor class (for chaining)","  */","  Monitor.start = function(options, callback) {","    log.info('start', options);","    callback = callback || function(){};","","    // Get a default monitor","    if (!Monitor.defaultServer) {","      Monitor.defaultServer = new Monitor.Server();","      Monitor.defaultServer.start(options, callback);","    } else {","      callback();","    }","    return Monitor;","  };","","  /**","  * Stop a started monitor server in this process","  *","  * @static","  * @method stop","  * @param callback {Function(error)} - Called when the server is accepting connections.","  */","  Monitor.stop = function(callback) {","    log.info('stop');","    callback = callback || function(){};","    if (Monitor.defaultServer) {","      Monitor.defaultServer.stop(callback);","      delete Monitor.defaultServer;","    } else {","      callback();","    }","  };","","  /**","  * Produce a server string representation of the hostName:appName:appInstance","  *","  * Depending on the presence of the appName and appInstance, this will produce","  * one of the following:","  *","  *     hostName","  *     hostName:appName","  *     hostName:appName:appInstance","  *","  * @method toServerString","  * @param monitorJSON [Object] JSON object containing the following","  *     @param hostName {String} The host to monitor","  *     @param [appName] {String} The app name running on the host","  *     @param [appInstance] {String} The application instance ID running on the host","  * @return {String} A string representation of the monitor server","  */","  Monitor.toServerString = function(monitorJSON) {","    var str = monitorJSON.hostName;","    if (monitorJSON.appName) {","      str += ':' + monitorJSON.appName;","      if (monitorJSON.appInstance) {","        str += ':' + monitorJSON.appInstance;","      }","    }","    return str;","  };","","  /**","  * Produce a depth-limited copy of the specified object","  *","  * Functions are copied for visual inspection purposes - the fact that","  * they are a function, and any prototype members.  This is so a JSON.stringify","  * of the result will show the functions (normally JSON.stringify doesn't output","  * functions).","  *","  * This method is mostly for debugging - for producing a human-readable stream","  * representation of the object.  It is an exact copy, except for elements of","  * type function.","  *","  * @method deepCopy","  * @param value {Mixed} Object or value to copy","  * @param [depth=4] {Integer} Maximum depth to return.  If the depth exceeds","  *   this value, the string \"[Object]\" is returned as the value.","  * @return {Mixed} A depth-limited copy of the value","  */","  Monitor.deepCopy = function(value, depth) {","","    // Defaults","    depth = typeof(depth) === 'undefined' ? DEFAULT_DEEP_COPY_DEPTH : depth;","","    // Simple value - return the raw value","    if (typeof value !== 'object' && typeof value !== 'function') {","      return value;","    }","","    // Build a string representation of the type","    var strType = '[Object]';","    if (typeof value === 'function') {","      strType = '[Function]';","    } else if (Array.isArray(value)) {","      strType = '[Array]';","    }","","    // Limit reached","    if (depth <= 0) {","      return strType;","    }","","    // Create a new object to copy into.","    // Proactively add constructor so it's at the top of a function","    var copy = Array.isArray(value) ? [] : {};","","    // Copy all elements (by reference)","    for (var prop in value) {","      if (!value.hasOwnProperty || value.hasOwnProperty(prop)) {","        var elem = value[prop];","        if (typeof elem === 'object' || typeof elem === 'function') {","          copy[prop] = Monitor.deepCopy(elem, depth - 1);","        }","        else {","          copy[prop] = elem;","        }","      }","    }","","    // Special string formatting for functions","    if (typeof value === 'function') {","      if (_.isEmpty(copy)) {","        // No sub-elements.  Identify it as a function.","        copy = strType;","      } else {","        // Sub-elements exist.  Identify it as a function by placing","        // a constructor at the top of the object","        copy = _.extend({constructor: strType},copy);","      }","    }","","    // Return the copy","    return copy;","  };","","  /**","  * Produce a recursion-safe JSON string.","  *","  * This method recurses the specified object to a maximum specified depth","  * (default 4).","  *","  * It also indents sub-objects for debugging output.  The indent level can be","  * specified, or set to 0 for no indentation.","  *","  * This is mostly useful in debugging when the standard JSON.stringify","  * returns an error.","  *","  * @method stringify","  * @param value {Mixed} Object or value to turn into a JSON string","  * @param [depth=4] {Integer} Maximum depth to return.  If the depth exceeds","  *   this value, the string \"[Object]\" is returned as the value.","  * @param [indent=2] {Integer} Indent the specified number of spaces (0=no indent)","  * @return {String} A JSON stringified value","  */","  Monitor.stringify = function(value, depth, indent) {","","    // Defaults","    indent = typeof(indent) === 'undefined' ? 2 : indent;","","    // Return a stringified depth-limited deep copy","    return JSON.stringify(Monitor.deepCopy(value, depth), null, indent);","  };","","  /**","  * Expose the stat logger class","  *","  * @protected","  * @method setStatLoggerClass","  * @param statLoggerClass {Function} Stat logger class to expose","  */","  Monitor.setStatLoggerClass = function(StatLoggerClass) {","","    // Build the getStatLogger function","    Monitor.getStatLogger = function(module) {","      return new StatLoggerClass(module);","    };","","    // Get the logger for the Monitor module","    stat = Monitor.getStatLogger('Monitor');","  };","","  /**","  * Expose the logger class","  *","  * @protected","  * @method setLoggerClass","  * @param loggerClass {Function} Logger class to expose","  */","  Monitor.setLoggerClass = function(LoggerClass) {","","    // Build the getLogger function","    Monitor.getLogger = function(module) {","      return new LoggerClass(module);","    };","","    // Get the logger for the Monitor module","    log = Monitor.getLogger('Monitor');","  };","","  /**","  * Constructor for a list of Monitor objects","  *","  *     var myList = new Monitor.List(initialElements);","  *","  * @static","  * @method List","  * @param [items] {Array} Initial list items.  These can be raw JS objects or Monitor data model objects.","  * @return {Backbone.Collection} Collection of Monitor data model objects","  */","  Monitor.List = Backbone.Collection.extend({model: Monitor});","","  // Monitor configurations.  If running in a commonJS environment, load the","  // configs from the config package.  Otherwise just use the defaults.","  // See config/default.js for more information on these configurations.","  var defaultConfig = {","    appName: 'unknown',","    serviceBasePort: 42000,","    portsToScan: 20,","    allowExternalConnections: false,","    consoleLogListener: {","      pattern: \"{trace,warn,error,fatal}.*\"","    },","    autoStart: []","  };","  if (commonJS) {","    Monitor.Config = require('config');","    Monitor.Config.setModuleDefaults('Monitor', defaultConfig);","  } else {","    Monitor.Config = {Monitor: defaultConfig};","  }","","  // Expose external dependencies","  Monitor._ = _;","  Monitor.Backbone = Backbone;","  Monitor.Cron = Cron;","  Monitor.commonJS = commonJS;","","  // Export for both commonJS and the browser","  if (commonJS) {","    module.exports = Monitor;","  } else {","    root.Monitor = Monitor;","  }","","  // Auto-start monitors after loading","  var autoStart = Monitor.Config.Monitor.autoStart;","  if (Monitor._.size(autoStart)) {","    setTimeout(function(){","      Monitor._.each(autoStart, function(model) {","        var autoStarted = new Monitor(model);","        autoStarted.connect(function(error) {","          if (error) {","            log.error('autoStart', 'Error auto-starting monitor', model, error);","          }","          autoStartedMonitors.push(autoStarted);","        });","      });","    },0);","  }","","}(this));",""],"l":{"5":1,"8":1,"16":1,"111":1,"126":0,"143":0,"144":0,"147":0,"148":0,"153":0,"158":0,"163":0,"164":0,"166":0,"167":0,"185":0,"186":0,"196":0,"197":0,"223":0,"229":0,"232":0,"233":0,"234":0,"235":0,"238":0,"239":0,"240":0,"252":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"267":0,"268":0,"269":0,"270":0,"300":0,"306":0,"307":0,"308":0,"311":0,"313":0,"314":0,"315":0,"318":0,"319":0,"322":0,"323":0,"327":0,"328":0,"332":0,"333":0,"335":0,"356":0,"360":0,"361":0,"362":0,"365":0,"382":0,"386":0,"387":0,"388":0,"391":0,"408":0,"429":1,"431":0,"432":1,"433":0,"447":1,"448":0,"449":0,"452":0,"453":0,"454":0,"455":0,"457":0,"458":0,"463":0,"476":1,"479":0,"480":0,"485":0,"486":0,"493":0,"519":1,"520":0,"521":0,"524":0,"525":0,"526":0,"528":0,"530":0,"540":1,"541":0,"542":0,"543":0,"544":0,"545":0,"547":0,"568":1,"569":0,"570":0,"571":0,"572":0,"573":0,"576":0,"597":1,"600":0,"603":0,"604":0,"608":0,"609":0,"610":0,"611":0,"612":0,"616":0,"617":0,"622":0,"625":0,"626":0,"627":0,"628":0,"629":0,"632":0,"638":0,"639":0,"641":0,"645":0,"650":0,"672":1,"675":0,"678":0,"688":1,"691":1,"692":5,"696":1,"706":1,"709":1,"710":10,"714":1,"727":1,"732":1,"742":1,"743":1,"744":1,"746":0,"750":1,"751":1,"752":1,"753":1,"756":1,"757":1,"759":0,"763":1,"764":1,"765":0,"766":0,"767":0,"768":0,"769":0,"770":0,"772":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/grunt.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/grunt.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":44,"loc":{"start":{"line":44,"column":17},"end":{"line":44,"column":33}}},"2":{"name":"(anonymous_2)","line":106,"loc":{"start":{"line":106,"column":60},"end":{"line":106,"column":71}}},"3":{"name":"(anonymous_3)","line":110,"loc":{"start":{"line":110,"column":22},"end":{"line":110,"column":55}}},"4":{"name":"(anonymous_4)","line":115,"loc":{"start":{"line":115,"column":24},"end":{"line":115,"column":57}}},"5":{"name":"(anonymous_5)","line":123,"loc":{"start":{"line":123,"column":61},"end":{"line":123,"column":72}}},"6":{"name":"(anonymous_6)","line":125,"loc":{"start":{"line":125,"column":33},"end":{"line":125,"column":66}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":41}},"2":{"start":{"line":10,"column":0},"end":{"line":41,"column":2}},"3":{"start":{"line":44,"column":0},"end":{"line":136,"column":2}},"4":{"start":{"line":47,"column":2},"end":{"line":104,"column":5}},"5":{"start":{"line":106,"column":2},"end":{"line":121,"column":5}},"6":{"start":{"line":107,"column":4},"end":{"line":107,"column":85}},"7":{"start":{"line":108,"column":4},"end":{"line":108,"column":52}},"8":{"start":{"line":109,"column":4},"end":{"line":109,"column":21}},"9":{"start":{"line":110,"column":4},"end":{"line":120,"column":7}},"10":{"start":{"line":111,"column":6},"end":{"line":111,"column":26}},"11":{"start":{"line":112,"column":6},"end":{"line":112,"column":26}},"12":{"start":{"line":113,"column":6},"end":{"line":113,"column":64}},"13":{"start":{"line":114,"column":6},"end":{"line":114,"column":23}},"14":{"start":{"line":115,"column":6},"end":{"line":119,"column":9}},"15":{"start":{"line":116,"column":8},"end":{"line":116,"column":28}},"16":{"start":{"line":117,"column":8},"end":{"line":117,"column":28}},"17":{"start":{"line":118,"column":8},"end":{"line":118,"column":15}},"18":{"start":{"line":123,"column":2},"end":{"line":130,"column":5}},"19":{"start":{"line":124,"column":4},"end":{"line":124,"column":42}},"20":{"start":{"line":125,"column":4},"end":{"line":129,"column":7}},"21":{"start":{"line":126,"column":6},"end":{"line":126,"column":26}},"22":{"start":{"line":127,"column":6},"end":{"line":127,"column":26}},"23":{"start":{"line":128,"column":6},"end":{"line":128,"column":13}},"24":{"start":{"line":133,"column":2},"end":{"line":133,"column":54}},"25":{"start":{"line":134,"column":2},"end":{"line":134,"column":78}},"26":{"start":{"line":139,"column":0},"end":{"line":139,"column":39}}},"branchMap":{},"code":["// grunt.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For all details and documentation:","// http://lorenwest.github.com/node-monitor","","var exec = require('child_process').exec;","","// This is used in the build automation tasks, and on the server","// when running in dev mode to serve individual files for debugging.","var MODULE_DEF = {","  lib: [","    \"lib/Monitor.js\",","    \"lib/Stat.js\",","    \"lib/Log.js\",","    \"lib/Probe.js\",","    \"lib/Connection.js\",","    \"lib/Server.js\",","    \"lib/Router.js\",","    \"lib/Sync.js\",","    \"lib/probes/DataModelProbe.js\",","    \"lib/probes/RecipeProbe.js\",","    \"lib/probes/PollingProbe.js\",","    \"lib/probes/StreamProbe.js\",","    \"lib/probes/InspectProbe.js\",","    \"lib/probes/StatProbe.js\",","    \"lib/probes/LogProbe.js\"","  ],","  ext: [","    \"node_modules/underscore/underscore.js\",","    \"node_modules/backbone/backbone.js\",","    \"node_modules/backbone-callbacks/backbone-callbacks.js\",","    \"node_modules/socket.io-client/dist/socket.io.js\"","  ],","  probes: [","    \"lib/probes/FileProbe.js\",","    \"lib/probes/ReplProbe.js\",","    \"lib/probes/ProcessProbe.js\",","    \"lib/probes/SyncProbe.js\",","    \"lib/probes/FileSyncProbe.js\"","  ]","};","","// Build automation tasks","module.exports = function(grunt) {","","  // Project configuration.","  grunt.initConfig({","    pkg: '<json:package.json>',","    monitor: MODULE_DEF,","    meta: {","      banner: '/* <%= pkg.name %> - v<%= pkg.version %> - ' +","        '<%= grunt.template.today(\"yyyy-mm-dd\") %> */'","    },","    lint: {","      files: ['grunt.js', '<config:monitor.lib>', '<config:monitor.probes>', 'test/*.js']","    },","    test: {","      files: ['test/*.js']","    },","    watch: {","      files: ['grunt.js', 'yuidoc.json', '<config:monitor.lib>', '<config:monitor.probes>', 'config/doc/**', 'test/*.js'],","      tasks: 'doc lint test'","    },","    concat: {","      lib: {","        src: ['<banner>', '<config:monitor.lib>'],","        dest: './dist/monitor.js'","      },","      all: {","        src: ['<banner>', '<config:monitor.ext>', '<config:monitor.lib>'],","        dest: './dist/monitor-all.js'","      }","    },","    min: {","      lib: {","        src: ['<banner>', './dist/monitor.js'],","        dest: './dist/monitor.min.js'","","      },","      all: {","        src: ['<banner>', './dist/monitor-all.js'],","        dest: './dist/monitor-all.min.js'","      }","    },","    jshint: {","      options: {","        strict: false,","        curly: true,","        eqeqeq: true,","        immed: true,","        latedef: true,","        newcap: true,","        noarg: true,","        sub: true,","        undef: true,","        boss: true,","        eqnull: true,","        node: true","      },","      globals: {","        exports: true","      }","    }","  });","","  grunt.registerTask('doc', 'Generate documentation files', function() {","    var t = this, done = t.async(), child, version = grunt.config.get('pkg').version;","    var cmd = 'yuidoc --project-version ' + version;","    console.log(cmd);","    child = exec(cmd, function (error, stdout, stderr) {","      console.log(stderr);","      console.log(stdout);","      cmd = 'cp -R doc/* ../node-monitor-pages/doc; rm -rf doc';","      console.log(cmd);","      child = exec(cmd, function (error, stdout, stderr) {","        console.log(stderr);","        console.log(stdout);","        done();","      });","    });","  });","","  grunt.registerTask('rm_dist', 'Remove distribution files', function() {","    var t = this, done = t.async(), child;","    child = exec('rm -f dist/*', function (error, stdout, stderr) {","      console.log(stderr);","      console.log(stdout);","      done();","    });","  });","","  // Default task.","  grunt.registerTask('default', 'doc lint test dist');","  grunt.registerTask('dist', 'rm_dist concat:lib concat:all min:lib min:all');","","};","","// Expose externally","module.exports.MODULE_DEF = MODULE_DEF;",""],"l":{"6":1,"10":1,"44":1,"47":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"133":0,"134":0,"139":1}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Stat.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Stat.js","s":{"1":1,"2":1,"3":1,"4":6,"5":6,"6":1,"7":1,"8":1,"9":0,"10":0,"11":1,"12":0,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":1},"b":{"1":[1,1],"2":[1,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0,0],"12":[0,0],"13":[0,0]},"f":{"1":1,"2":6,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":1},"end":{"line":6,"column":15}}},"2":{"name":"(anonymous_2)","line":118,"loc":{"start":{"line":118,"column":28},"end":{"line":118,"column":45}}},"3":{"name":"(anonymous_3)","line":141,"loc":{"start":{"line":141,"column":20},"end":{"line":141,"column":41}}},"4":{"name":"(anonymous_4)","line":159,"loc":{"start":{"line":159,"column":20},"end":{"line":159,"column":41}}},"5":{"name":"(anonymous_5)","line":177,"loc":{"start":{"line":177,"column":16},"end":{"line":177,"column":37}}},"6":{"name":"(anonymous_6)","line":205,"loc":{"start":{"line":205,"column":15},"end":{"line":205,"column":39}}},"7":{"name":"(anonymous_7)","line":223,"loc":{"start":{"line":223,"column":15},"end":{"line":223,"column":51}}},"8":{"name":"(anonymous_8)","line":279,"loc":{"start":{"line":279,"column":21},"end":{"line":279,"column":35}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":336,"column":9}},"2":{"start":{"line":9,"column":2},"end":{"line":13,"column":26}},"3":{"start":{"line":118,"column":2},"end":{"line":121,"column":4}},"4":{"start":{"line":119,"column":4},"end":{"line":119,"column":17}},"5":{"start":{"line":120,"column":4},"end":{"line":120,"column":22}},"6":{"start":{"line":122,"column":2},"end":{"line":122,"column":29}},"7":{"start":{"line":126,"column":2},"end":{"line":126,"column":23}},"8":{"start":{"line":141,"column":2},"end":{"line":144,"column":4}},"9":{"start":{"line":142,"column":4},"end":{"line":142,"column":42}},"10":{"start":{"line":143,"column":4},"end":{"line":143,"column":46}},"11":{"start":{"line":159,"column":2},"end":{"line":162,"column":4}},"12":{"start":{"line":160,"column":4},"end":{"line":160,"column":42}},"13":{"start":{"line":161,"column":4},"end":{"line":161,"column":51}},"14":{"start":{"line":177,"column":2},"end":{"line":179,"column":4}},"15":{"start":{"line":178,"column":4},"end":{"line":178,"column":46}},"16":{"start":{"line":205,"column":2},"end":{"line":207,"column":4}},"17":{"start":{"line":206,"column":4},"end":{"line":206,"column":50}},"18":{"start":{"line":223,"column":2},"end":{"line":258,"column":4}},"19":{"start":{"line":224,"column":4},"end":{"line":225,"column":17}},"20":{"start":{"line":231,"column":4},"end":{"line":233,"column":5}},"21":{"start":{"line":232,"column":6},"end":{"line":232,"column":13}},"22":{"start":{"line":234,"column":4},"end":{"line":234,"column":23}},"23":{"start":{"line":237,"column":4},"end":{"line":254,"column":5}},"24":{"start":{"line":240,"column":6},"end":{"line":242,"column":7}},"25":{"start":{"line":241,"column":8},"end":{"line":241,"column":39}},"26":{"start":{"line":245,"column":6},"end":{"line":245,"column":45}},"27":{"start":{"line":246,"column":6},"end":{"line":248,"column":7}},"28":{"start":{"line":247,"column":8},"end":{"line":247,"column":73}},"29":{"start":{"line":251,"column":6},"end":{"line":253,"column":7}},"30":{"start":{"line":252,"column":8},"end":{"line":252,"column":56}},"31":{"start":{"line":257,"column":4},"end":{"line":257,"column":24}},"32":{"start":{"line":279,"column":2},"end":{"line":328,"column":4}},"33":{"start":{"line":280,"column":4},"end":{"line":283,"column":27}},"34":{"start":{"line":286,"column":4},"end":{"line":324,"column":5}},"35":{"start":{"line":287,"column":6},"end":{"line":290,"column":7}},"36":{"start":{"line":288,"column":8},"end":{"line":288,"column":23}},"37":{"start":{"line":289,"column":8},"end":{"line":289,"column":35}},"38":{"start":{"line":291,"column":6},"end":{"line":291,"column":69}},"39":{"start":{"line":296,"column":6},"end":{"line":320,"column":7}},"40":{"start":{"line":297,"column":8},"end":{"line":297,"column":32}},"41":{"start":{"line":298,"column":8},"end":{"line":318,"column":9}},"42":{"start":{"line":300,"column":12},"end":{"line":300,"column":22}},"43":{"start":{"line":301,"column":12},"end":{"line":301,"column":18}},"44":{"start":{"line":303,"column":12},"end":{"line":303,"column":51}},"45":{"start":{"line":304,"column":12},"end":{"line":304,"column":18}},"46":{"start":{"line":306,"column":12},"end":{"line":306,"column":20}},"47":{"start":{"line":307,"column":12},"end":{"line":307,"column":30}},"48":{"start":{"line":308,"column":12},"end":{"line":308,"column":18}},"49":{"start":{"line":310,"column":12},"end":{"line":310,"column":20}},"50":{"start":{"line":311,"column":12},"end":{"line":311,"column":31}},"51":{"start":{"line":312,"column":12},"end":{"line":312,"column":18}},"52":{"start":{"line":314,"column":12},"end":{"line":316,"column":13}},"53":{"start":{"line":315,"column":14},"end":{"line":315,"column":22}},"54":{"start":{"line":317,"column":12},"end":{"line":317,"column":18}},"55":{"start":{"line":319,"column":8},"end":{"line":319,"column":22}},"56":{"start":{"line":323,"column":6},"end":{"line":323,"column":38}},"57":{"start":{"line":327,"column":4},"end":{"line":327,"column":42}},"58":{"start":{"line":331,"column":2},"end":{"line":331,"column":31}},"59":{"start":{"line":334,"column":2},"end":{"line":334,"column":35}}},"branchMap":{"1":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":16},"end":{"line":9,"column":28}},{"start":{"line":9,"column":32},"end":{"line":9,"column":52}}]},"2":{"line":11,"type":"cond-expr","locations":[{"start":{"line":11,"column":40},"end":{"line":11,"column":80}},{"start":{"line":11,"column":83},"end":{"line":11,"column":106}}]},"3":{"line":142,"type":"cond-expr","locations":[{"start":{"line":142,"column":32},"end":{"line":142,"column":37}},{"start":{"line":142,"column":40},"end":{"line":142,"column":41}}]},"4":{"line":160,"type":"cond-expr","locations":[{"start":{"line":160,"column":32},"end":{"line":160,"column":37}},{"start":{"line":160,"column":40},"end":{"line":160,"column":41}}]},"5":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":4},"end":{"line":231,"column":4}},{"start":{"line":231,"column":4},"end":{"line":231,"column":4}}]},"6":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":6},"end":{"line":240,"column":6}},{"start":{"line":240,"column":6},"end":{"line":240,"column":6}}]},"7":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":6},"end":{"line":246,"column":6}},{"start":{"line":246,"column":6},"end":{"line":246,"column":6}}]},"8":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":6},"end":{"line":251,"column":6}},{"start":{"line":251,"column":6},"end":{"line":251,"column":6}}]},"9":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":4},"end":{"line":286,"column":4}},{"start":{"line":286,"column":4},"end":{"line":286,"column":4}}]},"10":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":6},"end":{"line":287,"column":6}},{"start":{"line":287,"column":6},"end":{"line":287,"column":6}}]},"11":{"line":298,"type":"switch","locations":[{"start":{"line":299,"column":10},"end":{"line":301,"column":18}},{"start":{"line":302,"column":10},"end":{"line":304,"column":18}},{"start":{"line":305,"column":10},"end":{"line":308,"column":18}},{"start":{"line":309,"column":10},"end":{"line":312,"column":18}},{"start":{"line":313,"column":10},"end":{"line":317,"column":18}}]},"12":{"line":303,"type":"cond-expr","locations":[{"start":{"line":303,"column":33},"end":{"line":303,"column":37}},{"start":{"line":303,"column":40},"end":{"line":303,"column":49}}]},"13":{"line":314,"type":"if","locations":[{"start":{"line":314,"column":12},"end":{"line":314,"column":12}},{"start":{"line":314,"column":12},"end":{"line":314,"column":12}}]}},"code":["/*jslint browser: true */","// Stat.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading","  var Monitor = root.Monitor || require('./Monitor'),","      // Raw events on the server (for speed), backbone events on the browser (for functionality)","      EventEmitter = Monitor.commonJS ? require('events').EventEmitter.prototype : Monitor.Backbone.Events,","      _ = Monitor._,","      emittingNow = false;","","","  /**","  * A lightweight component for gathering and emitting application statistics","  *","  * This is both a collector and emitter for application stats.","  *","  * It's designed with low development and runtime cost in mind, encouraging","  * usage with minimum concern for overhead.","  *","  * Stat Collector","  * --------------","  *","  * As a collector, it's a place to send application stats as they're discovered.","  *","  * Example for incrementing a stat in your application:","  *","  *     var stat = require('monitor').getStatLogger('myModule');","  *     ...","  *     stat.increment('requests.inbound');","  *","  * The above is a request to increment the ```myModule.requests.inbound``` stat.","  * It peforms work only if someone is listening for that event.","  *","  * Stat Emitter","  * -------------","  * As an emitter, Stat is a place to gather stats as they're collected.","  *","  * When listening for stats, wildcards can be used to register for many stats","  * within a group. For example, the following call:","  *","  *     var Stat = require('monitor').Stat;","  *     Stat.on('myModule.*.timer', myFunction);","  *","  * Will call ```myFunction``` when all ```myModule.*.timer``` stats are emitted.","  *","  * Listeners are invoked with 4 arguments:","  *","  * - module - The statLogger module name","  * - name - The name of the stat that just fired","  * - value - The numeric value passed","  * - type - An enumeration of the types of stats:<br/>","  *   'c'  - Counter.  Add (or subtract) the value to (or from) the prior value<br/>","  *   'g'  - Gague.  Value is to be recorded as provided<br/>","  *   'ms' - Timer.  Millisecond amount of time something took.","  *","  * <h2 id=\"wildcards\">Wildcards</h2>","  *","  * The following wildcards are allowed for registering events.  They're","  * modeled after the graphite wildcard syntax (from the","  * <a href=\"https://graphite.readthedocs.org/en/latest/render_api.html#paths-and-wildcards\">graphite docs</a>):","  *","  * #### Delimiter","  * The period (.) character is literal, and matches name segment separators.","  *","  * #### Asterisk","  * The asterisk (*) matches zero or more characters. It is non-greedy, so you","  * can have more than one within a single path element.","  *","  * Example: servers.ix\\*ehssvc\\*v.cpu.total.\\* will return all total CPU metrics","  * for all servers matching the given name pattern.","  *","  * An asterisk at the far right of the pattern matches everything to the right,","  * including all path segments.  For example, ```servers.*``` matches all","  * names beginning with ```servers.```.","  *","  * #### Character list or range","  * Characters in square brackets ([...]) specify a single character position in","  * the path string, and match if the character in that position matches one of","  * the characters in the list or range.","  *","  * A character range is indicated by 2 characters separated by a dash (-), and","  * means that any character between those 2 characters (inclusive) will match.","  * More than one range can be included within the square brackets, e.g. foo[a-z0-9]bar","  * will match foopbar, foo7bar etc..","  *","  * If the characters cannot be read as a range, they are treated as a","  * list - any character in the list will match, e.g. foo[bc]ar will match","  * foobar and foocar. If you want to include a dash (-) in your list, put","  * it at the beginning or end, so it's not interpreted as a range.","  *","  * #### Value list","  * Comma-separated values within curly braces ({foo,bar,...}) are treated as","  * value lists, and match if any of the values matches the current point in","  * the path. For example, servers.ix01ehssvc04v.cpu.total.{user,system,iowait}","  * will match the user, system and I/O wait total CPU metrics for the specified","  * server.","  *","  * #### Javascript Regex","  * For finer grained expression matching, a javascript style regex can be","  * specified using the ```/.../``` syntax.  This style spans the entire identifier.","  * You can ignore case using the ```/.../i``` syntax.  If the first character of the","  * string is a slash, it considers the string a javascript regular expression.","  *","  * Choosing Good Names","  * -------------------","  * It's a good idea to pick a good naming scheme with each dot-delimited segment","  * having a consistent, well-defined purpose.  Volatile segments should be as deep","  * into the hierarchy (furthest right) as possible.  Keeping the names less","  * volatile makes it easier to turn recording on for all statistics.","  *","  * @class Stat","  * @constructor","  */","  var Stat = Monitor.Stat = function(module) {","    var t = this;","    t.module = module;","  };","  var proto = Stat.prototype;","","  // This is a map of registered event names to compiled regexs, for","  // quickly testing if a statistic needs to be emitted.","  Stat.eventRegex = {};","","  /**","  * Increment a counter by a specified value","  *","  * Assuming someone is listening to this stat, this is an instruction for that","  * listener to add the specified value (usually 1) to their prior value for this stat.","  *","  * This is known as server-side setting, as the server (listener) is responsible","  * for maintaining the prior and new value for the stat.","  *","  * @method increment","  * @param name {String} Dot.separated name of the counter to increment","  * @param [value=1] {Number} Amount to increment the counter by.","  */","  proto.increment = function(name, value){","    value = _.isNumber(value) ? value : 1;","    Stat._emit(this.module, name, value, 'c');","  };","","  /**","  * Decrement a counter by a specified value","  *","  * Assuming someone is listening to this stat, this is an instruction for that","  * listener to subtract the specified value (usually 1) to their prior value for this stat.","  *","  * This is known as server-side setting, as the server (listener) is responsible","  * for maintaining the prior and new value for the stat.","  *","  * @method decrement","  * @param name {String} Dot.separated name of the counter to decrement","  * @param [value=1] {Number} Amount to decrement the counter by.","  */","  proto.decrement = function(name, value){","    value = _.isNumber(value) ? value : 1;","    Stat._emit(this.module, name, value * -1, 'c');","  };","","  /**","  * Set the stat to the specified value","  *","  * This is an instruction to any (all) listener(s) to set the stat to a","  * specific value.","  *","  * This is known as client-side setting, because the client determines the value","  * of the stat.","  *","  * @method gauge","  * @param name {String} Dot.separated name of the stat","  * @param value {Number} Number to set the gauge to","  */","  proto.gauge = function(name, value){","    Stat._emit(this.module, name, value, 'g');","  };","","  /**","  * Record the specified duration (in milliseconds) for the stat","  *","  * This is like Stat.gauge() in that it is a client-side setting of a","  * specified value.  The difference is the scale of the value is specified","  * as milliseconds.","  *","  * This may be one of the most widely used stat methods.  It can (should?) be","  * used upon callback from asynchronous methods.","  *","  * Pattern:","  *","  *     var stat = require('monitor').getStatLogger('myModule');","  *     ...","  *     var stamp = Date.now();","  *     SomeAsyncFunction(arg1, function(error) {","  *       stat.time('SomeAsyncFunction.time', Date.Now() - stamp);","  *       ...continue with error handling & callback handling","  *     });","  *","  * @method time","  * @param name {String} Dot.separated name of the stat","  * @param duration {Integer} Number of milliseconds this stat took to complete","  */","  proto.time = function(name, duration){","    Stat._emit(this.module, name, duration, 'ms');","  };","","  /**","  * Send the stat to all registered listeners","  *","  * @private","  * @static","  * @method emit","  * @param module {String} Module name","  * @param name {String} Stat name","  * @param value {Numeric} Stat value","  * @param type {String} Enumeration.  One of the following:","  *   'c'  - Counter.  + values increment, - values decrement","  *   'g'  - Gague.  Statistic is recorded as provided","  *   'ms' - Timer.  Millisecond amount of time something took","  */","  Stat._emit = function(module, name, value, type) {","    var eventName,","        fullName;","","    // Prevent stat recursion. This has the effect of disabling all stats","    // for stat handlers (and their downstream effect), but is necessary to","    // prevent infinite recursion.  If it's desired to stat the output of","    // stat handlers, then delay that processing until nextTick.","    if (emittingNow) {","      return;","    }","    emittingNow = true;","","    // Test the name against all registered events","    for (eventName in Stat._events) {","","      // Build the full name only if someone is listening","      if (!fullName) {","        fullName = module + '.' + name;","      }","","      // Get the regex associated with the name","      var regex = Stat.eventRegex[eventName];","      if (!regex) {","        regex = Stat.eventRegex[eventName] = Stat._buildRegex(eventName);","      }","","      // Test the name with the regex, and emit if it matches","      if (regex.test(fullName)) {","        Stat.emit(eventName, module, name, value, type);","      }","    }","","    // Turn off recursion prevention","    emittingNow = false;","  };","","  /**","  * Build a regex from a user entered string following the pattern described","  * in the class definition.  Loosely:","  *","  *    If it looks like a JS regexp, process it as a regexp","  *    Change all '.' to '\\.'","  *    Change all '*' to '[^\\.]*' (unless it's at the end, then convert to '.*')","  *    Change all {one,two} to (one|two)","  *    Leave all [...] alone - they work as-is","  *","  *  If an error occurs, throw an exception","  *","  * @private","  * @static","  * @method _buildRegex","  * @param str {String} String to build the regular expression from","  * @return {RegExp}The regular expression object","  *","  */","  Stat._buildRegex = function(str) {","    var regexStr = '',","        modifier = '',","        lastIdx = str.length - 1,","        inSquiggly = false;","","    // Javascript regular expressions","    if (/^\\/[^\\/]*\\/i*$/.test(str)) {","      if (/i$/.test(str)) {","        modifier = 'i';","        str = str.replace(/i$/,'');","      }","      regexStr = '^' + str.replace(/^\\//,'').replace(/\\/$/,'') + '$';","    }","","    // Process character by character","    else {","      for (var i = 0, l = str.length; i < l; i++) {","        var c = str.substr(i,1);","        switch (c) {","          case '.':","            c = '\\\\.';","            break;","          case '*':","            c = (i === lastIdx ? '.*' : '[^\\\\.]*');","            break;","          case '{':","            c = '(';","            inSquiggly = true;","            break;","          case '}':","            c = ')';","            inSquiggly = false;","            break;","          case ',':","            if (inSquiggly) {","              c = '|';","            }","            break;","        }","        regexStr += c;","      }","","      // Force it to match the full string","      regexStr = '^' + regexStr + '$';","    }","","    // Now build the regex.  This throws an exception if poorly formed.","    return new RegExp(regexStr, modifier);","  };","","  // Mixin event processing for the Stat class","  _.extend(Stat, EventEmitter);","","  // Expose this class from the Monitor module","  Monitor.setStatLoggerClass(Stat);","","}(this));",""],"l":{"6":1,"9":1,"118":1,"119":6,"120":6,"122":1,"126":1,"141":1,"142":0,"143":0,"159":1,"160":0,"161":0,"177":1,"178":0,"205":1,"206":0,"223":1,"224":0,"231":0,"232":0,"234":0,"237":0,"240":0,"241":0,"245":0,"246":0,"247":0,"251":0,"252":0,"257":0,"279":1,"280":0,"286":0,"287":0,"288":0,"289":0,"291":0,"296":0,"297":0,"298":0,"300":0,"301":0,"303":0,"304":0,"306":0,"307":0,"308":0,"310":0,"311":0,"312":0,"314":0,"315":0,"317":0,"319":0,"323":0,"327":0,"331":1,"334":1}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Log.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Log.js","s":{"1":1,"2":1,"3":1,"4":10,"5":10,"6":1,"7":1,"8":1,"9":6,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":1,"45":1},"b":{"1":[1,1],"2":[1,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[1,0]},"f":{"1":1,"2":10,"3":6,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":1},"end":{"line":6,"column":15}}},"2":{"name":"(anonymous_2)","line":84,"loc":{"start":{"line":84,"column":26},"end":{"line":84,"column":43}}},"3":{"name":"(anonymous_3)","line":143,"loc":{"start":{"line":143,"column":58},"end":{"line":143,"column":75}}},"4":{"name":"(anonymous_4)","line":144,"loc":{"start":{"line":144,"column":20},"end":{"line":144,"column":35}}},"5":{"name":"(anonymous_5)","line":160,"loc":{"start":{"line":160,"column":14},"end":{"line":160,"column":49}}},"6":{"name":"(anonymous_6)","line":226,"loc":{"start":{"line":226,"column":16},"end":{"line":226,"column":45}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":274,"column":9}},"2":{"start":{"line":9,"column":2},"end":{"line":15,"column":26}},"3":{"start":{"line":84,"column":2},"end":{"line":87,"column":4}},"4":{"start":{"line":85,"column":4},"end":{"line":85,"column":17}},"5":{"start":{"line":86,"column":4},"end":{"line":86,"column":22}},"6":{"start":{"line":88,"column":2},"end":{"line":88,"column":28}},"7":{"start":{"line":92,"column":2},"end":{"line":92,"column":22}},"8":{"start":{"line":143,"column":2},"end":{"line":147,"column":5}},"9":{"start":{"line":144,"column":4},"end":{"line":146,"column":6}},"10":{"start":{"line":145,"column":6},"end":{"line":145,"column":54}},"11":{"start":{"line":160,"column":2},"end":{"line":198,"column":4}},"12":{"start":{"line":161,"column":4},"end":{"line":162,"column":52}},"13":{"start":{"line":168,"column":4},"end":{"line":170,"column":5}},"14":{"start":{"line":169,"column":6},"end":{"line":169,"column":13}},"15":{"start":{"line":171,"column":4},"end":{"line":171,"column":23}},"16":{"start":{"line":174,"column":4},"end":{"line":174,"column":29}},"17":{"start":{"line":177,"column":4},"end":{"line":194,"column":5}},"18":{"start":{"line":180,"column":6},"end":{"line":180,"column":44}},"19":{"start":{"line":181,"column":6},"end":{"line":183,"column":7}},"20":{"start":{"line":182,"column":8},"end":{"line":182,"column":72}},"21":{"start":{"line":186,"column":6},"end":{"line":193,"column":7}},"22":{"start":{"line":189,"column":8},"end":{"line":190,"column":45}},"23":{"start":{"line":191,"column":8},"end":{"line":191,"column":60}},"24":{"start":{"line":192,"column":8},"end":{"line":192,"column":35}},"25":{"start":{"line":197,"column":4},"end":{"line":197,"column":24}},"26":{"start":{"line":201,"column":2},"end":{"line":201,"column":30}},"27":{"start":{"line":204,"column":2},"end":{"line":204,"column":30}},"28":{"start":{"line":226,"column":2},"end":{"line":266,"column":4}},"29":{"start":{"line":229,"column":4},"end":{"line":231,"column":75}},"30":{"start":{"line":234,"column":4},"end":{"line":234,"column":21}},"31":{"start":{"line":237,"column":4},"end":{"line":243,"column":5}},"32":{"start":{"line":238,"column":6},"end":{"line":238,"column":20}},"33":{"start":{"line":242,"column":6},"end":{"line":242,"column":27}},"34":{"start":{"line":246,"column":4},"end":{"line":246,"column":20}},"35":{"start":{"line":247,"column":4},"end":{"line":256,"column":5}},"36":{"start":{"line":248,"column":6},"end":{"line":248,"column":24}},"37":{"start":{"line":251,"column":6},"end":{"line":255,"column":7}},"38":{"start":{"line":252,"column":8},"end":{"line":252,"column":39}},"39":{"start":{"line":254,"column":8},"end":{"line":254,"column":42}},"40":{"start":{"line":259,"column":4},"end":{"line":264,"column":5}},"41":{"start":{"line":260,"column":6},"end":{"line":260,"column":28}},"42":{"start":{"line":263,"column":6},"end":{"line":263,"column":26}},"43":{"start":{"line":269,"column":2},"end":{"line":269,"column":66}},"44":{"start":{"line":270,"column":2},"end":{"line":272,"column":3}},"45":{"start":{"line":271,"column":4},"end":{"line":271,"column":33}}},"branchMap":{"1":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":16},"end":{"line":9,"column":28}},{"start":{"line":9,"column":32},"end":{"line":9,"column":52}}]},"2":{"line":11,"type":"cond-expr","locations":[{"start":{"line":11,"column":40},"end":{"line":11,"column":80}},{"start":{"line":11,"column":83},"end":{"line":11,"column":106}}]},"3":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":4},"end":{"line":168,"column":4}},{"start":{"line":168,"column":4},"end":{"line":168,"column":4}}]},"4":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":6},"end":{"line":181,"column":6}},{"start":{"line":181,"column":6},"end":{"line":181,"column":6}}]},"5":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":6},"end":{"line":186,"column":6}},{"start":{"line":186,"column":6},"end":{"line":186,"column":6}}]},"6":{"line":190,"type":"binary-expr","locations":[{"start":{"line":190,"column":21},"end":{"line":190,"column":29}},{"start":{"line":190,"column":33},"end":{"line":190,"column":44}}]},"7":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":4},"end":{"line":237,"column":4}},{"start":{"line":237,"column":4},"end":{"line":237,"column":4}}]},"8":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":4},"end":{"line":247,"column":4}},{"start":{"line":247,"column":4},"end":{"line":247,"column":4}}]},"9":{"line":247,"type":"binary-expr","locations":[{"start":{"line":247,"column":8},"end":{"line":247,"column":25}},{"start":{"line":247,"column":29},"end":{"line":247,"column":56}}]},"10":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":4},"end":{"line":259,"column":4}},{"start":{"line":259,"column":4},"end":{"line":259,"column":4}}]},"11":{"line":259,"type":"binary-expr","locations":[{"start":{"line":259,"column":8},"end":{"line":259,"column":24}},{"start":{"line":259,"column":28},"end":{"line":259,"column":44}}]},"12":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":2},"end":{"line":270,"column":2}},{"start":{"line":270,"column":2},"end":{"line":270,"column":2}}]}},"code":["/*jslint browser: true */","// Log.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading","  var Monitor = root.Monitor || require('./Monitor'),","      // Raw events on the server (for speed), backbone events on the browser (for functionality)","      EventEmitter = Monitor.commonJS ? require('events').EventEmitter.prototype : Monitor.Backbone.Events,","      Stat = Monitor.Stat,","      stat = new Stat('Log'),","      _ = Monitor._,","      emittingNow = false;","","  /**","  * A lightweight component for gathering and emitting application logs","  *","  * It's designed with low development and runtime cost in mind, encouraging","  * usage with minimum concern for overhead.  Runtime monitoring can be as chatty","  * as desired, outputting every log statement of every type, or finely tuned","  * with regular expressions to monitor specific log statements.","  *","  * Log Collector","  * -------------","  *","  * As a collector, it's a place to send application logs.","  *","  * Example for outputting a log in your application:","  *","  *     var log = require('monitor').getLogger('myModule');","  *     ...","  *     log.info('Credit limit accepted', limit, requestedAmount);","  *","  * The above is a request to output an ```info``` log for ```myModule``` named","  * ```Credit limit accepted```.  The log entry includes all additional parameters,","  * in this case the customer credit limit and the reqeusted amount.","  *","  * The full name for this log entry is: ```\"info.myModule.Credit limit accepted\"```","  * The name is important, as monitors can be configured to output logs based","  * on this name.","  *","  * Best practices are to include dynamic parameters in extra arguments","  * vs. concatenating strings.  This reduces logging overhead, especially","  * for log statements that aren't currently being watched.","  *","  * Log Emitter","  * -----------","  * As an emitter, the Log module is a place to capture logging output.","  *","  * When listening for log entries, wildcards can be used to register for","  * particular log types and entries.","  *","  *     var Log = require('monitor').Log;","  *     ...","  *     Log.on('info.myModule.*', myFunction);","  *","  * Will call ```myFunction``` when all ```info.myModule.*``` logs are emitted.","  *","  * Listeners are invoked with the following arguments:","  *","  * - type - The log type (trace, debug, info, warn, error, or fatal)","  * - module - The logger module name","  * - name - The log entry name","  * - args... - Additional arguments passed into the log entry are passed on","  *             as additional args to the event listener.","  *","  * Wildcards","  * ---------","  * A flexible and user-oriented wildcard pattern is used for monitoring","  * logs.  The pattern is described in the <a href=\"Stat.html#wildcards\">Wildcard secttion of the Stats class</a>.","  *","  * Choosing Good Names","  * -------------------","  * It's a good idea to pick a good naming scheme with each dot-delimited segment","  * having a consistent, well-defined purpose.  Volatile segments should be as deep","  * into the hierarchy (furthest right) as possible.  Keeping the names less","  * volatile makes it easier to turn statistics recording on for all logs.","  *","  * @class Log","  * @constructor","  */","  var Log = Monitor.Log = function(module) {","    var t = this;","    t.module = module;","  };","  var proto = Log.prototype;","","  // This is a map of registered event names to compiled regexs, for","  // quickly testing if a log needs to be emitted.","  Log.eventRegex = {};","","  /**","  * Output a ```trace``` log entry","  *","  * @method trace","  * @param name {String} Log entry name","  * @param [...] {Any} Subsequent arguments to add to the log","  */","","  /**","  * Output a ```debug``` log entry","  *","  * @method debug","  * @param name {String} Log entry name","  * @param [...] {Any} Subsequent arguments to add to the log","  */","","  /**","  * Output a ```info``` log entry","  *","  * @method info","  * @param name {String} Log entry name","  * @param [...] {Any} Subsequent arguments to add to the log","  */","","  /**","  * Output a ```warn``` log entry","  *","  * @method warn","  * @param name {String} Log entry name","  * @param [...] {Any} Subsequent arguments to add to the log","  */","","  /**","  * Output a ```error``` log entry","  *","  * @method error","  * @param name {String} Log entry name","  * @param [...] {Any} Subsequent arguments to add to the log","  */","","  /**","  * Output a ```fatal``` log entry","  *","  * @method fatal","  * @param name {String} Log entry name","  * @param [...] {Any} Subsequent arguments to add to the log","  */","","  // Add a method for each log type","  ['trace','debug','info','warn','error','fatal'].forEach(function(method) {","    proto[method] = function(name) {","      Log._emit(method, this.module, name, arguments);","    };","  });","","  /**","  * Send the log to all registered listeners","  *","  * @private","  * @static","  * @method emit","  * @param type {string} The log type (trace, debug, info, etc)","  * @param module {String} The log module name","  * @param name {String} The log entry name","  * @param args {any[]} Arguments to the log entry","  */","  Log._emit = function(type, module, name, args) {","    var eventName,","        fullName = type + '.' + module + '.' + name;","","    // Prevent log recursion. This has the effect of disabling all logging","    // for log handlers (and their downstream effect), but is necessary to","    // prevent infinite recursion.  If it's desired to log the output of","    // log handlers, then delay that processing until nextTick.","    if (emittingNow) {","      return;","    }","    emittingNow = true;","","    // Output a counter stat for this log","    stat.increment(fullName);","","    // Test the name against all registered events","    for (eventName in Log._events) {","","      // Get the regex associated with the name (using the Stat package)","      var regex = Log.eventRegex[eventName];","      if (!regex) {","        regex = Log.eventRegex[eventName] = Stat._buildRegex(eventName);","      }","","      // Test the long name with the regex, and emit if it matches","      if (regex.test(fullName)) {","","        // Build the arguments as event name, log type, module, name, [other args...]","        var allArgs = _.toArray(args),","            emitFn = Log.emit || Log.trigger; // NodeJS/server=emit, Backbone/browser=trigger","        allArgs.splice(0, 1, eventName, type, module, name);","        emitFn.apply(Log, allArgs);","      }","    }","","    // Turn off recursion prevention","    emittingNow = false;","  };","","  // Mixin event processing for the Log class","  _.extend(Log, EventEmitter);","","  // Expose this class from the Monitor module","  Monitor.setLoggerClass(Log);","","  /**","  * Output log statements to the console","  *","  * This method can be used as a listener to send logs to the console.","  *","  * It uses console.error() for error and fatal log types, and console.log()","  * for all other log types.","  *","  * Example:","  *","  *     var Log = Monitor.Log;","  *     Log.on('*.MyModule.*', Log.console);","  *","  * @static","  * @method consoleLogger","  * @param type {string} The log type (trace, debug, info, etc)","  * @param module {String} The log module name","  * @param name {String} The log entry name","  * @param args {any...} All original, starting with the short name","  */","  Log.console = function(type, module, name) {","","    // Build the string to log, in log4js format","    var nowStr = (new Date()).toJSON(),","        args = _.toArray(arguments),","        logStr = '[' + nowStr + '] [' + type.toUpperCase() + '] ' + module;","","    // Remove the type, module, name leaving the args to the log","    args.splice(0,3);","","    // If no args, then they didn't provide a name","    if (args.length === 0) {","      args = [name];","    }","    else {","      // Add the log entry name","      logStr += '.' + name;","    }","","    // If the output is simple, just print it.  Otherwise JSON.stringify it.","    logStr += ' - ';","    if (args.length === 1 && typeof args[0] === 'string') {","      logStr += args[0];","    }","    else {","      try {","        logStr += JSON.stringify(args);","      } catch(e) {","        logStr += Monitor.stringify(args);","      }","    }","","    // Send to the console - Log or error","    if (type === 'error' || type === 'fatal') {","      console.error(logStr);","    }","    else {","      console.log(logStr);","    }","","  };","","  // Attach the console log listener","  var pattern = Monitor.Config.Monitor.consoleLogListener.pattern;","  if (pattern) {","    Log.on(pattern, Log.console);","  }","","}(this));",""],"l":{"6":1,"9":1,"84":1,"85":10,"86":10,"88":1,"92":1,"143":1,"144":6,"145":0,"160":1,"161":0,"168":0,"169":0,"171":0,"174":0,"177":0,"180":0,"181":0,"182":0,"186":0,"189":0,"191":0,"192":0,"197":0,"201":1,"204":1,"226":1,"229":0,"234":0,"237":0,"238":0,"242":0,"246":0,"247":0,"248":0,"251":0,"252":0,"254":0,"259":0,"260":0,"263":0,"269":1,"270":1,"271":1}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Probe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Probe.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":1,"42":12,"43":12,"44":10,"45":12,"46":1},"b":{"1":[1,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[10,2]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":12},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":79,"loc":{"start":{"line":79,"column":16},"end":{"line":79,"column":46}}},"3":{"name":"(anonymous_3)","line":95,"loc":{"start":{"line":95,"column":13},"end":{"line":95,"column":23}}},"4":{"name":"(anonymous_4)","line":125,"loc":{"start":{"line":125,"column":15},"end":{"line":125,"column":48}}},"5":{"name":"(anonymous_5)","line":133,"loc":{"start":{"line":133,"column":29},"end":{"line":133,"column":39}}},"6":{"name":"(anonymous_6)","line":142,"loc":{"start":{"line":142,"column":21},"end":{"line":142,"column":37}}},"7":{"name":"(anonymous_7)","line":155,"loc":{"start":{"line":155,"column":17},"end":{"line":155,"column":27}}},"8":{"name":"(anonymous_8)","line":175,"loc":{"start":{"line":175,"column":17},"end":{"line":175,"column":43}}},"9":{"name":"(anonymous_9)","line":208,"loc":{"start":{"line":208,"column":18},"end":{"line":208,"column":45}}},"10":{"name":"(anonymous_10)","line":216,"loc":{"start":{"line":216,"column":17},"end":{"line":216,"column":34}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":234,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":11,"column":70}},"3":{"start":{"line":33,"column":2},"end":{"line":212,"column":5}},"4":{"start":{"line":80,"column":6},"end":{"line":80,"column":19}},"5":{"start":{"line":81,"column":6},"end":{"line":81,"column":44}},"6":{"start":{"line":96,"column":6},"end":{"line":96,"column":19}},"7":{"start":{"line":97,"column":6},"end":{"line":97,"column":38}},"8":{"start":{"line":126,"column":6},"end":{"line":130,"column":59}},"9":{"start":{"line":132,"column":6},"end":{"line":132,"column":28}},"10":{"start":{"line":133,"column":6},"end":{"line":133,"column":42}},"11":{"start":{"line":134,"column":6},"end":{"line":134,"column":43}},"12":{"start":{"line":136,"column":6},"end":{"line":140,"column":7}},"13":{"start":{"line":137,"column":8},"end":{"line":137,"column":48}},"14":{"start":{"line":138,"column":8},"end":{"line":138,"column":33}},"15":{"start":{"line":139,"column":8},"end":{"line":139,"column":39}},"16":{"start":{"line":142,"column":6},"end":{"line":151,"column":8}},"17":{"start":{"line":143,"column":8},"end":{"line":146,"column":9}},"18":{"start":{"line":144,"column":10},"end":{"line":144,"column":48}},"19":{"start":{"line":145,"column":10},"end":{"line":145,"column":33}},"20":{"start":{"line":147,"column":8},"end":{"line":147,"column":46}},"21":{"start":{"line":148,"column":8},"end":{"line":148,"column":32}},"22":{"start":{"line":149,"column":8},"end":{"line":149,"column":37}},"23":{"start":{"line":150,"column":8},"end":{"line":150,"column":40}},"24":{"start":{"line":155,"column":6},"end":{"line":162,"column":12}},"25":{"start":{"line":156,"column":8},"end":{"line":161,"column":9}},"26":{"start":{"line":157,"column":10},"end":{"line":157,"column":46}},"27":{"start":{"line":159,"column":10},"end":{"line":159,"column":73}},"28":{"start":{"line":160,"column":10},"end":{"line":160,"column":52}},"29":{"start":{"line":176,"column":6},"end":{"line":177,"column":65}},"30":{"start":{"line":180,"column":6},"end":{"line":186,"column":7}},"31":{"start":{"line":181,"column":8},"end":{"line":185,"column":9}},"32":{"start":{"line":182,"column":10},"end":{"line":184,"column":11}},"33":{"start":{"line":183,"column":12},"end":{"line":183,"column":95}},"34":{"start":{"line":189,"column":6},"end":{"line":189,"column":23}},"35":{"start":{"line":190,"column":6},"end":{"line":193,"column":7}},"36":{"start":{"line":191,"column":8},"end":{"line":191,"column":76}},"37":{"start":{"line":192,"column":8},"end":{"line":192,"column":39}},"38":{"start":{"line":194,"column":6},"end":{"line":194,"column":29}},"39":{"start":{"line":209,"column":6},"end":{"line":209,"column":36}},"40":{"start":{"line":215,"column":2},"end":{"line":215,"column":21}},"41":{"start":{"line":216,"column":2},"end":{"line":220,"column":4}},"42":{"start":{"line":217,"column":4},"end":{"line":217,"column":73}},"43":{"start":{"line":218,"column":4},"end":{"line":218,"column":75}},"44":{"start":{"line":218,"column":28},"end":{"line":218,"column":74}},"45":{"start":{"line":219,"column":4},"end":{"line":219,"column":22}},"46":{"start":{"line":232,"column":2},"end":{"line":232,"column":58}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":52}}]},"2":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":15},"end":{"line":132,"column":21}},{"start":{"line":132,"column":25},"end":{"line":132,"column":27}}]},"3":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":17},"end":{"line":133,"column":25}},{"start":{"line":133,"column":29},"end":{"line":133,"column":41}}]},"4":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":6},"end":{"line":136,"column":6}},{"start":{"line":136,"column":6},"end":{"line":136,"column":6}}]},"5":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":143,"column":8}},{"start":{"line":143,"column":8},"end":{"line":143,"column":8}}]},"6":{"line":177,"type":"binary-expr","locations":[{"start":{"line":177,"column":31},"end":{"line":177,"column":58}},{"start":{"line":177,"column":62},"end":{"line":177,"column":64}}]},"7":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":6},"end":{"line":180,"column":6}},{"start":{"line":180,"column":6},"end":{"line":180,"column":6}}]},"8":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":10},"end":{"line":182,"column":10}},{"start":{"line":182,"column":10},"end":{"line":182,"column":10}}]},"9":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":6},"end":{"line":190,"column":6}},{"start":{"line":190,"column":6},"end":{"line":190,"column":6}}]},"10":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":4},"end":{"line":218,"column":4}},{"start":{"line":218,"column":4},"end":{"line":218,"column":4}}]}},"code":["// Probe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading","  var Monitor = root.Monitor || require('./Monitor'),","      log = Monitor.getLogger('Probe'),","      stat = Monitor.getStatLogger('Probe'),","      Cron = Monitor.Cron, _ = Monitor._, Backbone = Monitor.Backbone;","","  /**","  * A software device used to expose real time data to monitors","  *","  * This is the base class from which all probe implementations extend.","  *","  * In order to send probe data to monitors, probe implementations simply set","  * their model data using ```set()```.  Those changes are detected and propagated","  * to all monitors of this probe, firing their change events.","  *","  * In order to allow remote probe control, probes need only provide a method","  * called ```{name}_control()```.  See the ```ping_control()``` method as an example,","  * and the ```Probe.onControl()``` method for more information.","  *","  * @class Probe","  * @extends Backbone.Model","  * @constructor","  * @param model - Initial data model.  Can be a JS object or another Model.","  *     @param model.id {String} The probe id.","  *       Assigned by the <a href=\"Router.html\">Router</a> on probe instantiation.","  */","  var Probe = Monitor.Probe = Backbone.Model.extend({","","    defaults: {","      id:  null","    },","","    /**","    * Initialize the probe","    *","    * This is called on the probe during construction.  It contains","    * the probe initialization attributes and an option to make probe","    * construction asynchronous.","    *","    * Probe implementations can defer the initial response to the monitor until","    * the initial state is loaded.  This allows the callback on","    * <a href=\"Monitor.html#method_connect\">```Monitor.connect()```</a>","    * to have the complete initial state of the probe when called.","    *","    * If the initial probe state cannot be determined in ```initialize```, it should","    * set the ```options.asyncInit``` option to ```true```, and call the","    * ```options.callback(error)``` once the initial state is determined.","    *","    *     // Asynchronous initialization","    *     options.asyncInit = true;","    *     var callback = options.callback","    *","    * If ```asyncInit``` is set to true, the ```callback``` must be called once","    * the initial state of the probe is known (or in an error condition).","    *","    *     // Set the initial state, and call the callback","    *     this.set(...);","    *     callback(null);","    *","    * See the <a href=\"../files/lib_probes_FileProbe.js.html#l47\">```initialize```</a>","    * method of the <a href=\"FileProbe.html\">FileProbe</a> probe for an example.  It defers","    * returning the probe to the monitor until the initial file contents are loaded.","    *","    * @method initialize","    * @param attributes {Object} Initial probe attributes sent in from the Monitor","    * @param options {Object} Initialization options","    *     @param options.asyncInit {boolean} Set this to TRUE if the initial probe","    *         state can't be known immediately.","    *     @param options.callback {function(error)} The callback to call","    *         if asyncInit is set to true.  If an error is passed, the probe","    *         will not be used.","    */","    initialize: function(attributes, options) {","      var t = this;","      log.info('init', t.toJSON(), options);","    },","","    /**","    * Release any resources consumed by this probe.","    *","    * This can be implemented by derived classes that need to be informed when","    * they are to be shut down.","    *","    * Probes that listen to events should use this method to remove their","    * event listeners.","    *","    * @method release","    */","    release: function(){","      var t = this;","      log.info('release', t.toJSON());","    },","","    /**","    * Dispatch a control message to the appropriate control function.","    *","    * This is called when the","    * <a href=\"Monitor.html#method_control\">```control()```</a>","    * method of a monitor is called.","    * The name determines the method name called on the probe.","    *","    * The probe must implement a method with the name ```{name}_control()```,","    * and that method must accept two parameters - an input params and a callback.","    * The callback must be called, passing an optional error and response object.","    *","    * For example, if the probe supports a control with the name ```go```, then","    * all it needs to do is implement the ```go_control()``` method with the","    * proper signature.  See ```ping_control()``` for an example.","    *","    * @method onControl","    * @param name {String} Name of the control message.","    * @param [params] {Any} Input parameters specific to the control message.","    * @param [callback] {Function(error, response)} Called to send the message (or error) response.","    * <ul>","    *   <li>error (Any) An object describing an error (null if no errors)</li>","    *   <li>response (Any) Response parameters specific to the control message.","    * </ul>","    */","    onControl: function(name, params, callback) {","      var t = this,","          controlFn = t[name + '_control'],","          startTime = Date.now(),","          errMsg,","          logId = 'onControl.' + t.probeClass + '.' + name;","","      params = params || {};","      callback = callback || function(){};","      log.info(logId, t.get('id'), params);","","      if (!controlFn) {","        errMsg = 'No control function: ' + name;","        log.error(logId, errMsg);","        return callback({msg: errMsg});","      }","","      var whenDone = function(error) {","        if (error) {","          log.error(logId + '.whenDone', error);","          return callback(error);","        }","        var duration = Date.now() - startTime;","        log.info(logId, params);","        stat.time(t.logId, duration);","        callback.apply(null, arguments);","      };","","      // Run the control on next tick.  This provides a consistent callback","      // chain for local and remote probes.","      setTimeout(function(){","        try {","          controlFn.call(t, params, whenDone);","        } catch (e) {","          errMsg = 'Error calling control: ' + t.probeClass + ':' + name;","          whenDone({msg:errMsg, err: e.toString()});","        }","      }, 0);","    },","","    /**","    * Remotely set a probe attribute.","    *","    * This allows setting probe attributes that are listed in writableAttributes.","    * It can be overwritten in derived Probe classes for greater control.","    *","    * @method set_control","    * @param attrs {Object} Name/Value attributes to set.  All must be writable.","    * @param callback {Function(error)} Called when the attributes are set or error","    */","    set_control: function(attrs, callback) {","      var t = this,","          writableAttributes = t.get('writableAttributes') || [];","","      // Validate the attributes are writable","      if (writableAttributes !== '*') {","        for (var attrName in attrs) {","          if (writableAttributes.indexOf(attrName) < 0) {","            return callback({code:'NOT_WRITABLE', msg: 'Attribute not writable: ' + attrName});","          }","        }","      }","","      // Set the data","      var error = null;","      if (!t.set(attrs)) {","        error = {code:'VALIDATION_ERROR', msg:'Data set failed validation'};","        log.warn('set_control', error);","      }","      return callback(error);","    },","","    /**","    * Respond to a ping control sent from a monitor","    *","    * @method ping_control","    * @param params {Object} Input parameters (not used)","    * @param callback {Function(error, response)} Called to send the message (or error) response.","    * <ul>","    *   <li>error (Any) An object describing an error</li>","    *   <li>response (String) The string 'pong' is returned as the response</li>","    * </ul>","    */","    ping_control: function(params, callback) {","      return callback(null, 'pong');","    }","","  });","","  // Register probe classes when loaded","  Probe.classes = {}; // key = name, data = class definition","  Probe.extend = function(params) {","    var t = this, probeClass = Backbone.Model.extend.apply(t, arguments);","    if (params.probeClass) {Probe.classes[params.probeClass] = probeClass;}","    return probeClass;","  };","","  /**","  * Constructor for a list of Probe objects","  *","  *     var myList = new Probe.List(initialElements);","  *","  * @static","  * @method List","  * @param [items] {Array} Initial list items.  These can be raw JS objects or Probe data model objects.","  * @return {Backbone.Collection} Collection of Probe data model objects","  */","  Probe.List = Backbone.Collection.extend({model: Probe});","","}(this));",""],"l":{"5":1,"8":1,"33":1,"80":0,"81":0,"96":0,"97":0,"126":0,"132":0,"133":0,"134":0,"136":0,"137":0,"138":0,"139":0,"142":0,"143":0,"144":0,"145":0,"147":0,"148":0,"149":0,"150":0,"155":0,"156":0,"157":0,"159":0,"160":0,"176":0,"180":0,"181":0,"182":0,"183":0,"189":0,"190":0,"191":0,"192":0,"194":0,"209":0,"215":1,"216":1,"217":12,"218":12,"219":12,"232":1}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Connection.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Connection.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":1},"b":{"1":[1,1],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":81,"loc":{"start":{"line":81,"column":16},"end":{"line":81,"column":33}}},"3":{"name":"(anonymous_3)","line":108,"loc":{"start":{"line":108,"column":13},"end":{"line":108,"column":24}}},"4":{"name":"(anonymous_4)","line":135,"loc":{"start":{"line":135,"column":10},"end":{"line":135,"column":29}}},"5":{"name":"(anonymous_5)","line":137,"loc":{"start":{"line":137,"column":29},"end":{"line":137,"column":39}}},"6":{"name":"(anonymous_6)","line":138,"loc":{"start":{"line":138,"column":19},"end":{"line":138,"column":30}}},"7":{"name":"(anonymous_7)","line":164,"loc":{"start":{"line":164,"column":16},"end":{"line":164,"column":33}}},"8":{"name":"(anonymous_8)","line":188,"loc":{"start":{"line":188,"column":16},"end":{"line":188,"column":35}}},"9":{"name":"(anonymous_9)","line":208,"loc":{"start":{"line":208,"column":10},"end":{"line":208,"column":21}}},"10":{"name":"(anonymous_10)","line":228,"loc":{"start":{"line":228,"column":14},"end":{"line":228,"column":43}}},"11":{"name":"(anonymous_11)","line":240,"loc":{"start":{"line":240,"column":17},"end":{"line":240,"column":37}}},"12":{"name":"(anonymous_12)","line":250,"loc":{"start":{"line":250,"column":21},"end":{"line":250,"column":32}}},"13":{"name":"(anonymous_13)","line":269,"loc":{"start":{"line":269,"column":26},"end":{"line":269,"column":37}}},"14":{"name":"(anonymous_14)","line":275,"loc":{"start":{"line":275,"column":35},"end":{"line":275,"column":45}}},"15":{"name":"(anonymous_15)","line":279,"loc":{"start":{"line":279,"column":31},"end":{"line":279,"column":41}}},"16":{"name":"(anonymous_16)","line":280,"loc":{"start":{"line":280,"column":26},"end":{"line":280,"column":42}}},"17":{"name":"(anonymous_17)","line":291,"loc":{"start":{"line":291,"column":36},"end":{"line":291,"column":46}}},"18":{"name":"(anonymous_18)","line":292,"loc":{"start":{"line":292,"column":36},"end":{"line":292,"column":46}}},"19":{"name":"(anonymous_19)","line":295,"loc":{"start":{"line":295,"column":36},"end":{"line":295,"column":52}}},"20":{"name":"(anonymous_20)","line":342,"loc":{"start":{"line":342,"column":18},"end":{"line":342,"column":50}}},"21":{"name":"(anonymous_21)","line":343,"loc":{"start":{"line":343,"column":29},"end":{"line":343,"column":39}}},"22":{"name":"(anonymous_22)","line":360,"loc":{"start":{"line":360,"column":55},"end":{"line":360,"column":81}}},"23":{"name":"(anonymous_23)","line":365,"loc":{"start":{"line":365,"column":24},"end":{"line":365,"column":47}}},"24":{"name":"(anonymous_24)","line":392,"loc":{"start":{"line":392,"column":37},"end":{"line":392,"column":47}}},"25":{"name":"(anonymous_25)","line":410,"loc":{"start":{"line":410,"column":29},"end":{"line":410,"column":40}}},"26":{"name":"(anonymous_26)","line":433,"loc":{"start":{"line":433,"column":21},"end":{"line":433,"column":48}}},"27":{"name":"(anonymous_27)","line":434,"loc":{"start":{"line":434,"column":29},"end":{"line":434,"column":39}}},"28":{"name":"(anonymous_28)","line":458,"loc":{"start":{"line":458,"column":25},"end":{"line":458,"column":41}}},"29":{"name":"(anonymous_29)","line":491,"loc":{"start":{"line":491,"column":18},"end":{"line":491,"column":45}}},"30":{"name":"(anonymous_30)","line":492,"loc":{"start":{"line":492,"column":29},"end":{"line":492,"column":39}}},"31":{"name":"(anonymous_31)","line":508,"loc":{"start":{"line":508,"column":21},"end":{"line":508,"column":37}}},"32":{"name":"(anonymous_32)","line":534,"loc":{"start":{"line":534,"column":64},"end":{"line":534,"column":92}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":557,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":14,"column":28}},"3":{"start":{"line":63,"column":2},"end":{"line":543,"column":5}},"4":{"start":{"line":82,"column":6},"end":{"line":82,"column":19}},"5":{"start":{"line":83,"column":6},"end":{"line":83,"column":26}},"6":{"start":{"line":84,"column":6},"end":{"line":84,"column":26}},"7":{"start":{"line":85,"column":6},"end":{"line":85,"column":28}},"8":{"start":{"line":86,"column":6},"end":{"line":86,"column":33}},"9":{"start":{"line":87,"column":6},"end":{"line":87,"column":30}},"10":{"start":{"line":88,"column":6},"end":{"line":88,"column":34}},"11":{"start":{"line":91,"column":6},"end":{"line":91,"column":44}},"12":{"start":{"line":94,"column":6},"end":{"line":104,"column":7}},"13":{"start":{"line":95,"column":8},"end":{"line":95,"column":33}},"14":{"start":{"line":96,"column":8},"end":{"line":96,"column":67}},"15":{"start":{"line":98,"column":11},"end":{"line":104,"column":7}},"16":{"start":{"line":99,"column":8},"end":{"line":99,"column":20}},"17":{"start":{"line":100,"column":8},"end":{"line":100,"column":58}},"18":{"start":{"line":103,"column":8},"end":{"line":103,"column":85}},"19":{"start":{"line":109,"column":6},"end":{"line":110,"column":25}},"20":{"start":{"line":113,"column":6},"end":{"line":116,"column":7}},"21":{"start":{"line":114,"column":8},"end":{"line":114,"column":71}},"22":{"start":{"line":115,"column":8},"end":{"line":115,"column":26}},"23":{"start":{"line":119,"column":6},"end":{"line":124,"column":8}},"24":{"start":{"line":125,"column":6},"end":{"line":125,"column":47}},"25":{"start":{"line":126,"column":6},"end":{"line":126,"column":52}},"26":{"start":{"line":136,"column":6},"end":{"line":136,"column":19}},"27":{"start":{"line":137,"column":6},"end":{"line":137,"column":42}},"28":{"start":{"line":138,"column":6},"end":{"line":141,"column":8}},"29":{"start":{"line":139,"column":8},"end":{"line":139,"column":30}},"30":{"start":{"line":140,"column":8},"end":{"line":140,"column":19}},"31":{"start":{"line":142,"column":6},"end":{"line":142,"column":27}},"32":{"start":{"line":143,"column":6},"end":{"line":143,"column":32}},"33":{"start":{"line":165,"column":6},"end":{"line":165,"column":45}},"34":{"start":{"line":166,"column":6},"end":{"line":166,"column":27}},"35":{"start":{"line":167,"column":6},"end":{"line":167,"column":26}},"36":{"start":{"line":172,"column":6},"end":{"line":177,"column":7}},"37":{"start":{"line":173,"column":8},"end":{"line":173,"column":28}},"38":{"start":{"line":174,"column":8},"end":{"line":174,"column":28}},"39":{"start":{"line":175,"column":8},"end":{"line":175,"column":40}},"40":{"start":{"line":176,"column":8},"end":{"line":176,"column":49}},"41":{"start":{"line":189,"column":6},"end":{"line":190,"column":83}},"42":{"start":{"line":191,"column":6},"end":{"line":191,"column":58}},"43":{"start":{"line":192,"column":6},"end":{"line":192,"column":70}},"44":{"start":{"line":193,"column":6},"end":{"line":193,"column":71}},"45":{"start":{"line":209,"column":6},"end":{"line":209,"column":45}},"46":{"start":{"line":210,"column":6},"end":{"line":210,"column":65}},"47":{"start":{"line":211,"column":6},"end":{"line":211,"column":43}},"48":{"start":{"line":229,"column":6},"end":{"line":229,"column":45}},"49":{"start":{"line":230,"column":6},"end":{"line":230,"column":44}},"50":{"start":{"line":231,"column":6},"end":{"line":233,"column":7}},"51":{"start":{"line":232,"column":8},"end":{"line":232,"column":65}},"52":{"start":{"line":234,"column":6},"end":{"line":234,"column":36}},"53":{"start":{"line":235,"column":6},"end":{"line":235,"column":42}},"54":{"start":{"line":236,"column":6},"end":{"line":236,"column":15}},"55":{"start":{"line":241,"column":6},"end":{"line":241,"column":45}},"56":{"start":{"line":242,"column":6},"end":{"line":245,"column":7}},"57":{"start":{"line":243,"column":8},"end":{"line":243,"column":68}},"58":{"start":{"line":244,"column":8},"end":{"line":244,"column":41}},"59":{"start":{"line":246,"column":6},"end":{"line":246,"column":15}},"60":{"start":{"line":251,"column":6},"end":{"line":251,"column":45}},"61":{"start":{"line":252,"column":6},"end":{"line":254,"column":7}},"62":{"start":{"line":253,"column":8},"end":{"line":253,"column":60}},"63":{"start":{"line":255,"column":6},"end":{"line":255,"column":28}},"64":{"start":{"line":256,"column":6},"end":{"line":256,"column":15}},"65":{"start":{"line":270,"column":6},"end":{"line":270,"column":45}},"66":{"start":{"line":271,"column":6},"end":{"line":271,"column":65}},"67":{"start":{"line":271,"column":27},"end":{"line":271,"column":64}},"68":{"start":{"line":272,"column":6},"end":{"line":272,"column":26}},"69":{"start":{"line":275,"column":6},"end":{"line":278,"column":9}},"70":{"start":{"line":276,"column":8},"end":{"line":276,"column":45}},"71":{"start":{"line":277,"column":8},"end":{"line":277,"column":39}},"72":{"start":{"line":279,"column":6},"end":{"line":279,"column":79}},"73":{"start":{"line":279,"column":42},"end":{"line":279,"column":76}},"74":{"start":{"line":280,"column":6},"end":{"line":283,"column":9}},"75":{"start":{"line":281,"column":8},"end":{"line":281,"column":35}},"76":{"start":{"line":282,"column":8},"end":{"line":282,"column":38}},"77":{"start":{"line":286,"column":6},"end":{"line":286,"column":58}},"78":{"start":{"line":287,"column":6},"end":{"line":287,"column":64}},"79":{"start":{"line":288,"column":6},"end":{"line":288,"column":58}},"80":{"start":{"line":291,"column":6},"end":{"line":291,"column":81}},"81":{"start":{"line":291,"column":47},"end":{"line":291,"column":78}},"82":{"start":{"line":292,"column":6},"end":{"line":292,"column":68}},"83":{"start":{"line":292,"column":47},"end":{"line":292,"column":65}},"84":{"start":{"line":295,"column":6},"end":{"line":308,"column":9}},"85":{"start":{"line":296,"column":8},"end":{"line":304,"column":11}},"86":{"start":{"line":305,"column":8},"end":{"line":305,"column":29}},"87":{"start":{"line":306,"column":8},"end":{"line":306,"column":27}},"88":{"start":{"line":307,"column":8},"end":{"line":307,"column":29}},"89":{"start":{"line":311,"column":6},"end":{"line":311,"column":65}},"90":{"start":{"line":314,"column":6},"end":{"line":314,"column":107}},"91":{"start":{"line":317,"column":6},"end":{"line":325,"column":9}},"92":{"start":{"line":343,"column":6},"end":{"line":343,"column":42}},"93":{"start":{"line":344,"column":6},"end":{"line":350,"column":46}},"94":{"start":{"line":353,"column":6},"end":{"line":357,"column":7}},"95":{"start":{"line":354,"column":8},"end":{"line":354,"column":33}},"96":{"start":{"line":355,"column":8},"end":{"line":355,"column":54}},"97":{"start":{"line":356,"column":8},"end":{"line":356,"column":35}},"98":{"start":{"line":360,"column":6},"end":{"line":421,"column":9}},"99":{"start":{"line":361,"column":8},"end":{"line":361,"column":40}},"100":{"start":{"line":361,"column":18},"end":{"line":361,"column":39}},"101":{"start":{"line":362,"column":8},"end":{"line":362,"column":71}},"102":{"start":{"line":362,"column":37},"end":{"line":362,"column":70}},"103":{"start":{"line":365,"column":8},"end":{"line":413,"column":10}},"104":{"start":{"line":367,"column":10},"end":{"line":370,"column":11}},"105":{"start":{"line":368,"column":12},"end":{"line":368,"column":64}},"106":{"start":{"line":369,"column":12},"end":{"line":369,"column":35}},"107":{"start":{"line":373,"column":10},"end":{"line":373,"column":40}},"108":{"start":{"line":374,"column":10},"end":{"line":374,"column":31}},"109":{"start":{"line":378,"column":10},"end":{"line":378,"column":61}},"110":{"start":{"line":379,"column":10},"end":{"line":385,"column":11}},"111":{"start":{"line":380,"column":12},"end":{"line":380,"column":29}},"112":{"start":{"line":381,"column":12},"end":{"line":381,"column":39}},"113":{"start":{"line":382,"column":12},"end":{"line":382,"column":46}},"114":{"start":{"line":383,"column":12},"end":{"line":383,"column":58}},"115":{"start":{"line":384,"column":12},"end":{"line":384,"column":63}},"116":{"start":{"line":388,"column":10},"end":{"line":388,"column":50}},"117":{"start":{"line":389,"column":10},"end":{"line":389,"column":47}},"118":{"start":{"line":390,"column":10},"end":{"line":390,"column":57}},"119":{"start":{"line":391,"column":10},"end":{"line":391,"column":37}},"120":{"start":{"line":392,"column":10},"end":{"line":399,"column":12}},"121":{"start":{"line":393,"column":12},"end":{"line":398,"column":13}},"122":{"start":{"line":394,"column":14},"end":{"line":394,"column":75}},"123":{"start":{"line":397,"column":14},"end":{"line":397,"column":58}},"124":{"start":{"line":400,"column":10},"end":{"line":400,"column":41}},"125":{"start":{"line":401,"column":10},"end":{"line":401,"column":55}},"126":{"start":{"line":402,"column":10},"end":{"line":402,"column":38}},"127":{"start":{"line":403,"column":10},"end":{"line":403,"column":44}},"128":{"start":{"line":404,"column":10},"end":{"line":404,"column":56}},"129":{"start":{"line":405,"column":10},"end":{"line":405,"column":58}},"130":{"start":{"line":406,"column":10},"end":{"line":406,"column":41}},"131":{"start":{"line":407,"column":10},"end":{"line":407,"column":55}},"132":{"start":{"line":410,"column":10},"end":{"line":412,"column":13}},"133":{"start":{"line":411,"column":12},"end":{"line":411,"column":49}},"134":{"start":{"line":416,"column":8},"end":{"line":420,"column":9}},"135":{"start":{"line":417,"column":10},"end":{"line":417,"column":69}},"136":{"start":{"line":419,"column":10},"end":{"line":419,"column":57}},"137":{"start":{"line":434,"column":6},"end":{"line":434,"column":42}},"138":{"start":{"line":435,"column":6},"end":{"line":442,"column":23}},"139":{"start":{"line":445,"column":6},"end":{"line":447,"column":7}},"140":{"start":{"line":446,"column":8},"end":{"line":446,"column":30}},"141":{"start":{"line":450,"column":6},"end":{"line":450,"column":33}},"142":{"start":{"line":451,"column":6},"end":{"line":455,"column":8}},"143":{"start":{"line":458,"column":6},"end":{"line":470,"column":8}},"144":{"start":{"line":459,"column":8},"end":{"line":462,"column":9}},"145":{"start":{"line":460,"column":10},"end":{"line":460,"column":56}},"146":{"start":{"line":461,"column":10},"end":{"line":461,"column":33}},"147":{"start":{"line":463,"column":8},"end":{"line":463,"column":73}},"148":{"start":{"line":464,"column":8},"end":{"line":464,"column":54}},"149":{"start":{"line":465,"column":8},"end":{"line":465,"column":61}},"150":{"start":{"line":466,"column":8},"end":{"line":466,"column":47}},"151":{"start":{"line":467,"column":8},"end":{"line":467,"column":57}},"152":{"start":{"line":468,"column":8},"end":{"line":468,"column":59}},"153":{"start":{"line":469,"column":8},"end":{"line":469,"column":30}},"154":{"start":{"line":473,"column":6},"end":{"line":477,"column":7}},"155":{"start":{"line":474,"column":8},"end":{"line":474,"column":75}},"156":{"start":{"line":476,"column":8},"end":{"line":476,"column":57}},"157":{"start":{"line":492,"column":6},"end":{"line":492,"column":42}},"158":{"start":{"line":493,"column":6},"end":{"line":498,"column":39}},"159":{"start":{"line":501,"column":6},"end":{"line":505,"column":7}},"160":{"start":{"line":502,"column":8},"end":{"line":502,"column":33}},"161":{"start":{"line":503,"column":8},"end":{"line":503,"column":36}},"162":{"start":{"line":504,"column":8},"end":{"line":504,"column":35}},"163":{"start":{"line":508,"column":6},"end":{"line":519,"column":8}},"164":{"start":{"line":509,"column":8},"end":{"line":518,"column":9}},"165":{"start":{"line":510,"column":10},"end":{"line":510,"column":34}},"166":{"start":{"line":511,"column":10},"end":{"line":511,"column":33}},"167":{"start":{"line":514,"column":10},"end":{"line":514,"column":48}},"168":{"start":{"line":515,"column":10},"end":{"line":515,"column":82}},"169":{"start":{"line":516,"column":10},"end":{"line":516,"column":37}},"170":{"start":{"line":517,"column":10},"end":{"line":517,"column":49}},"171":{"start":{"line":522,"column":6},"end":{"line":522,"column":59}},"172":{"start":{"line":523,"column":6},"end":{"line":537,"column":7}},"173":{"start":{"line":526,"column":8},"end":{"line":526,"column":66}},"174":{"start":{"line":527,"column":8},"end":{"line":531,"column":9}},"175":{"start":{"line":528,"column":10},"end":{"line":528,"column":62}},"176":{"start":{"line":529,"column":10},"end":{"line":529,"column":31}},"177":{"start":{"line":530,"column":10},"end":{"line":530,"column":37}},"178":{"start":{"line":534,"column":8},"end":{"line":536,"column":11}},"179":{"start":{"line":535,"column":10},"end":{"line":535,"column":38}},"180":{"start":{"line":538,"column":6},"end":{"line":538,"column":65}},"181":{"start":{"line":539,"column":6},"end":{"line":539,"column":83}},"182":{"start":{"line":540,"column":6},"end":{"line":540,"column":67}},"183":{"start":{"line":555,"column":2},"end":{"line":555,"column":68}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":52}}]},"2":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":42},"end":{"line":12,"column":49}},{"start":{"line":12,"column":53},"end":{"line":12,"column":80}}]},"3":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":6},"end":{"line":94,"column":6}},{"start":{"line":94,"column":6},"end":{"line":94,"column":6}}]},"4":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":11},"end":{"line":98,"column":11}},{"start":{"line":98,"column":11},"end":{"line":98,"column":11}}]},"5":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":15},"end":{"line":98,"column":25}},{"start":{"line":98,"column":30},"end":{"line":98,"column":45}},{"start":{"line":98,"column":49},"end":{"line":98,"column":64}}]},"6":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":6},"end":{"line":113,"column":6}},{"start":{"line":113,"column":6},"end":{"line":113,"column":6}}]},"7":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":17},"end":{"line":137,"column":25}},{"start":{"line":137,"column":29},"end":{"line":137,"column":41}}]},"8":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":6},"end":{"line":172,"column":6}},{"start":{"line":172,"column":6},"end":{"line":172,"column":6}}]},"9":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":19},"end":{"line":191,"column":29}},{"start":{"line":191,"column":33},"end":{"line":191,"column":57}}]},"10":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":23},"end":{"line":192,"column":37}},{"start":{"line":192,"column":41},"end":{"line":192,"column":69}}]},"11":{"line":193,"type":"binary-expr","locations":[{"start":{"line":193,"column":14},"end":{"line":193,"column":37}},{"start":{"line":193,"column":41},"end":{"line":193,"column":69}}]},"12":{"line":230,"type":"binary-expr","locations":[{"start":{"line":230,"column":23},"end":{"line":230,"column":37}},{"start":{"line":230,"column":41},"end":{"line":230,"column":43}}]},"13":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":6},"end":{"line":231,"column":6}},{"start":{"line":231,"column":6},"end":{"line":231,"column":6}}]},"14":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":6},"end":{"line":242,"column":6}},{"start":{"line":242,"column":6},"end":{"line":242,"column":6}}]},"15":{"line":242,"type":"binary-expr","locations":[{"start":{"line":242,"column":10},"end":{"line":242,"column":24}},{"start":{"line":242,"column":28},"end":{"line":242,"column":53}}]},"16":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":6},"end":{"line":271,"column":6}},{"start":{"line":271,"column":6},"end":{"line":271,"column":6}}]},"17":{"line":311,"type":"cond-expr","locations":[{"start":{"line":311,"column":49},"end":{"line":311,"column":50}},{"start":{"line":311,"column":53},"end":{"line":311,"column":64}}]},"18":{"line":314,"type":"cond-expr","locations":[{"start":{"line":314,"column":63},"end":{"line":314,"column":66}},{"start":{"line":314,"column":69},"end":{"line":314,"column":105}}]},"19":{"line":314,"type":"binary-expr","locations":[{"start":{"line":314,"column":69},"end":{"line":314,"column":98}},{"start":{"line":314,"column":102},"end":{"line":314,"column":105}}]},"20":{"line":343,"type":"binary-expr","locations":[{"start":{"line":343,"column":17},"end":{"line":343,"column":25}},{"start":{"line":343,"column":29},"end":{"line":343,"column":41}}]},"21":{"line":353,"type":"if","locations":[{"start":{"line":353,"column":6},"end":{"line":353,"column":6}},{"start":{"line":353,"column":6},"end":{"line":353,"column":6}}]},"22":{"line":361,"type":"if","locations":[{"start":{"line":361,"column":8},"end":{"line":361,"column":8}},{"start":{"line":361,"column":8},"end":{"line":361,"column":8}}]},"23":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":8},"end":{"line":362,"column":8}},{"start":{"line":362,"column":8},"end":{"line":362,"column":8}}]},"24":{"line":362,"type":"binary-expr","locations":[{"start":{"line":362,"column":12},"end":{"line":362,"column":22}},{"start":{"line":362,"column":26},"end":{"line":362,"column":34}}]},"25":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":10},"end":{"line":367,"column":10}},{"start":{"line":367,"column":10},"end":{"line":367,"column":10}}]},"26":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":10},"end":{"line":379,"column":10}},{"start":{"line":379,"column":10},"end":{"line":379,"column":10}}]},"27":{"line":416,"type":"if","locations":[{"start":{"line":416,"column":8},"end":{"line":416,"column":8}},{"start":{"line":416,"column":8},"end":{"line":416,"column":8}}]},"28":{"line":434,"type":"binary-expr","locations":[{"start":{"line":434,"column":17},"end":{"line":434,"column":25}},{"start":{"line":434,"column":29},"end":{"line":434,"column":41}}]},"29":{"line":445,"type":"if","locations":[{"start":{"line":445,"column":6},"end":{"line":445,"column":6}},{"start":{"line":445,"column":6},"end":{"line":445,"column":6}}]},"30":{"line":445,"type":"binary-expr","locations":[{"start":{"line":445,"column":10},"end":{"line":445,"column":23}},{"start":{"line":445,"column":27},"end":{"line":445,"column":46}}]},"31":{"line":459,"type":"if","locations":[{"start":{"line":459,"column":8},"end":{"line":459,"column":8}},{"start":{"line":459,"column":8},"end":{"line":459,"column":8}}]},"32":{"line":473,"type":"if","locations":[{"start":{"line":473,"column":6},"end":{"line":473,"column":6}},{"start":{"line":473,"column":6},"end":{"line":473,"column":6}}]},"33":{"line":473,"type":"binary-expr","locations":[{"start":{"line":473,"column":10},"end":{"line":473,"column":15}},{"start":{"line":473,"column":19},"end":{"line":473,"column":35}}]},"34":{"line":492,"type":"binary-expr","locations":[{"start":{"line":492,"column":17},"end":{"line":492,"column":25}},{"start":{"line":492,"column":29},"end":{"line":492,"column":41}}]},"35":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":6},"end":{"line":501,"column":6}},{"start":{"line":501,"column":6},"end":{"line":501,"column":6}}]},"36":{"line":509,"type":"if","locations":[{"start":{"line":509,"column":8},"end":{"line":509,"column":8}},{"start":{"line":509,"column":8},"end":{"line":509,"column":8}}]},"37":{"line":523,"type":"if","locations":[{"start":{"line":523,"column":6},"end":{"line":523,"column":6}},{"start":{"line":523,"column":6},"end":{"line":523,"column":6}}]},"38":{"line":527,"type":"if","locations":[{"start":{"line":527,"column":8},"end":{"line":527,"column":8}},{"start":{"line":527,"column":8},"end":{"line":527,"column":8}}]}},"code":["// Connection.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading","  var Monitor = root.Monitor || require('./Monitor'),","      Cron = Monitor.Cron, _ = Monitor._, Backbone = Monitor.Backbone,","      log = Monitor.getLogger('Connection'),","      stat = Monitor.getStatLogger('Connection'),","      Config = Monitor.Config, SocketIO = root.io || require('socket.io-client'),","      Probe = Monitor.Probe,","      nextConnectionNum = 1;","","  /**","  * Core monitor classes","  *","  * Classes in this module represent baseline monitor functionality.  They can","  * be loaded and run in a node.js container as well as within a browser.","  *","  * @module Monitor","  */","","  /**","  * Connection with a remote process","  *","  * Instances of this class represent a connection with a remote monitor","  * process.  The remote process is a peer of this process - it may produce","  * and/or consume probe information.","  *","  * This is an internal class created when a connection to a server is","  * requested from a monitor, or when an external connection is made from","  * a <a href=\"Server.html\">Server</a> instance.","  *","  * @class Connection","  * @extends Backbone.Model","  * @constructor","  * @param model - Initial data model.  Can be a JS object or another Model.","  *   @param [model.hostName] {String} The host name to connect with. Used if url isn't present.","  *   @param [model.hostPort] {Number} The host port to connect using. Used if url isn't present.","  *   @param [model.url] {String} The URL used to connect. Built if hostName is supplied.","  *   @param [model.socket] {io.socket} Use this pre-connected socket instead of creating a new one.","  *   @param [model.gateway=false] {Boolean} Allow this connection to use me as a gateway?  See <code><a href=\"Router.html#method_setGateway\">Router.setGateway()</a></code>","  *   @param [model.firewall=false] {Boolean} Firewall inbound probe requests on this connection?","  *   @param [model.remoteHostName] {String READONLY} Host name given by the remote server.","  *   @param [model.remoteAppName] {String READONLY} App name given by the remote server.","  *   @param [model.remoteAppInstance] {Integer READONLY} The remote application instance ID running on the host.","  *   @param [model.remotePID] {String READONLY} Remote process ID.","  *   @param [model.remoteProbeClasses] {Array of String READONLY} Array of probe classes available to the remote server.","  *   @param [model.remoteGateway] {Boolean READONLY} Can the remote process act as a gateway?","  *   @param [model.remoteFirewall] {Boolean READONLY} Is the remote side firewalled from inbound probe requests?","  */","","  /**","  * Connected to remote monitor process","  *","  * This event is emitted after the two sides of the connection have exchanged","  * information about themselves.","  *","  * @event connect","  */","  var Connection = Monitor.Connection = Backbone.Model.extend({","","    defaults:  {","      hostName: '',","      hostPort: null,","      url: null,","      socket: null,","      gateway: false,","      firewall: false,","      remoteHostName: null,","      remoteAppName: null,","      remoteAppInstance: 0,","      remotePID: 0,","      remoteProbeClasses: [],","      remoteGateway: false,","      remoteFirewall: false","    },","","    initialize: function(params) {","      var t = this;","      t.connecting = true;          // Currently connecting?","      t.connected = false;          // Currently connected?","      t.socketEvents = null;        // Key = event name, data = handler function","      t.remoteProbeIdsByKey = {};   // Key = probeKey, data = probeId","      t.remoteProbesById = {};      // Key = probeId, data = {Probe proxy}","      t.incomingMonitorsById = {};  // Key = probeId, data = {Monitor proxy}","","      // Create a connection ID for logging","      t.logId = (nextConnectionNum++) + '.';","","      // Either connect to an URL or with an existing socket","      if (params.socket) {","        t.bindConnectionEvents();","        log.info(t.logId + 'connect', {socketId:params.socket.id});","      }","      else if (params.url || (params.hostName && params.hostPort)) {","        t.connect();","        log.info(t.logId + 'connect', {url:t.get('url')});","      }","      else {","        log.error('init', 'Connection must supply a socket, url, or host name/port');","      }","    },","","    // Initiate a connection with a remote server","    connect: function() {","      var t = this, hostName = t.get('hostName'), hostPort = t.get('hostPort'),","      url = t.get('url');","","      // Build the URL if not specified","      if (!url) {","        url = t.attributes.url = 'http://' + hostName + ':' + hostPort;","        t.set('url', url);","      }","","      // Connect with this url","      var opts = {","        // 'transports': ['websocket', 'xhr-polling', 'jsonp-polling'],","        'force new connection': true,      // Don't re-use existing connections","        'reconnect': false                 // Don't let socket.io reconnect.","                                           // Reconnects are performed by the Router.","      };","      var socket = SocketIO.connect(url, opts);","      t.set({socket:socket}).bindConnectionEvents();","    },","","    /**","    * Ping a remote connection","    *","    * @method ping","    * @param callback {Function(error)} Callback when response is returned","    */","    ping: function(callback) {","      var t = this;","      callback = callback || function(){};","      var onPong = function() {","        t.off('pong', onPong);","        callback();","      };","      t.on('pong', onPong);","      t.emit('connection:ping');","    },","","    /**","    * Disconnect from the remote process","    *","    * This can be called from the underlying transport if it detects a disconnect,","    * or it can be manually called to force a disconnect.","    *","    * @method disconnect","    * @param reason {String} Reason for the disconnect","    */","    /**","    * <strong>Disconnected from a remote monitor process</strong>","    *","    * This event is emitted after the remote connection is disconnected and","    * resources released.","    *","    * @event disconnect","    * @param reason {String} Reason for the disconnect","    */","    disconnect: function(reason) {","      var t = this, socket = t.get('socket');","      t.connecting = false;","      t.connected = false;","","      // Only disconnect once.","      // This method can be called many times during a disconnect (manually,","      // by socketIO disconnect, and/or by the underlying socket disconnect).","      if (t.socketEvents) {","        t.removeAllEvents();","        socket.disconnect();","        t.trigger('disconnect', reason);","        log.info(t.logId + 'disconnect', reason);","      }","    },","","    /**","    * Is this connection with the specified host?","    *","    * @method isThisHost","    * @protected","    * @param hostName {String} The host name to check","    * @return withHost {Boolean} True if the connection is with this host","    */","    isThisHost: function(hostName) {","      var t = this, testHost = hostName.toLowerCase(),","          myHostName = t.get('hostName'), remoteHostName = t.get('remoteHostName');","      myHostName = myHostName && myHostName.toLowerCase();","      remoteHostName = remoteHostName && remoteHostName.toLowerCase();","      return (testHost === myHostName || testHost ===  remoteHostName);","    },","","    /**","    * Emit the specified message to the socket.","    *","    * The other side of the connection can handle and respond to the message","    * using the 'on' method.","    *","    * @method emit","    * @protected","    * @param name {String} The message name to send","    * @param args... {Mixed} Variable number of arguments to send with the message","    * @param callback {Function} Called when remote sends a reply","    */","    emit: function() {","      var t = this, socket = t.get('socket');","      log.info(t.logId + 'emit', Monitor.deepCopy(arguments, 5));","      socket.emit.apply(socket, arguments);","    },","","    /**","    * Bind the specified handler to the remote socket message.","    *","    * Only a single handler (per message name) can be bound using this method.","    *","    * @method addEvent","    * @protected","    * @param eventName {String} The event name to handle","    * @param handler {Function (args..., callback)} Called when the message is received.","    * <ul>","    *   <li>args... {Mixed} Arguments sent in by the remote client</li>","    *   <li>callback {Function} Final arg if the client specified a callback</li>","    * </ul>","    */","    addEvent: function(eventName, handler) {","      var t = this, socket = t.get('socket');","      t.socketEvents = t.socketEvents || {};","      if (t.socketEvents[eventName]) {","        throw new Error('Event already connected: ' + eventName);","      }","      socket.on(eventName, handler);","      t.socketEvents[eventName] = handler;","      return t;","    },","","    // Remove the specified event from the socket","    removeEvent: function(eventName) {","      var t = this, socket = t.get('socket');","      if (t.socketEvents && t.socketEvents[eventName]) {","        socket.removeListener(eventName, t.socketEvents[eventName]);","        delete t.socketEvents[eventName];","      }","      return t;","    },","","    // Remove all events bound to the socket","    removeAllEvents: function() {","      var t = this, socket = t.get('socket');","      for (var event in t.socketEvents) {","        socket.removeListener(event, t.socketEvents[event]);","      }","      t.socketEvents = null;","      return t;","    },","","    /**","    * An error has occurred on the connection","    *","    * This event is triggered when an error occurs on the connection.  Errors","    * may occur when network is unstable, and can be an indication of impending","    * disconnection.","    *","    * @event error","    * @param err {Object} Reason for the error (from underlying transport)","    */","    bindConnectionEvents: function() {","      var t = this, socket = t.get('socket');","      if (t.socketEvents) {throw new Error('Already connected');}","      t.socketEvents = {};  // key = event name, data = handler","","      // Failure events","      t.addEvent('connect_failed', function(){","        t.trigger('error', 'connect failed');","        t.disconnect('connect failed');","      });","      t.addEvent('disconnect', function(){t.disconnect('remote_disconnect');});","      t.addEvent('error', function(reason){","        t.trigger('error', reason);","        t.disconnect('connect error');","      });","","      // Inbound probe events","      t.addEvent('probe:connect', t.probeConnect.bind(t));","      t.addEvent('probe:disconnect', t.probeDisconnect.bind(t));","      t.addEvent('probe:control', t.probeControl.bind(t));","","      // Connection events","      t.addEvent('connection:ping', function(){socket.emit('connection:pong');});","      t.addEvent('connection:pong', function(){t.trigger('pong');});","","      // Connected once remote info is known","      t.addEvent('connection:info', function (info) {","        t.set({","          remoteHostName: info.hostName,","          remoteAppName: info.appName,","          remoteAppInstance: info.appInstance,","          remotePID: info.pid,","          remoteProbeClasses: info.probeClasses,","          remoteGateway: info.gateway,","          remoteFirewall: info.firewall","        });","        t.connecting = false;","        t.connected = true;","        t.trigger('connect');","      });","","      // Determine the process id","      var pid = typeof process === 'undefined' ? 1 : process.pid;","","      // Determine the app instance","      var appInstance = '' + (typeof process === 'undefined' ? pid : process.env.NODE_APP_INSTANCE || pid);","","      // Exchange connection information","      socket.emit('connection:info', {","        hostName:Monitor.getRouter().getHostName(),","        appName:Config.Monitor.appName,","        appInstance: appInstance,","        pid: pid,","        probeClasses: _.keys(Probe.classes),","        gateway:t.get('gateway'),","        firewall:t.get('firewall')","      });","    },","","    /**","    * Process an inbound request to connect with a probe","    *","    * This will fail if this connection was created as a firewall.","    *","    * @method probeConnect","    * @protected","    * @param monitorJSON {Object} Probe connection parameters, including:","    *     @param monitorJSON.probeClass {String} The probe class","    *     @param monitorJSON.initParams {Object} Probe initialization parameters","    *     @param monitorJSON.hostName {String} Connect with this host (if called as a gateway)","    *     @param monitorJSON.appName {String} Connect with this app (if called as a gateway)","    * @param callback {Function(error, probeJSON)} Callback function","    */","    probeConnect: function(monitorJSON, callback) {","      callback = callback || function(){};","      var t = this,","          errorText = '',","          router = Monitor.getRouter(),","          gateway = t.get('gateway'),","          startTime = Date.now(),","          firewall = t.get('firewall'),","          logCtxt = _.extend({}, monitorJSON);","","      // Don't allow inbound requests if this connection is firewalled","      if (firewall) {","        errorText = 'firewalled';","        log.error('probeConnect', errorText, logCtxt);","        return callback(errorText);","      }","","      // Determine the connection to use (or internal)","      router.determineConnection(monitorJSON, gateway, function(err, connection) {","        if (err) {return callback(err);}","        if (connection && !gateway) {return callback('Not a gateway');}","","        // Function to run upon connection (internal or external)","        var onConnect = function(error, probe) {","","          if (error) {","            log.error(t.logId + 'probeConnect', error, logCtxt);","            return callback(error);","          }","","          // Get probe info","          var probeId = probe.get('id');","          logCtxt.id = probeId;","","          // Check for a duplicate proxy for this probeId.  This happens when","          // two connect requests are made before the first one completes.","          var monitorProxy = t.incomingMonitorsById[probeId];","          if (monitorProxy != null) {","            probe.refCount--;","            logCtxt.dupDetected = true;","            logCtxt.refCount = probe.refCount;","            log.info(t.logId + 'probeConnected', logCtxt);","            return callback(null, monitorProxy.probe.toJSON());","          }","","          // Connect the montior proxy","          monitorProxy = new Monitor(monitorJSON);","          monitorProxy.set('probeId', probeId);","          t.incomingMonitorsById[probeId] = monitorProxy;","          monitorProxy.probe = probe;","          monitorProxy.probeChange = function(){","            try {","              t.emit('probe:change:' + probeId, probe.changedAttributes());","            }","            catch (e) {","              log.error('probeChange', e, probe, logCtxt);","            }","          };","          probe.connectTime = Date.now();","          var duration = probe.connectTime - startTime;","          logCtxt.duration = duration;","          logCtxt.refCount = probe.refCount;","          log.info(t.logId + 'probeConnected', logCtxt);","          stat.time(t.logId + 'probeConnected', duration);","          callback(null, probe.toJSON());","          probe.on('change', monitorProxy.probeChange);","","          // Disconnect the probe on connection disconnect","          t.on('disconnect', function() {","            t.probeDisconnect({probeId:probeId});","          });","        };","","        // Connect internally or externally","        if (connection) {","          router.connectExternal(monitorJSON, connection, onConnect);","        } else {","          router.connectInternal(monitorJSON, onConnect);","        }","      });","    },","","    /**","    * Process an inbound request to disconnect with a probe","    *","    * @method probeDisconnect","    * @protected","    * @param params {Object} Disconnect parameters, including:","    *   probeId {String} The unique probe id","    * @param callback {Function(error)} Callback function","    */","    probeDisconnect: function(params, callback) {","      callback = callback || function(){};","      var t = this,","          errorText = '',","          router = Monitor.getRouter(),","          probeId = params.probeId,","          monitorProxy = t.incomingMonitorsById[probeId],","          firewall = t.get('firewall'),","          logCtxt = null,","          probe = null;","","      // Already disconnected","      if (!monitorProxy || !monitorProxy.probe) {","        return callback(null);","      }","","      // Get a good logging context","      probe = monitorProxy.probe;","      logCtxt = {","        probeClass: monitorProxy.get('probeClass'),","        initParams: monitorProxy.get('initParams'),","        probeId: probeId","      };","","      // Called upon disconnect (internal or external)","      var onDisconnect = function(error) {","        if (error) {","          log.error(t.logId + 'probeDisconnect', error);","          return callback(error);","        }","        var duration = logCtxt.duration = Date.now() - probe.connectTime;","        probe.off('change', monitorProxy.probeChange);","        monitorProxy.probe = monitorProxy.probeChange = null;","        delete t.incomingMonitorsById[probeId];","        log.info(t.logId + 'probeDisconnected', logCtxt);","        stat.time(t.logId + 'probeDisconnected', duration);","        return callback(null);","      };","","      // Disconnect from an internal or external probe","      if (probe && probe.connection) {","        router.disconnectExternal(probe.connection, probeId, onDisconnect);","      } else {","        router.disconnectInternal(probeId, onDisconnect);","      }","    },","","    /**","    * Process an inbound control request to a probe","    *","    * @method probeControl","    * @protected","    * @param params {Object} Control parameters, including:","    *   probeId {String} The unique probe id","    *   name {String} The control message name","    *   params {Object} Any control message parameters","    * @param callback {Function(error, returnParams)} Callback function","    */","    probeControl: function(params, callback) {","      callback = callback || function(){};","      var t = this,","          errorText = '',","          logId = t.logId + 'probeControl',","          startTime = Date.now(),","          router = Monitor.getRouter(),","          firewall = t.get('firewall');","","      // Don't allow inbound requests if this connection is firewalled","      if (firewall) {","        errorText = 'firewalled';","        log.error(logId, errorText);","        return callback(errorText);","      }","","      // Called upon return","      var onReturn = function(error) {","        if (error) {","          log.error(logId, error);","          return callback(error);","        }","        else {","          var duration = Date.now() - startTime;","          log.info(logId + '.return', {duration:duration, returnArgs: arguments});","          stat.time(logId, duration);","          return callback.apply(null, arguments);","        }","      };","","      // Is this an internal probe?","      var probe = router.runningProbesById[params.probeId];","      if (!probe) {","","        // Is this a remote (proxied) probe?","        var monitorProxy = t.incomingMonitorsById[params.probeId];","        if (!monitorProxy) {","          errorText = 'Probe id not found: ' + params.probeId;","          log.error(errorText);","          return callback(errorText);","        }","","        // Proxying requires this form vs. callback as last arg.","        return monitorProxy.control(params.name, params.params, function(err, returnParams) {","          onReturn(err, returnParams);","        });","      }","      logId = logId + '.' + probe.probeClass + '.' + params.name;","      log.info(logId + '.request', {params:params.params, probeId:params.probeId});","      return probe.onControl(params.name, params.params, onReturn);","    }","","  });","","  /**","  * Constructor for a list of Connection objects","  *","  *     var myList = new Connection.List(initialElements);","  *","  * @static","  * @method List","  * @param [items] {Array} Initial list items.  These can be raw JS objects or Connection data model objects.","  * @return {Backbone.Collection} Collection of Connection data model objects","  */","  Connection.List = Backbone.Collection.extend({model: Connection});","","}(this));",""],"l":{"5":1,"8":1,"63":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"91":0,"94":0,"95":0,"96":0,"98":0,"99":0,"100":0,"103":0,"109":0,"113":0,"114":0,"115":0,"119":0,"125":0,"126":0,"136":0,"137":0,"138":0,"139":0,"140":0,"142":0,"143":0,"165":0,"166":0,"167":0,"172":0,"173":0,"174":0,"175":0,"176":0,"189":0,"191":0,"192":0,"193":0,"209":0,"210":0,"211":0,"229":0,"230":0,"231":0,"232":0,"234":0,"235":0,"236":0,"241":0,"242":0,"243":0,"244":0,"246":0,"251":0,"252":0,"253":0,"255":0,"256":0,"270":0,"271":0,"272":0,"275":0,"276":0,"277":0,"279":0,"280":0,"281":0,"282":0,"286":0,"287":0,"288":0,"291":0,"292":0,"295":0,"296":0,"305":0,"306":0,"307":0,"311":0,"314":0,"317":0,"343":0,"344":0,"353":0,"354":0,"355":0,"356":0,"360":0,"361":0,"362":0,"365":0,"367":0,"368":0,"369":0,"373":0,"374":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"397":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"410":0,"411":0,"416":0,"417":0,"419":0,"434":0,"435":0,"445":0,"446":0,"450":0,"451":0,"458":0,"459":0,"460":0,"461":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"473":0,"474":0,"476":0,"492":0,"493":0,"501":0,"502":0,"503":0,"504":0,"508":0,"509":0,"510":0,"511":0,"514":0,"515":0,"516":0,"517":0,"522":0,"523":0,"526":0,"527":0,"528":0,"529":0,"530":0,"534":0,"535":0,"538":0,"539":0,"540":0,"555":1}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Server.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Server.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1},"b":{"1":[1,1],"2":[1,0],"3":[1,1],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":16},"end":{"line":46,"column":33}}},"3":{"name":"(anonymous_3)","line":88,"loc":{"start":{"line":88,"column":11},"end":{"line":88,"column":39}}},"4":{"name":"(anonymous_4)","line":94,"loc":{"start":{"line":94,"column":29},"end":{"line":94,"column":39}}},"5":{"name":"(anonymous_5)","line":115,"loc":{"start":{"line":115,"column":27},"end":{"line":115,"column":41}}},"6":{"name":"(anonymous_6)","line":134,"loc":{"start":{"line":134,"column":34},"end":{"line":134,"column":44}}},"7":{"name":"(anonymous_7)","line":164,"loc":{"start":{"line":164,"column":16},"end":{"line":164,"column":35}}},"8":{"name":"(anonymous_8)","line":168,"loc":{"start":{"line":168,"column":31},"end":{"line":168,"column":44}}},"9":{"name":"(anonymous_9)","line":172,"loc":{"start":{"line":172,"column":25},"end":{"line":172,"column":38}}},"10":{"name":"(anonymous_10)","line":183,"loc":{"start":{"line":183,"column":46},"end":{"line":183,"column":64}}},"11":{"name":"(anonymous_11)","line":188,"loc":{"start":{"line":188,"column":27},"end":{"line":188,"column":44}}},"12":{"name":"(anonymous_12)","line":222,"loc":{"start":{"line":222,"column":10},"end":{"line":222,"column":29}}},"13":{"name":"(anonymous_13)","line":224,"loc":{"start":{"line":224,"column":29},"end":{"line":224,"column":39}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":257,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":14,"column":49}},"3":{"start":{"line":44,"column":2},"end":{"line":243,"column":5}},"4":{"start":{"line":47,"column":6},"end":{"line":47,"column":19}},"5":{"start":{"line":48,"column":6},"end":{"line":48,"column":28}},"6":{"start":{"line":49,"column":6},"end":{"line":49,"column":44}},"7":{"start":{"line":89,"column":6},"end":{"line":92,"column":7}},"8":{"start":{"line":90,"column":8},"end":{"line":90,"column":27}},"9":{"start":{"line":91,"column":8},"end":{"line":91,"column":23}},"10":{"start":{"line":93,"column":6},"end":{"line":93,"column":30}},"11":{"start":{"line":94,"column":6},"end":{"line":94,"column":42}},"12":{"start":{"line":95,"column":6},"end":{"line":99,"column":77}},"13":{"start":{"line":102,"column":6},"end":{"line":106,"column":7}},"14":{"start":{"line":103,"column":8},"end":{"line":103,"column":67}},"15":{"start":{"line":104,"column":8},"end":{"line":104,"column":34}},"16":{"start":{"line":105,"column":8},"end":{"line":105,"column":31}},"17":{"start":{"line":109,"column":6},"end":{"line":151,"column":7}},"18":{"start":{"line":110,"column":8},"end":{"line":110,"column":31}},"19":{"start":{"line":112,"column":8},"end":{"line":112,"column":37}},"20":{"start":{"line":115,"column":8},"end":{"line":128,"column":11}},"21":{"start":{"line":116,"column":10},"end":{"line":125,"column":11}},"22":{"start":{"line":118,"column":12},"end":{"line":121,"column":13}},"23":{"start":{"line":119,"column":14},"end":{"line":119,"column":60}},"24":{"start":{"line":120,"column":14},"end":{"line":120,"column":49}},"25":{"start":{"line":123,"column":12},"end":{"line":123,"column":57}},"26":{"start":{"line":124,"column":12},"end":{"line":124,"column":75}},"27":{"start":{"line":127,"column":10},"end":{"line":127,"column":24}},"28":{"start":{"line":131,"column":8},"end":{"line":131,"column":70}},"29":{"start":{"line":134,"column":8},"end":{"line":150,"column":11}},"30":{"start":{"line":137,"column":10},"end":{"line":139,"column":11}},"31":{"start":{"line":138,"column":12},"end":{"line":138,"column":93}},"32":{"start":{"line":142,"column":10},"end":{"line":142,"column":46}},"33":{"start":{"line":143,"column":10},"end":{"line":143,"column":33}},"34":{"start":{"line":144,"column":10},"end":{"line":149,"column":13}},"35":{"start":{"line":167,"column":6},"end":{"line":167,"column":45}},"36":{"start":{"line":168,"column":6},"end":{"line":171,"column":9}},"37":{"start":{"line":169,"column":8},"end":{"line":169,"column":71}},"38":{"start":{"line":170,"column":8},"end":{"line":170,"column":32}},"39":{"start":{"line":172,"column":6},"end":{"line":176,"column":9}},"40":{"start":{"line":173,"column":8},"end":{"line":173,"column":38}},"41":{"start":{"line":174,"column":8},"end":{"line":174,"column":69}},"42":{"start":{"line":175,"column":8},"end":{"line":175,"column":17}},"43":{"start":{"line":179,"column":6},"end":{"line":181,"column":8}},"44":{"start":{"line":182,"column":6},"end":{"line":182,"column":63}},"45":{"start":{"line":183,"column":6},"end":{"line":196,"column":9}},"46":{"start":{"line":184,"column":8},"end":{"line":186,"column":11}},"47":{"start":{"line":187,"column":8},"end":{"line":187,"column":38}},"48":{"start":{"line":188,"column":8},"end":{"line":193,"column":10}},"49":{"start":{"line":189,"column":10},"end":{"line":189,"column":43}},"50":{"start":{"line":190,"column":10},"end":{"line":190,"column":59}},"51":{"start":{"line":191,"column":10},"end":{"line":191,"column":53}},"52":{"start":{"line":192,"column":10},"end":{"line":192,"column":70}},"53":{"start":{"line":194,"column":8},"end":{"line":194,"column":50}},"54":{"start":{"line":195,"column":8},"end":{"line":195,"column":62}},"55":{"start":{"line":199,"column":6},"end":{"line":199,"column":27}},"56":{"start":{"line":200,"column":6},"end":{"line":200,"column":37}},"57":{"start":{"line":200,"column":21},"end":{"line":200,"column":36}},"58":{"start":{"line":201,"column":6},"end":{"line":201,"column":25}},"59":{"start":{"line":223,"column":6},"end":{"line":223,"column":75}},"60":{"start":{"line":224,"column":6},"end":{"line":224,"column":42}},"61":{"start":{"line":227,"column":6},"end":{"line":229,"column":7}},"62":{"start":{"line":228,"column":8},"end":{"line":228,"column":26}},"63":{"start":{"line":232,"column":6},"end":{"line":232,"column":58}},"64":{"start":{"line":233,"column":6},"end":{"line":233,"column":28}},"65":{"start":{"line":236,"column":6},"end":{"line":236,"column":28}},"66":{"start":{"line":237,"column":6},"end":{"line":237,"column":21}},"67":{"start":{"line":240,"column":6},"end":{"line":240,"column":24}},"68":{"start":{"line":241,"column":6},"end":{"line":241,"column":24}},"69":{"start":{"line":255,"column":2},"end":{"line":255,"column":60}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":52}}]},"2":{"line":13,"type":"cond-expr","locations":[{"start":{"line":13,"column":32},"end":{"line":13,"column":47}},{"start":{"line":13,"column":50},"end":{"line":13,"column":54}}]},"3":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":17},"end":{"line":14,"column":24}},{"start":{"line":14,"column":28},"end":{"line":14,"column":48}}]},"4":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":6},"end":{"line":89,"column":6}},{"start":{"line":89,"column":6},"end":{"line":89,"column":6}}]},"5":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":23}},{"start":{"line":93,"column":27},"end":{"line":93,"column":29}}]},"6":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":17},"end":{"line":94,"column":25}},{"start":{"line":94,"column":29},"end":{"line":94,"column":41}}]},"7":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":17},"end":{"line":97,"column":29}},{"start":{"line":97,"column":33},"end":{"line":97,"column":63}}]},"8":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":20},"end":{"line":98,"column":35}},{"start":{"line":98,"column":39},"end":{"line":98,"column":40}}]},"9":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":6},"end":{"line":102,"column":6}},{"start":{"line":102,"column":6},"end":{"line":102,"column":6}}]},"10":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":6},"end":{"line":109,"column":6}},{"start":{"line":109,"column":6},"end":{"line":109,"column":6}}]},"11":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":10},"end":{"line":116,"column":10}},{"start":{"line":116,"column":10},"end":{"line":116,"column":10}}]},"12":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":12},"end":{"line":118,"column":12}},{"start":{"line":118,"column":12},"end":{"line":118,"column":12}}]},"13":{"line":131,"type":"cond-expr","locations":[{"start":{"line":131,"column":46},"end":{"line":131,"column":55}},{"start":{"line":131,"column":58},"end":{"line":131,"column":69}}]},"14":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":10},"end":{"line":137,"column":10}},{"start":{"line":137,"column":10},"end":{"line":137,"column":10}}]},"15":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":6},"end":{"line":200,"column":6}},{"start":{"line":200,"column":6},"end":{"line":200,"column":6}}]},"16":{"line":224,"type":"binary-expr","locations":[{"start":{"line":224,"column":17},"end":{"line":224,"column":25}},{"start":{"line":224,"column":29},"end":{"line":224,"column":41}}]},"17":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":6},"end":{"line":227,"column":6}},{"start":{"line":227,"column":6},"end":{"line":227,"column":6}}]}},"code":["// Server.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading","  var Monitor = root.Monitor || require('./Monitor'),","      Config = Monitor.Config, _ = Monitor._, Backbone = Monitor.Backbone,","      log = Monitor.getLogger('Server'),","      stat = Monitor.getStatLogger('Server'),","      Connection = Monitor.Connection,","      Http = Monitor.commonJS ? require('http') : null,","      SocketIO = root.io || require('socket.io');","","  /**","  * A server for accepting inbound connections from remote monitors","  *","  * Servers are created when a process wants to expose probe data to remote","  * monitors.  Example:","  *","  *     // Accept remote monitors","  *     var server = new Monitor.Server();","  *     server.start();","  *","  * An instance of this class represents a listening server accepting inbound","  * connections.  As inbound connections are detected, a new","  * <a href=\"Connection.html\">Connection</a> object is created to manage","  * traffic on that connection.","  *","  * Security:  Make sure the port range specified in Monitor.Config (starting","  * at 42000) is not exposed outside your internal network.  If you desire a","  * different security model, create your secure server and pass it to the","  * constructor.","  *","  * @class Server","  * @extends Backbone.Model","  * @constructor","  * @param model - Initial data model.  Can be a JS object or another Model.","  *     @param model.gateway {Boolean} - Allow incoming monitors to use me as a gateway (default false)","  *     @param model.server {HttpServer} - The listening node.js server.  Constructed by this class, or specified if a custom server is desired.","  *     @param model.port {Integer} - The connected port.  This is set upon start() if the server isn't specified on construction.","  */","  var Server = Monitor.Server = Backbone.Model.extend({","","    initialize: function(params) {","      var t = this;","      t.isListening = false;","      t.connections = new Connection.List();","    },","","    /**","    * Start accepting monitor connections","    *","    * This method starts listening for incoming monitor connections on the","    * server.","    *","    * If the server was specified during object creation, this binds the","    * socket.io service to the server.","    *","    * If the server was not specified during object creation, this will create","    * a server on the first available monitor port.","    *","    * @method start","    * @param options {Object} - Start options. OPTIONAL","    *     @param options.port {Integer} - Port to attempt listening on if server isn't specified.  Default: 42000","    *     @param options.attempt {Integer} - Attempt number for internal recursion detection.  Default: 1","    * @param callback {Function(error)} - Called when the server is accepting connections.","    */","    /**","    * The server has started","    *","    * This event is fired when the server has determined the port to accept","    * connections on, and has successfully configured the server to start","    * accepting new monitor connections.","    *","    * @event start","    */","    /**","    * A client error has been detected","    *","    * This event is fired if an error has been detected in the underlying","    * transport.  It may indicate message loss, and may result in a","    * subsequent stop event if the connection cannot be restored.","    *","    * @event error","    */","    start: function(options, callback) {","      if (typeof options === 'function') {","        callback = options;","        options = null;","      }","      options = options || {};","      callback = callback || function(){};","      var t = this, server = t.get('server'), error,","          startTime = Date.now(),","          port = options.port || Config.Monitor.serviceBasePort,","          attempt = options.attempt || 1,","          allowExternalConnections = Config.Monitor.allowExternalConnections;","","      // Recursion detection.  Only scan for so many ports","      if (attempt > Config.Monitor.portsToScan) {","        error = {err:'connect:failure', msg: 'no ports available'};","        log.error('start', error);","        return callback(error);","      }","","      // Bind to an existing server, or create a new server","      if (server) {","        t.bindEvents(callback);","      } else {","        server = Http.createServer();","","        // Try next port if a server is listening on this port","        server.on('error', function(err) {","          if (err.code === 'EADDRINUSE') {","            // Error if the requested port is in use","            if (t.get('port')) {","              log.error('portInUse',{host:host, port:port});","              return callback({err:'portInUse'});","            }","            // Try the next port","            log.info('portInUse',{host:host, port:port});","            return t.start({port:port + 1, attempt:attempt + 1}, callback);","          }","          // Unknown error","          callback(err);","        });","","        // Allow connections from INADDR_ANY or LOCALHOST only","        var host = allowExternalConnections ? '0.0.0.0' : '127.0.0.1';","","        // Start listening, callback on success","        server.listen(port, host, function(){","","          // Set a default NODE_APP_INSTANCE based on the available server port","          if (!process.env.NODE_APP_INSTANCE)  {","            process.env.NODE_APP_INSTANCE = '' + (port - Config.Monitor.serviceBasePort + 1);","          }","","          // Record the server & port, and bind incoming events","          t.set({server: server, port: port});","          t.bindEvents(callback);","          log.info('listening', {","            appName: Config.Monitor.appName,","            NODE_APP_INSTANCE: process.env.NODE_APP_INSTANCE,","            listeningOn: host,","            port: port","          });","        });","      }","    },","","    /**","    * Bind incoming socket events to the server","    *","    * This method binds to the socket events and attaches the socket.io","    * server.  It is called when the connection starts listening.","    *","    * @protected","    * @method bindEvents","    * @param callback {Function(error)} - Called when all events are bound","    */","    bindEvents: function(callback) {","","      // Detect server errors","      var t = this, server = t.get('server');","      server.on('clientError', function(err){","        log.error('bindEvents', 'clientError detected on server', err);","        t.trigger('error', err);","      });","      server.on('close', function(err){","        server.hasEmittedClose = true;","        log.info('bindEvents.serverClose', 'Server has closed', err);","        t.stop();","      });","","      // Start up the socket.io server.","      var socketIoParams = {","        log: false","      };","      t.socketServer = SocketIO.listen(server, socketIoParams);","      t.socketServer.sockets.on('connection', function (socket) {","        var connection = Monitor.getRouter().addConnection({","          socket: socket, gateway: t.get('gateway')","        });","        t.connections.add(connection);","        var onDisconnect = function(reason) {","          t.connections.remove(connection);","          Monitor.getRouter().removeConnection(connection);","          connection.off('disconnect', onDisconnect);","          log.info('client.disconnect', 'Disconnected client socket');","        };","        connection.on('disconnect', onDisconnect);","        log.info('client.connect', 'Connected client socket');","      });","","      // Notify that we've started","      t.isListening = true;","      if (callback) {callback(null);}","      t.trigger('start');","    },","","    /**","    * Stop processing inbound monitor traffic","    *","    * This method stops accepting new inbound monitor connections, and closes","    * all existing monitor connections associated with the server.","    *","    * @method stop","    * @param callback {Function(error)} - Called when the server has stopped","    */","    /**","    * The server has stopped","    *","    * This event is fired after the server has stopped accepting inbound","    * connections, and has closed all existing connections and released","    * associated resources.","    *","    * @event stop","    */","    stop: function(callback) {","      var t = this, server = t.get('server'), router = Monitor.getRouter();","      callback = callback || function(){};","","      // Call the callback, but don't stop more than once.","      if (!t.isListening) {","        return callback();","      }","","      // Release resources","      t.connections.each(router.removeConnection, router);","      t.connections.reset();","","      // Shut down the server","      t.isListening = false;","      server.close();","","      // Send notices","      t.trigger('stop');","      return callback();","    }","  });","","  /**","  * Constructor for a list of Server objects","  *","  *     var myList = new Server.List(initialElements);","  *","  * @static","  * @method List","  * @param [items] {Array} Initial list items.  These can be raw JS objects or Server data model objects.","  * @return {Backbone.Collection} Collection of Server data model objects","  */","  Server.List = Backbone.Collection.extend({model: Server});","","}(this));",""],"l":{"5":1,"8":1,"44":1,"47":0,"48":0,"49":0,"89":0,"90":0,"91":0,"93":0,"94":0,"95":0,"102":0,"103":0,"104":0,"105":0,"109":0,"110":0,"112":0,"115":0,"116":0,"118":0,"119":0,"120":0,"123":0,"124":0,"127":0,"131":0,"134":0,"137":0,"138":0,"142":0,"143":0,"144":0,"167":0,"168":0,"169":0,"170":0,"172":0,"173":0,"174":0,"175":0,"179":0,"182":0,"183":0,"184":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"194":0,"195":0,"199":0,"200":0,"201":0,"223":0,"224":0,"227":0,"228":0,"232":0,"233":0,"236":0,"237":0,"240":0,"241":0,"255":1}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Router.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Router.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0},"b":{"1":[1,1],"2":[1,1],"3":[1,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0,0,0],"53":[0,0],"54":[0,0],"55":[0,0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":55,"loc":{"start":{"line":55,"column":16},"end":{"line":55,"column":27}}},"3":{"name":"(anonymous_3)","line":83,"loc":{"start":{"line":83,"column":17},"end":{"line":83,"column":36}}},"4":{"name":"(anonymous_4)","line":114,"loc":{"start":{"line":114,"column":16},"end":{"line":114,"column":34}}},"5":{"name":"(anonymous_5)","line":128,"loc":{"start":{"line":128,"column":17},"end":{"line":128,"column":28}}},"6":{"name":"(anonymous_6)","line":148,"loc":{"start":{"line":148,"column":17},"end":{"line":148,"column":32}}},"7":{"name":"(anonymous_7)","line":167,"loc":{"start":{"line":167,"column":19},"end":{"line":167,"column":37}}},"8":{"name":"(anonymous_8)","line":189,"loc":{"start":{"line":189,"column":22},"end":{"line":189,"column":32}}},"9":{"name":"(anonymous_9)","line":193,"loc":{"start":{"line":193,"column":25},"end":{"line":193,"column":35}}},"10":{"name":"(anonymous_10)","line":216,"loc":{"start":{"line":216,"column":22},"end":{"line":216,"column":43}}},"11":{"name":"(anonymous_11)","line":238,"loc":{"start":{"line":238,"column":20},"end":{"line":238,"column":48}}},"12":{"name":"(anonymous_12)","line":240,"loc":{"start":{"line":240,"column":29},"end":{"line":240,"column":39}}},"13":{"name":"(anonymous_13)","line":257,"loc":{"start":{"line":257,"column":47},"end":{"line":257,"column":73}}},"14":{"name":"(anonymous_14)","line":261,"loc":{"start":{"line":261,"column":24},"end":{"line":261,"column":47}}},"15":{"name":"(anonymous_15)","line":276,"loc":{"start":{"line":276,"column":32},"end":{"line":276,"column":42}}},"16":{"name":"(anonymous_16)","line":315,"loc":{"start":{"line":315,"column":23},"end":{"line":315,"column":59}}},"17":{"name":"(anonymous_17)","line":316,"loc":{"start":{"line":316,"column":29},"end":{"line":316,"column":39}}},"18":{"name":"(anonymous_18)","line":323,"loc":{"start":{"line":323,"column":25},"end":{"line":323,"column":41}}},"19":{"name":"(anonymous_19)","line":353,"loc":{"start":{"line":353,"column":19},"end":{"line":353,"column":39}}},"20":{"name":"(anonymous_20)","line":363,"loc":{"start":{"line":363,"column":42},"end":{"line":363,"column":55}}},"21":{"name":"(anonymous_21)","line":393,"loc":{"start":{"line":393,"column":25},"end":{"line":393,"column":77}}},"22":{"name":"(anonymous_22)","line":409,"loc":{"start":{"line":409,"column":27},"end":{"line":409,"column":47}}},"23":{"name":"(anonymous_23)","line":419,"loc":{"start":{"line":419,"column":24},"end":{"line":419,"column":35}}},"24":{"name":"(anonymous_24)","line":423,"loc":{"start":{"line":423,"column":22},"end":{"line":423,"column":36}}},"25":{"name":"(anonymous_25)","line":428,"loc":{"start":{"line":428,"column":30},"end":{"line":428,"column":41}}},"26":{"name":"(anonymous_26)","line":466,"loc":{"start":{"line":466,"column":53},"end":{"line":466,"column":72}}},"27":{"name":"(anonymous_27)","line":470,"loc":{"start":{"line":470,"column":23},"end":{"line":470,"column":34}}},"28":{"name":"(anonymous_28)","line":502,"loc":{"start":{"line":502,"column":39},"end":{"line":502,"column":53}}},"29":{"name":"(anonymous_29)","line":552,"loc":{"start":{"line":552,"column":20},"end":{"line":552,"column":61}}},"30":{"name":"(anonymous_30)","line":554,"loc":{"start":{"line":554,"column":32},"end":{"line":554,"column":47}}},"31":{"name":"(anonymous_31)","line":581,"loc":{"start":{"line":581,"column":21},"end":{"line":581,"column":49}}},"32":{"name":"(anonymous_32)","line":583,"loc":{"start":{"line":583,"column":34},"end":{"line":583,"column":49}}},"33":{"name":"(anonymous_33)","line":610,"loc":{"start":{"line":610,"column":24},"end":{"line":610,"column":53}}},"34":{"name":"(anonymous_34)","line":628,"loc":{"start":{"line":628,"column":23},"end":{"line":628,"column":39}}},"35":{"name":"(anonymous_35)","line":629,"loc":{"start":{"line":629,"column":45},"end":{"line":629,"column":58}}},"36":{"name":"(anonymous_36)","line":636,"loc":{"start":{"line":636,"column":25},"end":{"line":636,"column":45}}},"37":{"name":"(anonymous_37)","line":651,"loc":{"start":{"line":651,"column":25},"end":{"line":651,"column":36}}},"38":{"name":"(anonymous_38)","line":679,"loc":{"start":{"line":679,"column":21},"end":{"line":679,"column":53}}},"39":{"name":"(anonymous_39)","line":689,"loc":{"start":{"line":689,"column":21},"end":{"line":689,"column":37}}},"40":{"name":"(anonymous_40)","line":694,"loc":{"start":{"line":694,"column":19},"end":{"line":694,"column":30}}},"41":{"name":"(anonymous_41)","line":772,"loc":{"start":{"line":772,"column":24},"end":{"line":772,"column":52}}},"42":{"name":"(anonymous_42)","line":778,"loc":{"start":{"line":778,"column":19},"end":{"line":778,"column":30}}},"43":{"name":"(anonymous_43)","line":805,"loc":{"start":{"line":805,"column":21},"end":{"line":805,"column":65}}},"44":{"name":"(anonymous_44)","line":819,"loc":{"start":{"line":819,"column":54},"end":{"line":819,"column":80}}},"45":{"name":"(anonymous_45)","line":841,"loc":{"start":{"line":841,"column":57},"end":{"line":841,"column":72}}},"46":{"name":"(anonymous_46)","line":863,"loc":{"start":{"line":863,"column":24},"end":{"line":863,"column":64}}},"47":{"name":"(anonymous_47)","line":873,"loc":{"start":{"line":873,"column":70},"end":{"line":873,"column":85}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":882,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":17,"column":68}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":31}},"4":{"start":{"line":53,"column":2},"end":{"line":880,"column":5}},"5":{"start":{"line":56,"column":6},"end":{"line":56,"column":19}},"6":{"start":{"line":57,"column":6},"end":{"line":57,"column":30}},"7":{"start":{"line":58,"column":6},"end":{"line":58,"column":25}},"8":{"start":{"line":59,"column":6},"end":{"line":59,"column":44}},"9":{"start":{"line":60,"column":6},"end":{"line":60,"column":32}},"10":{"start":{"line":61,"column":6},"end":{"line":61,"column":31}},"11":{"start":{"line":62,"column":6},"end":{"line":62,"column":30}},"12":{"start":{"line":63,"column":6},"end":{"line":63,"column":45}},"13":{"start":{"line":84,"column":6},"end":{"line":84,"column":34}},"14":{"start":{"line":85,"column":6},"end":{"line":85,"column":28}},"15":{"start":{"line":86,"column":6},"end":{"line":86,"column":40}},"16":{"start":{"line":115,"column":6},"end":{"line":115,"column":19}},"17":{"start":{"line":116,"column":6},"end":{"line":116,"column":30}},"18":{"start":{"line":117,"column":6},"end":{"line":117,"column":30}},"19":{"start":{"line":118,"column":6},"end":{"line":118,"column":57}},"20":{"start":{"line":129,"column":6},"end":{"line":129,"column":43}},"21":{"start":{"line":130,"column":6},"end":{"line":134,"column":7}},"22":{"start":{"line":131,"column":8},"end":{"line":131,"column":61}},"23":{"start":{"line":131,"column":27},"end":{"line":131,"column":60}},"24":{"start":{"line":132,"column":8},"end":{"line":132,"column":58}},"25":{"start":{"line":133,"column":8},"end":{"line":133,"column":61}},"26":{"start":{"line":133,"column":27},"end":{"line":133,"column":60}},"27":{"start":{"line":135,"column":6},"end":{"line":135,"column":22}},"28":{"start":{"line":149,"column":6},"end":{"line":149,"column":22}},"29":{"start":{"line":150,"column":6},"end":{"line":150,"column":36}},"30":{"start":{"line":168,"column":6},"end":{"line":169,"column":33}},"31":{"start":{"line":172,"column":6},"end":{"line":174,"column":7}},"32":{"start":{"line":173,"column":8},"end":{"line":173,"column":63}},"33":{"start":{"line":177,"column":6},"end":{"line":177,"column":69}},"34":{"start":{"line":179,"column":6},"end":{"line":179,"column":41}},"35":{"start":{"line":180,"column":6},"end":{"line":182,"column":7}},"36":{"start":{"line":181,"column":8},"end":{"line":181,"column":69}},"37":{"start":{"line":183,"column":6},"end":{"line":183,"column":41}},"38":{"start":{"line":186,"column":6},"end":{"line":186,"column":47}},"39":{"start":{"line":189,"column":6},"end":{"line":192,"column":8}},"40":{"start":{"line":190,"column":8},"end":{"line":190,"column":48}},"41":{"start":{"line":191,"column":8},"end":{"line":191,"column":72}},"42":{"start":{"line":193,"column":6},"end":{"line":198,"column":8}},"43":{"start":{"line":194,"column":8},"end":{"line":194,"column":39}},"44":{"start":{"line":195,"column":8},"end":{"line":195,"column":45}},"45":{"start":{"line":196,"column":8},"end":{"line":196,"column":48}},"46":{"start":{"line":197,"column":8},"end":{"line":197,"column":75}},"47":{"start":{"line":199,"column":6},"end":{"line":199,"column":42}},"48":{"start":{"line":200,"column":6},"end":{"line":200,"column":48}},"49":{"start":{"line":203,"column":6},"end":{"line":203,"column":36}},"50":{"start":{"line":204,"column":6},"end":{"line":204,"column":24}},"51":{"start":{"line":217,"column":6},"end":{"line":217,"column":19}},"52":{"start":{"line":218,"column":6},"end":{"line":218,"column":60}},"53":{"start":{"line":219,"column":6},"end":{"line":219,"column":50}},"54":{"start":{"line":220,"column":6},"end":{"line":220,"column":39}},"55":{"start":{"line":221,"column":6},"end":{"line":221,"column":49}},"56":{"start":{"line":240,"column":6},"end":{"line":240,"column":42}},"57":{"start":{"line":241,"column":6},"end":{"line":247,"column":86}},"58":{"start":{"line":250,"column":6},"end":{"line":254,"column":7}},"59":{"start":{"line":251,"column":8},"end":{"line":251,"column":59}},"60":{"start":{"line":252,"column":8},"end":{"line":252,"column":44}},"61":{"start":{"line":253,"column":8},"end":{"line":253,"column":32}},"62":{"start":{"line":257,"column":6},"end":{"line":297,"column":9}},"63":{"start":{"line":258,"column":8},"end":{"line":258,"column":40}},"64":{"start":{"line":258,"column":18},"end":{"line":258,"column":39}},"65":{"start":{"line":261,"column":8},"end":{"line":289,"column":10}},"66":{"start":{"line":262,"column":10},"end":{"line":262,"column":46}},"67":{"start":{"line":262,"column":22},"end":{"line":262,"column":45}},"68":{"start":{"line":263,"column":10},"end":{"line":263,"column":37}},"69":{"start":{"line":264,"column":10},"end":{"line":264,"column":43}},"70":{"start":{"line":264,"column":44},"end":{"line":264,"column":64}},"71":{"start":{"line":265,"column":10},"end":{"line":265,"column":32}},"72":{"start":{"line":268,"column":10},"end":{"line":268,"column":52}},"73":{"start":{"line":273,"column":10},"end":{"line":273,"column":48}},"74":{"start":{"line":276,"column":10},"end":{"line":283,"column":12}},"75":{"start":{"line":277,"column":12},"end":{"line":277,"column":52}},"76":{"start":{"line":278,"column":12},"end":{"line":282,"column":13}},"77":{"start":{"line":279,"column":14},"end":{"line":279,"column":61}},"78":{"start":{"line":280,"column":14},"end":{"line":280,"column":53}},"79":{"start":{"line":281,"column":14},"end":{"line":281,"column":104}},"80":{"start":{"line":284,"column":10},"end":{"line":284,"column":50}},"81":{"start":{"line":288,"column":10},"end":{"line":288,"column":25}},"82":{"start":{"line":292,"column":8},"end":{"line":296,"column":9}},"83":{"start":{"line":293,"column":10},"end":{"line":293,"column":64}},"84":{"start":{"line":295,"column":10},"end":{"line":295,"column":52}},"85":{"start":{"line":316,"column":6},"end":{"line":316,"column":42}},"86":{"start":{"line":317,"column":6},"end":{"line":317,"column":76}},"87":{"start":{"line":320,"column":6},"end":{"line":320,"column":65}},"88":{"start":{"line":320,"column":19},"end":{"line":320,"column":64}},"89":{"start":{"line":323,"column":6},"end":{"line":331,"column":8}},"90":{"start":{"line":324,"column":8},"end":{"line":326,"column":9}},"91":{"start":{"line":325,"column":10},"end":{"line":325,"column":33}},"92":{"start":{"line":327,"column":8},"end":{"line":327,"column":49}},"93":{"start":{"line":328,"column":8},"end":{"line":328,"column":36}},"94":{"start":{"line":329,"column":8},"end":{"line":329,"column":51}},"95":{"start":{"line":330,"column":8},"end":{"line":330,"column":38}},"96":{"start":{"line":334,"column":6},"end":{"line":338,"column":7}},"97":{"start":{"line":335,"column":8},"end":{"line":335,"column":70}},"98":{"start":{"line":337,"column":8},"end":{"line":337,"column":52}},"99":{"start":{"line":354,"column":6},"end":{"line":355,"column":44}},"100":{"start":{"line":358,"column":6},"end":{"line":360,"column":7}},"101":{"start":{"line":359,"column":8},"end":{"line":359,"column":35}},"102":{"start":{"line":362,"column":6},"end":{"line":366,"column":7}},"103":{"start":{"line":363,"column":8},"end":{"line":365,"column":11}},"104":{"start":{"line":364,"column":10},"end":{"line":364,"column":56}},"105":{"start":{"line":367,"column":6},"end":{"line":367,"column":22}},"106":{"start":{"line":394,"column":6},"end":{"line":404,"column":97}},"107":{"start":{"line":409,"column":6},"end":{"line":449,"column":8}},"108":{"start":{"line":412,"column":8},"end":{"line":416,"column":9}},"109":{"start":{"line":413,"column":10},"end":{"line":413,"column":38}},"110":{"start":{"line":414,"column":10},"end":{"line":414,"column":37}},"111":{"start":{"line":415,"column":10},"end":{"line":415,"column":41}},"112":{"start":{"line":419,"column":8},"end":{"line":422,"column":10}},"113":{"start":{"line":420,"column":10},"end":{"line":420,"column":28}},"114":{"start":{"line":421,"column":10},"end":{"line":421,"column":37}},"115":{"start":{"line":423,"column":8},"end":{"line":427,"column":10}},"116":{"start":{"line":424,"column":10},"end":{"line":424,"column":28}},"117":{"start":{"line":425,"column":10},"end":{"line":425,"column":42}},"118":{"start":{"line":426,"column":10},"end":{"line":426,"column":55}},"119":{"start":{"line":428,"column":8},"end":{"line":431,"column":10}},"120":{"start":{"line":429,"column":10},"end":{"line":429,"column":47}},"121":{"start":{"line":430,"column":10},"end":{"line":430,"column":43}},"122":{"start":{"line":434,"column":8},"end":{"line":438,"column":9}},"123":{"start":{"line":435,"column":10},"end":{"line":435,"column":46}},"124":{"start":{"line":436,"column":10},"end":{"line":436,"column":42}},"125":{"start":{"line":437,"column":10},"end":{"line":437,"column":17}},"126":{"start":{"line":441,"column":8},"end":{"line":445,"column":9}},"127":{"start":{"line":442,"column":10},"end":{"line":442,"column":46}},"128":{"start":{"line":443,"column":10},"end":{"line":443,"column":42}},"129":{"start":{"line":444,"column":10},"end":{"line":444,"column":38}},"130":{"start":{"line":448,"column":8},"end":{"line":448,"column":42}},"131":{"start":{"line":452,"column":6},"end":{"line":452,"column":58}},"132":{"start":{"line":453,"column":6},"end":{"line":453,"column":62}},"133":{"start":{"line":454,"column":6},"end":{"line":454,"column":58}},"134":{"start":{"line":455,"column":6},"end":{"line":455,"column":75}},"135":{"start":{"line":456,"column":6},"end":{"line":486,"column":7}},"136":{"start":{"line":459,"column":8},"end":{"line":461,"column":9}},"137":{"start":{"line":460,"column":10},"end":{"line":460,"column":38}},"138":{"start":{"line":464,"column":8},"end":{"line":464,"column":58}},"139":{"start":{"line":465,"column":8},"end":{"line":475,"column":9}},"140":{"start":{"line":466,"column":10},"end":{"line":468,"column":13}},"141":{"start":{"line":467,"column":12},"end":{"line":467,"column":52}},"142":{"start":{"line":469,"column":10},"end":{"line":474,"column":11}},"143":{"start":{"line":470,"column":12},"end":{"line":472,"column":18}},"144":{"start":{"line":471,"column":14},"end":{"line":471,"column":79}},"145":{"start":{"line":473,"column":12},"end":{"line":473,"column":19}},"146":{"start":{"line":479,"column":8},"end":{"line":483,"column":9}},"147":{"start":{"line":480,"column":10},"end":{"line":480,"column":84}},"148":{"start":{"line":481,"column":10},"end":{"line":481,"column":48}},"149":{"start":{"line":482,"column":10},"end":{"line":482,"column":40}},"150":{"start":{"line":484,"column":8},"end":{"line":484,"column":38}},"151":{"start":{"line":485,"column":8},"end":{"line":485,"column":36}},"152":{"start":{"line":489,"column":6},"end":{"line":489,"column":68}},"153":{"start":{"line":490,"column":6},"end":{"line":492,"column":7}},"154":{"start":{"line":491,"column":8},"end":{"line":491,"column":32}},"155":{"start":{"line":495,"column":6},"end":{"line":498,"column":7}},"156":{"start":{"line":496,"column":8},"end":{"line":496,"column":38}},"157":{"start":{"line":497,"column":8},"end":{"line":497,"column":36}},"158":{"start":{"line":501,"column":6},"end":{"line":521,"column":7}},"159":{"start":{"line":502,"column":8},"end":{"line":517,"column":11}},"160":{"start":{"line":503,"column":10},"end":{"line":506,"column":11}},"161":{"start":{"line":504,"column":12},"end":{"line":504,"column":45}},"162":{"start":{"line":505,"column":12},"end":{"line":505,"column":33}},"163":{"start":{"line":509,"column":10},"end":{"line":509,"column":72}},"164":{"start":{"line":510,"column":10},"end":{"line":514,"column":11}},"165":{"start":{"line":511,"column":12},"end":{"line":511,"column":80}},"166":{"start":{"line":512,"column":12},"end":{"line":512,"column":48}},"167":{"start":{"line":513,"column":12},"end":{"line":513,"column":42}},"168":{"start":{"line":516,"column":10},"end":{"line":516,"column":34}},"169":{"start":{"line":520,"column":8},"end":{"line":520,"column":15}},"170":{"start":{"line":524,"column":6},"end":{"line":534,"column":7}},"171":{"start":{"line":526,"column":8},"end":{"line":526,"column":57}},"172":{"start":{"line":527,"column":8},"end":{"line":527,"column":37}},"173":{"start":{"line":528,"column":8},"end":{"line":528,"column":43}},"174":{"start":{"line":531,"column":8},"end":{"line":531,"column":52}},"175":{"start":{"line":532,"column":8},"end":{"line":532,"column":37}},"176":{"start":{"line":533,"column":8},"end":{"line":533,"column":38}},"177":{"start":{"line":553,"column":6},"end":{"line":553,"column":37}},"178":{"start":{"line":554,"column":6},"end":{"line":564,"column":9}},"179":{"start":{"line":557,"column":8},"end":{"line":557,"column":65}},"180":{"start":{"line":558,"column":8},"end":{"line":558,"column":75}},"181":{"start":{"line":559,"column":8},"end":{"line":559,"column":92}},"182":{"start":{"line":560,"column":8},"end":{"line":560,"column":56}},"183":{"start":{"line":563,"column":8},"end":{"line":563,"column":81}},"184":{"start":{"line":582,"column":6},"end":{"line":582,"column":19}},"185":{"start":{"line":583,"column":6},"end":{"line":592,"column":9}},"186":{"start":{"line":586,"column":8},"end":{"line":586,"column":65}},"187":{"start":{"line":587,"column":8},"end":{"line":587,"column":75}},"188":{"start":{"line":588,"column":8},"end":{"line":588,"column":56}},"189":{"start":{"line":591,"column":8},"end":{"line":591,"column":62}},"190":{"start":{"line":611,"column":6},"end":{"line":615,"column":84}},"191":{"start":{"line":618,"column":6},"end":{"line":620,"column":7}},"192":{"start":{"line":619,"column":8},"end":{"line":619,"column":42}},"193":{"start":{"line":623,"column":6},"end":{"line":625,"column":7}},"194":{"start":{"line":624,"column":8},"end":{"line":624,"column":15}},"195":{"start":{"line":628,"column":6},"end":{"line":633,"column":8}},"196":{"start":{"line":629,"column":8},"end":{"line":631,"column":11}},"197":{"start":{"line":630,"column":10},"end":{"line":630,"column":20}},"198":{"start":{"line":632,"column":8},"end":{"line":632,"column":44}},"199":{"start":{"line":636,"column":6},"end":{"line":642,"column":9}},"200":{"start":{"line":637,"column":8},"end":{"line":637,"column":60}},"201":{"start":{"line":638,"column":8},"end":{"line":638,"column":46}},"202":{"start":{"line":639,"column":8},"end":{"line":641,"column":9}},"203":{"start":{"line":640,"column":10},"end":{"line":640,"column":36}},"204":{"start":{"line":645,"column":6},"end":{"line":645,"column":75}},"205":{"start":{"line":646,"column":6},"end":{"line":650,"column":7}},"206":{"start":{"line":647,"column":8},"end":{"line":647,"column":100}},"207":{"start":{"line":648,"column":8},"end":{"line":648,"column":48}},"208":{"start":{"line":649,"column":8},"end":{"line":649,"column":34}},"209":{"start":{"line":651,"column":6},"end":{"line":657,"column":8}},"210":{"start":{"line":652,"column":8},"end":{"line":652,"column":24}},"211":{"start":{"line":653,"column":8},"end":{"line":653,"column":59}},"212":{"start":{"line":654,"column":8},"end":{"line":656,"column":9}},"213":{"start":{"line":655,"column":10},"end":{"line":655,"column":30}},"214":{"start":{"line":658,"column":6},"end":{"line":663,"column":7}},"215":{"start":{"line":659,"column":8},"end":{"line":662,"column":9}},"216":{"start":{"line":660,"column":10},"end":{"line":660,"column":76}},"217":{"start":{"line":661,"column":10},"end":{"line":661,"column":78}},"218":{"start":{"line":682,"column":6},"end":{"line":687,"column":27}},"219":{"start":{"line":689,"column":6},"end":{"line":715,"column":8}},"220":{"start":{"line":694,"column":8},"end":{"line":714,"column":14}},"221":{"start":{"line":697,"column":10},"end":{"line":708,"column":11}},"222":{"start":{"line":698,"column":12},"end":{"line":706,"column":13}},"223":{"start":{"line":699,"column":14},"end":{"line":699,"column":52}},"224":{"start":{"line":700,"column":14},"end":{"line":700,"column":55}},"225":{"start":{"line":701,"column":14},"end":{"line":705,"column":27}},"226":{"start":{"line":704,"column":16},"end":{"line":704,"column":36}},"227":{"start":{"line":707,"column":12},"end":{"line":707,"column":35}},"228":{"start":{"line":711,"column":10},"end":{"line":711,"column":31}},"229":{"start":{"line":712,"column":10},"end":{"line":712,"column":83}},"230":{"start":{"line":713,"column":10},"end":{"line":713,"column":36}},"231":{"start":{"line":718,"column":6},"end":{"line":718,"column":49}},"232":{"start":{"line":719,"column":6},"end":{"line":758,"column":7}},"233":{"start":{"line":722,"column":8},"end":{"line":722,"column":51}},"234":{"start":{"line":723,"column":8},"end":{"line":725,"column":9}},"235":{"start":{"line":724,"column":10},"end":{"line":724,"column":70}},"236":{"start":{"line":726,"column":8},"end":{"line":726,"column":65}},"237":{"start":{"line":727,"column":8},"end":{"line":751,"column":9}},"238":{"start":{"line":731,"column":10},"end":{"line":731,"column":55}},"239":{"start":{"line":734,"column":10},"end":{"line":736,"column":11}},"240":{"start":{"line":735,"column":12},"end":{"line":735,"column":44}},"241":{"start":{"line":739,"column":10},"end":{"line":739,"column":61}},"242":{"start":{"line":740,"column":10},"end":{"line":743,"column":13}},"243":{"start":{"line":744,"column":10},"end":{"line":744,"column":33}},"244":{"start":{"line":745,"column":10},"end":{"line":745,"column":40}},"245":{"start":{"line":746,"column":10},"end":{"line":746,"column":53}},"246":{"start":{"line":747,"column":10},"end":{"line":747,"column":56}},"247":{"start":{"line":749,"column":10},"end":{"line":749,"column":89}},"248":{"start":{"line":750,"column":10},"end":{"line":750,"column":33}},"249":{"start":{"line":755,"column":8},"end":{"line":757,"column":9}},"250":{"start":{"line":756,"column":10},"end":{"line":756,"column":17}},"251":{"start":{"line":761,"column":6},"end":{"line":761,"column":17}},"252":{"start":{"line":773,"column":6},"end":{"line":773,"column":61}},"253":{"start":{"line":774,"column":6},"end":{"line":774,"column":61}},"254":{"start":{"line":774,"column":23},"end":{"line":774,"column":60}},"255":{"start":{"line":775,"column":6},"end":{"line":787,"column":7}},"256":{"start":{"line":778,"column":8},"end":{"line":786,"column":29}},"257":{"start":{"line":779,"column":10},"end":{"line":785,"column":11}},"258":{"start":{"line":780,"column":12},"end":{"line":782,"column":25}},"259":{"start":{"line":781,"column":14},"end":{"line":781,"column":34}},"260":{"start":{"line":783,"column":12},"end":{"line":783,"column":60}},"261":{"start":{"line":784,"column":12},"end":{"line":784,"column":48}},"262":{"start":{"line":788,"column":6},"end":{"line":788,"column":32}},"263":{"start":{"line":808,"column":6},"end":{"line":810,"column":50}},"264":{"start":{"line":813,"column":6},"end":{"line":813,"column":61}},"265":{"start":{"line":814,"column":6},"end":{"line":814,"column":60}},"266":{"start":{"line":816,"column":6},"end":{"line":846,"column":7}},"267":{"start":{"line":819,"column":8},"end":{"line":844,"column":11}},"268":{"start":{"line":820,"column":10},"end":{"line":824,"column":11}},"269":{"start":{"line":821,"column":12},"end":{"line":822,"column":60}},"270":{"start":{"line":823,"column":12},"end":{"line":823,"column":55}},"271":{"start":{"line":825,"column":10},"end":{"line":825,"column":33}},"272":{"start":{"line":828,"column":10},"end":{"line":828,"column":60}},"273":{"start":{"line":829,"column":10},"end":{"line":833,"column":11}},"274":{"start":{"line":830,"column":12},"end":{"line":830,"column":34}},"275":{"start":{"line":831,"column":12},"end":{"line":831,"column":135}},"276":{"start":{"line":832,"column":12},"end":{"line":832,"column":46}},"277":{"start":{"line":836,"column":10},"end":{"line":836,"column":44}},"278":{"start":{"line":837,"column":10},"end":{"line":837,"column":34}},"279":{"start":{"line":838,"column":10},"end":{"line":838,"column":45}},"280":{"start":{"line":839,"column":10},"end":{"line":839,"column":61}},"281":{"start":{"line":840,"column":10},"end":{"line":840,"column":60}},"282":{"start":{"line":841,"column":10},"end":{"line":841,"column":98}},"283":{"start":{"line":841,"column":73},"end":{"line":841,"column":95}},"284":{"start":{"line":842,"column":10},"end":{"line":842,"column":77}},"285":{"start":{"line":843,"column":10},"end":{"line":843,"column":44}},"286":{"start":{"line":845,"column":8},"end":{"line":845,"column":15}},"287":{"start":{"line":849,"column":6},"end":{"line":849,"column":28}},"288":{"start":{"line":850,"column":6},"end":{"line":850,"column":109}},"289":{"start":{"line":851,"column":6},"end":{"line":851,"column":40}},"290":{"start":{"line":864,"column":6},"end":{"line":864,"column":65}},"291":{"start":{"line":865,"column":6},"end":{"line":865,"column":57}},"292":{"start":{"line":865,"column":19},"end":{"line":865,"column":56}},"293":{"start":{"line":866,"column":6},"end":{"line":876,"column":7}},"294":{"start":{"line":868,"column":8},"end":{"line":868,"column":24}},"295":{"start":{"line":869,"column":8},"end":{"line":869,"column":32}},"296":{"start":{"line":870,"column":8},"end":{"line":870,"column":52}},"297":{"start":{"line":871,"column":8},"end":{"line":871,"column":62}},"298":{"start":{"line":872,"column":8},"end":{"line":872,"column":58}},"299":{"start":{"line":873,"column":8},"end":{"line":875,"column":11}},"300":{"start":{"line":874,"column":10},"end":{"line":874,"column":33}},"301":{"start":{"line":877,"column":6},"end":{"line":877,"column":21}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":52}}]},"2":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":17},"end":{"line":14,"column":24}},{"start":{"line":14,"column":28},"end":{"line":14,"column":48}}]},"3":{"line":17,"type":"cond-expr","locations":[{"start":{"line":17,"column":36},"end":{"line":17,"column":60}},{"start":{"line":17,"column":63},"end":{"line":17,"column":67}}]},"4":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":6},"end":{"line":130,"column":6}},{"start":{"line":130,"column":6},"end":{"line":130,"column":6}}]},"5":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":8},"end":{"line":131,"column":8}},{"start":{"line":131,"column":8},"end":{"line":131,"column":8}}]},"6":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":19},"end":{"line":132,"column":27}},{"start":{"line":132,"column":31},"end":{"line":132,"column":57}}]},"7":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":8},"end":{"line":133,"column":8}},{"start":{"line":133,"column":8},"end":{"line":133,"column":8}}]},"8":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":6},"end":{"line":172,"column":6}},{"start":{"line":172,"column":6},"end":{"line":172,"column":6}}]},"9":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":6},"end":{"line":180,"column":6}},{"start":{"line":180,"column":6},"end":{"line":180,"column":6}}]},"10":{"line":240,"type":"binary-expr","locations":[{"start":{"line":240,"column":17},"end":{"line":240,"column":25}},{"start":{"line":240,"column":29},"end":{"line":240,"column":41}}]},"11":{"line":250,"type":"if","locations":[{"start":{"line":250,"column":6},"end":{"line":250,"column":6}},{"start":{"line":250,"column":6},"end":{"line":250,"column":6}}]},"12":{"line":250,"type":"binary-expr","locations":[{"start":{"line":250,"column":10},"end":{"line":250,"column":21}},{"start":{"line":250,"column":25},"end":{"line":250,"column":35}}]},"13":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8}},{"start":{"line":258,"column":8},"end":{"line":258,"column":8}}]},"14":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":10},"end":{"line":262,"column":10}},{"start":{"line":262,"column":10},"end":{"line":262,"column":10}}]},"15":{"line":278,"type":"if","locations":[{"start":{"line":278,"column":12},"end":{"line":278,"column":12}},{"start":{"line":278,"column":12},"end":{"line":278,"column":12}}]},"16":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":8},"end":{"line":292,"column":8}},{"start":{"line":292,"column":8},"end":{"line":292,"column":8}}]},"17":{"line":316,"type":"binary-expr","locations":[{"start":{"line":316,"column":17},"end":{"line":316,"column":25}},{"start":{"line":316,"column":29},"end":{"line":316,"column":41}}]},"18":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":6},"end":{"line":320,"column":6}},{"start":{"line":320,"column":6},"end":{"line":320,"column":6}}]},"19":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":8},"end":{"line":324,"column":8}},{"start":{"line":324,"column":8},"end":{"line":324,"column":8}}]},"20":{"line":334,"type":"if","locations":[{"start":{"line":334,"column":6},"end":{"line":334,"column":6}},{"start":{"line":334,"column":6},"end":{"line":334,"column":6}}]},"21":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":6},"end":{"line":358,"column":6}},{"start":{"line":358,"column":6},"end":{"line":358,"column":6}}]},"22":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":6},"end":{"line":362,"column":6}},{"start":{"line":362,"column":6},"end":{"line":362,"column":6}}]},"23":{"line":403,"type":"binary-expr","locations":[{"start":{"line":403,"column":24},"end":{"line":403,"column":46}},{"start":{"line":403,"column":51},"end":{"line":403,"column":60}}]},"24":{"line":404,"type":"cond-expr","locations":[{"start":{"line":404,"column":61},"end":{"line":404,"column":90}},{"start":{"line":404,"column":93},"end":{"line":404,"column":96}}]},"25":{"line":412,"type":"if","locations":[{"start":{"line":412,"column":8},"end":{"line":412,"column":8}},{"start":{"line":412,"column":8},"end":{"line":412,"column":8}}]},"26":{"line":434,"type":"if","locations":[{"start":{"line":434,"column":8},"end":{"line":434,"column":8}},{"start":{"line":434,"column":8},"end":{"line":434,"column":8}}]},"27":{"line":434,"type":"binary-expr","locations":[{"start":{"line":434,"column":12},"end":{"line":434,"column":22}},{"start":{"line":434,"column":26},"end":{"line":434,"column":47}}]},"28":{"line":441,"type":"if","locations":[{"start":{"line":441,"column":8},"end":{"line":441,"column":8}},{"start":{"line":441,"column":8},"end":{"line":441,"column":8}}]},"29":{"line":441,"type":"binary-expr","locations":[{"start":{"line":441,"column":12},"end":{"line":441,"column":22}},{"start":{"line":441,"column":26},"end":{"line":441,"column":47}}]},"30":{"line":452,"type":"cond-expr","locations":[{"start":{"line":452,"column":28},"end":{"line":452,"column":50}},{"start":{"line":452,"column":53},"end":{"line":452,"column":57}}]},"31":{"line":453,"type":"binary-expr","locations":[{"start":{"line":453,"column":22},"end":{"line":453,"column":31}},{"start":{"line":453,"column":35},"end":{"line":453,"column":60}}]},"32":{"line":454,"type":"binary-expr","locations":[{"start":{"line":454,"column":21},"end":{"line":454,"column":29}},{"start":{"line":454,"column":33},"end":{"line":454,"column":56}}]},"33":{"line":455,"type":"binary-expr","locations":[{"start":{"line":455,"column":26},"end":{"line":455,"column":38}},{"start":{"line":455,"column":42},"end":{"line":455,"column":73}}]},"34":{"line":456,"type":"if","locations":[{"start":{"line":456,"column":6},"end":{"line":456,"column":6}},{"start":{"line":456,"column":6},"end":{"line":456,"column":6}}]},"35":{"line":456,"type":"binary-expr","locations":[{"start":{"line":456,"column":10},"end":{"line":456,"column":18}},{"start":{"line":456,"column":22},"end":{"line":456,"column":29}},{"start":{"line":456,"column":33},"end":{"line":456,"column":45}}]},"36":{"line":459,"type":"if","locations":[{"start":{"line":459,"column":8},"end":{"line":459,"column":8}},{"start":{"line":459,"column":8},"end":{"line":459,"column":8}}]},"37":{"line":459,"type":"binary-expr","locations":[{"start":{"line":459,"column":12},"end":{"line":459,"column":43}},{"start":{"line":459,"column":47},"end":{"line":459,"column":80}}]},"38":{"line":465,"type":"if","locations":[{"start":{"line":465,"column":8},"end":{"line":465,"column":8}},{"start":{"line":465,"column":8},"end":{"line":465,"column":8}}]},"39":{"line":465,"type":"binary-expr","locations":[{"start":{"line":465,"column":12},"end":{"line":465,"column":21}},{"start":{"line":465,"column":25},"end":{"line":465,"column":36}},{"start":{"line":465,"column":40},"end":{"line":465,"column":57}}]},"40":{"line":469,"type":"if","locations":[{"start":{"line":469,"column":10},"end":{"line":469,"column":10}},{"start":{"line":469,"column":10},"end":{"line":469,"column":10}}]},"41":{"line":479,"type":"if","locations":[{"start":{"line":479,"column":8},"end":{"line":479,"column":8}},{"start":{"line":479,"column":8},"end":{"line":479,"column":8}}]},"42":{"line":490,"type":"if","locations":[{"start":{"line":490,"column":6},"end":{"line":490,"column":6}},{"start":{"line":490,"column":6},"end":{"line":490,"column":6}}]},"43":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":6},"end":{"line":495,"column":6}},{"start":{"line":495,"column":6},"end":{"line":495,"column":6}}]},"44":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":6},"end":{"line":501,"column":6}},{"start":{"line":501,"column":6},"end":{"line":501,"column":6}}]},"45":{"line":501,"type":"binary-expr","locations":[{"start":{"line":501,"column":10},"end":{"line":501,"column":18}},{"start":{"line":501,"column":22},"end":{"line":501,"column":40}}]},"46":{"line":503,"type":"if","locations":[{"start":{"line":503,"column":10},"end":{"line":503,"column":10}},{"start":{"line":503,"column":10},"end":{"line":503,"column":10}}]},"47":{"line":510,"type":"if","locations":[{"start":{"line":510,"column":10},"end":{"line":510,"column":10}},{"start":{"line":510,"column":10},"end":{"line":510,"column":10}}]},"48":{"line":524,"type":"if","locations":[{"start":{"line":524,"column":6},"end":{"line":524,"column":6}},{"start":{"line":524,"column":6},"end":{"line":524,"column":6}}]},"49":{"line":557,"type":"binary-expr","locations":[{"start":{"line":557,"column":26},"end":{"line":557,"column":35}},{"start":{"line":557,"column":39},"end":{"line":557,"column":64}}]},"50":{"line":558,"type":"binary-expr","locations":[{"start":{"line":558,"column":25},"end":{"line":558,"column":33}},{"start":{"line":558,"column":37},"end":{"line":558,"column":74}}]},"51":{"line":559,"type":"binary-expr","locations":[{"start":{"line":559,"column":30},"end":{"line":559,"column":42}},{"start":{"line":559,"column":46},"end":{"line":559,"column":91}}]},"52":{"line":563,"type":"binary-expr","locations":[{"start":{"line":563,"column":16},"end":{"line":563,"column":31}},{"start":{"line":563,"column":35},"end":{"line":563,"column":46}},{"start":{"line":563,"column":50},"end":{"line":563,"column":60}},{"start":{"line":563,"column":64},"end":{"line":563,"column":79}}]},"53":{"line":586,"type":"binary-expr","locations":[{"start":{"line":586,"column":26},"end":{"line":586,"column":35}},{"start":{"line":586,"column":39},"end":{"line":586,"column":64}}]},"54":{"line":587,"type":"binary-expr","locations":[{"start":{"line":587,"column":25},"end":{"line":587,"column":33}},{"start":{"line":587,"column":37},"end":{"line":587,"column":74}}]},"55":{"line":591,"type":"binary-expr","locations":[{"start":{"line":591,"column":16},"end":{"line":591,"column":31}},{"start":{"line":591,"column":35},"end":{"line":591,"column":46}},{"start":{"line":591,"column":50},"end":{"line":591,"column":60}}]},"56":{"line":618,"type":"if","locations":[{"start":{"line":618,"column":6},"end":{"line":618,"column":6}},{"start":{"line":618,"column":6},"end":{"line":618,"column":6}}]},"57":{"line":623,"type":"if","locations":[{"start":{"line":623,"column":6},"end":{"line":623,"column":6}},{"start":{"line":623,"column":6},"end":{"line":623,"column":6}}]},"58":{"line":639,"type":"if","locations":[{"start":{"line":639,"column":8},"end":{"line":639,"column":8}},{"start":{"line":639,"column":8},"end":{"line":639,"column":8}}]},"59":{"line":639,"type":"binary-expr","locations":[{"start":{"line":639,"column":12},"end":{"line":639,"column":29}},{"start":{"line":639,"column":33},"end":{"line":639,"column":50}},{"start":{"line":639,"column":54},"end":{"line":639,"column":69}}]},"60":{"line":646,"type":"if","locations":[{"start":{"line":646,"column":6},"end":{"line":646,"column":6}},{"start":{"line":646,"column":6},"end":{"line":646,"column":6}}]},"61":{"line":654,"type":"if","locations":[{"start":{"line":654,"column":8},"end":{"line":654,"column":8}},{"start":{"line":654,"column":8},"end":{"line":654,"column":8}}]},"62":{"line":659,"type":"if","locations":[{"start":{"line":659,"column":8},"end":{"line":659,"column":8}},{"start":{"line":659,"column":8},"end":{"line":659,"column":8}}]},"63":{"line":697,"type":"if","locations":[{"start":{"line":697,"column":10},"end":{"line":697,"column":10}},{"start":{"line":697,"column":10},"end":{"line":697,"column":10}}]},"64":{"line":698,"type":"if","locations":[{"start":{"line":698,"column":12},"end":{"line":698,"column":12}},{"start":{"line":698,"column":12},"end":{"line":698,"column":12}}]},"65":{"line":719,"type":"if","locations":[{"start":{"line":719,"column":6},"end":{"line":719,"column":6}},{"start":{"line":719,"column":6},"end":{"line":719,"column":6}}]},"66":{"line":723,"type":"if","locations":[{"start":{"line":723,"column":8},"end":{"line":723,"column":8}},{"start":{"line":723,"column":8},"end":{"line":723,"column":8}}]},"67":{"line":734,"type":"if","locations":[{"start":{"line":734,"column":10},"end":{"line":734,"column":10}},{"start":{"line":734,"column":10},"end":{"line":734,"column":10}}]},"68":{"line":742,"type":"binary-expr","locations":[{"start":{"line":742,"column":32},"end":{"line":742,"column":71}},{"start":{"line":742,"column":75},"end":{"line":742,"column":77}}]},"69":{"line":755,"type":"if","locations":[{"start":{"line":755,"column":8},"end":{"line":755,"column":8}},{"start":{"line":755,"column":8},"end":{"line":755,"column":8}}]},"70":{"line":774,"type":"if","locations":[{"start":{"line":774,"column":6},"end":{"line":774,"column":6}},{"start":{"line":774,"column":6},"end":{"line":774,"column":6}}]},"71":{"line":775,"type":"if","locations":[{"start":{"line":775,"column":6},"end":{"line":775,"column":6}},{"start":{"line":775,"column":6},"end":{"line":775,"column":6}}]},"72":{"line":779,"type":"if","locations":[{"start":{"line":779,"column":10},"end":{"line":779,"column":10}},{"start":{"line":779,"column":10},"end":{"line":779,"column":10}}]},"73":{"line":816,"type":"if","locations":[{"start":{"line":816,"column":6},"end":{"line":816,"column":6}},{"start":{"line":816,"column":6},"end":{"line":816,"column":6}}]},"74":{"line":820,"type":"if","locations":[{"start":{"line":820,"column":10},"end":{"line":820,"column":10}},{"start":{"line":820,"column":10},"end":{"line":820,"column":10}}]},"75":{"line":829,"type":"if","locations":[{"start":{"line":829,"column":10},"end":{"line":829,"column":10}},{"start":{"line":829,"column":10},"end":{"line":829,"column":10}}]},"76":{"line":865,"type":"if","locations":[{"start":{"line":865,"column":6},"end":{"line":865,"column":6}},{"start":{"line":865,"column":6},"end":{"line":865,"column":6}}]},"77":{"line":866,"type":"if","locations":[{"start":{"line":866,"column":6},"end":{"line":866,"column":6}},{"start":{"line":866,"column":6},"end":{"line":866,"column":6}}]}},"code":["// Router.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading","  var Monitor = root.Monitor || require('./Monitor'),","      log = Monitor.getLogger('Router'),","      stat = Monitor.getStatLogger('Router'),","      Cron = Monitor.Cron, _ = Monitor._, Backbone = Monitor.Backbone,","      Config = Monitor.Config, Probe = Monitor.Probe,","      Connection = Monitor.Connection, Server = Monitor.Server,","      SocketIO = root.io || require('socket.io'),","","      // Set if server-side","      hostName = Monitor.commonJS ? require('os').hostname() : null;","","  // Constants","  var PROBE_TIMEOUT_MS = 10000;","","  /**","  * Probe location and message routing","  *","  * The router is a class used internally to locate probes and connect","  * events so messages are correctly routed between probes and their monitors.","  *","  * It is a *singleton* class, designed to run one instance within","  * a monitor process, and accessed via the (protected) `getRouter()`","  * method of the <a href=\"Monitor.html\">Monitor</a> object.","  *","  * It manages all outbound requests to probes, either internally or externally","  * via the <a href=\"Connection.html\">Connection</a> to the remote process.","  *","  * @class Router","  * @extends Backbone.Model","  * @constructor","  */","  /**","  * A new connection has been established","  *","  * @event","  * connection:add","  * @param connection {Connection} The added connection","  */","  /**","  * A connection has been terminated","  *","  * @event","  * connection:remove","  * @param connection {Connection} The removed connection","  */","  var Router = Monitor.Router = Backbone.Model.extend({","","    initialize: function() {","      var t = this;","      t.defaultGateway = null;","      t.firewall = false;","      t.connections = new Connection.List();","      t.runningProbesByKey = {}; // key=probeKey, data=probeImpl","      t.runningProbesById = {};  // key=probeId, data=probeImpl","      t.addHostCallbacks = {};  // key=hostName, data=[callbacks]","      log.info('init', 'Router initialized');","    },","","    /**","    * Firewall new connections from inbound probe requests","    *","    * When two monitor processes connect, they become peers.  By default each","    * process can request probe connections with the other.","    *","    * If you want to connect with a remote probe, but don't want those servers","    * to connect with probes in this process, call this method to firewall","    * those inbound probe requests.","    *","    * Setting this will change the firewall value for all *new* connections.","    * Any existing connections will still accept incoming probe requests.","    *","    * @static","    * @method setFirewall","    * @param firewall {Boolean} - Firewall new connections?","    */","    setFirewall: function(firewall) {","      var t = Monitor.getRouter(); // This is a static method","      t.firewall = firewall;","      log.info('setFirewall', firewall);","    },","","    /**","    * Set the default gateway server","    *","    * The gateway server is used if a monitor cannot connect directly with the","    * server hosting the probe.","    *","    * When a monitor is requested to connect with a probe on a specific server,","    * a direct connection is attempted.  If that direct connection fails, usually","    * due to a firewall or browser restriction, the monitor will attempt the","    * connection to the probe through the gateway server.","    *","    * The server specified in this method must have been started as a gateway","    * like this:","    *","    *     // Start a monitor server and act as a gateway","    *     var server = new Monitor.Server({gateway:true});","    *","    * @method setGateway","    * @param options {Object} - Connection parameters","    *   @param options.hostName {String} - Name of the gateway host","    *   @param options.hostPort {Integer} - Port number to connect with","    *   @param options.url {String} - The URL used to connect (created, or used if supplied)","    *   @param options.socket {io.socket} - Pre-connected socket.io socket to the gateway server.","    * @return connection {Connection} - The connection with the gateway server","    */","    setGateway: function(options) {","      var t = this;","      options.gateway = false;     // New connection can't be an inbound gateway","      options.firewall = true;     // Gateways are for outbound requests only","      return t.defaultGateway = t.addConnection(options);","    },","","    /**","    * Return a stable host name.","    *","    * @method getHostName","    * @protected","    * @return hostName {String} - The platform's host name, or an otherwise stable ID","    */","    getHostName: function() {","      var localStorage = root.localStorage;","      if (!hostName) {","        if (localStorage) {hostName = localStorage.hostName;}","        hostName = hostName || Monitor.generateUniqueId();","        if (localStorage) {localStorage.hostName = hostName;}","      }","      return hostName;","    },","","    /**","    * Set the current host name.","    *","    * This sets the host name that this router publishes to new connections.","    * It's only useful if the os hostname isn't the name you want to publish.","    *","    * @protected","    * @method setHostName","    * @param hostName {String} - The host name to publish to new connections","    */","    setHostName: function(name) {","      hostName = name;","      log.info('setHostName', name);","    },","","    /**","    * Add a connection to a remote Monitor process","    *","    * @method addConnection","    * @protected","    * @param options {Object} - Connection parameters","    *   @param options.hostName {String} - Name of the host to connect with","    *   @param options.hostPort {Integer} - Port number to connect with","    *   @param options.url {String} - The URL used to connect (created, or used if supplied)","    *   @param options.socket {io.socket} - Pre-connected socket.io socket to a Monitor server.","    *   @param options.gateway {Boolean} - Allow this connection to use me as a gateway (default false)","    *   @param options.firewall {Boolean} Firewall inbound probe requests on this connection?","    * @return connection {Connection} - The added connection","    */","    addConnection: function(options) {","      var t = this,","          startTime = Date.now();","","      // Default the firewall value","      if (_.isUndefined(options.firewall)) {","        options = _.extend({},options, {firewall: t.firewall});","      }","","      // Generate a unique ID for the connection","      options.id = Monitor.generateUniqueCollectionId(t.connections);","","      var connStr = 'Conn_' + options.id;","      if (options.hostName) {","        connStr += ' - ' + options.hostName + ':' + options.hostPort;","      }","      log.info('addConnection', connStr);","","      // Instantiate and add the connection for use, once connected","      var connection = new Connection(options);","","      // Add a connect and disconnect function","      var onConnect = function(){","        t.trigger('connection:add', connection);","        log.info('connected', connStr, (Date.now() - startTime) + 'ms');","      };","      var onDisconnect = function(){","        t.removeConnection(connection);","        connection.off('connect', onConnect);","        connection.off('disconnect', onConnect);","        log.info('disconnected', connStr, (Date.now() - startTime) + 'ms');","      };","      connection.on('connect', onConnect);","      connection.on('disconnect', onDisconnect);","","      // Add to the connections","      t.connections.add(connection);","      return connection;","    },","","    /**","    * Remove a connection from the router.","    *","    * This is called to remove the connection and associated routes from the router.","    *","    * @method removeConnection","    * @protected","    * @param connection {Connection} - The connection to remove","    */","    removeConnection: function(connection) {","      var t = this;","      log.info('removeConnection', 'Conn_' + connection.id);","      connection.disconnect('connection_removed');","      t.connections.remove(connection);","      t.trigger('connection:remove', connection);","    },","","    /**","    * Connect a Monitor object to a remote Probe","    *","    * This accepts an instance of a Monitor and figures out how to connect it","    * to a running Probe.","    *","    * Upon callback the probe data is set into the monitor (unless an error","    * occurred)","    *","    * @method connectMonitor","    * @protected","    * @param monitor {Monitor} - The monitor requesting to connect with the probe","    * @param callback {Function(error)} - (optional) Called when connected","    */","    connectMonitor: function(monitor, callback) {","","      callback = callback || function(){};","      var t = this,","          monitorJSON = monitor.toMonitorJSON(),","          probeJSON = null,","          probeName = monitorJSON.probeName,","          probeClass = monitorJSON.probeClass,","          startTime = Date.now(),","          monitorStr = probeClass + '.' + monitor.toServerString().replace(/:/g, '.');","","      // Class name must be set","      if (!probeClass && !probeName) {","        var errStr = 'probeName or probeClass must be set';","        log.error('connectMonitor', errStr);","        return callback(errStr);","      }","","      // Determine the connection (or internal), and listen for change events","      t.determineConnection(monitorJSON, true, function(err, connection) {","        if (err) {return callback(err);}","","        // Function to run on connection (internal or external)","        var onConnect = function(error, probe) {","          if (error) {return callback(error);}","          probeJSON = probe.toJSON();","          probeJSON.probeId = probeJSON.id; delete probeJSON.id;","          monitor.probe = probe;","","          // Keep the last known probe state for effective updating","          monitor._probeValues = _.clone(probeJSON);","","          // Perform the initial set silently.  This assures the initial","          // probe contents are available on the connect event,","          // but doesn't fire a change event before connect.","          monitor.set(probeJSON, {silent:true});","","          // Watch the probe for changes.","          monitor.probeChange = function(){","            var changed = probe.changedAttributes();","            if (changed) {","              monitor._probeValues = _.clone(probe.toJSON());","              monitor.set(probe.changedAttributes());","              log.info('probeChange', {probeId: probeJSON.probeId, changed: probe.changedAttributes()});","            }","          };","          probe.on('change', monitor.probeChange);","","          // Call the callback.  This calls the original caller, issues","          // the connect event, then fires the initial change event.","          callback(null);","        };","","        // Connect internally or externally","        if (connection) {","          t.connectExternal(monitorJSON, connection, onConnect);","        } else {","          t.connectInternal(monitorJSON, onConnect);","        }","      });","    },","","    /**","    * Disconnect a monitor","    *","    * This accepts an instance of a connected monitor, and disconnects it from","    * the remote probe.","    *","    * The probe implementation will be released if this is the only monitor","    * object watching it.","    *","    * @method disconnectMonitor","    * @protected","    * @param monitor {Monitor} - The connected monitor","    * @param reason {String} - Reason for the disconnect","    * @param callback {Function(error)} - (optional) Called when connected","    */","    disconnectMonitor: function(monitor, reason, callback) {","      callback = callback || function(){};","      var t = this, probe = monitor.probe, probeId = monitor.get('probeId');","","      // The monitor must be connected","      if (!probe) {return callback('Monitor must be connected');}","","      // Called upon disconnect (internal or external)","      var onDisconnect = function(error) {","        if (error) {","          return callback(error);","        }","        probe.off('change', monitor.probeChange);","        monitor.set({probeId:null});","        monitor.probe = monitor.probeChange = null;","        return callback(null, reason);","      };","","      // Disconnect from an internal or external probe","      if (probe.connection) {","        t.disconnectExternal(probe.connection, probeId, onDisconnect);","      } else {","        t.disconnectInternal(probeId, onDisconnect);","      }","    },","","    /**","    * Build a probe key from the probe data","    *","    * @method buildProbeKey","    * @protected","    * @param probeJSON {Object} - An object containing:","    *     @param probeJSON.probeName {String} - The client-defined probe name","    *     -or-","    *     @param probeJSON.probeClass {String} - The probe class name (required)","    *     @param probeJSON.initParams {Object} - Probe initialization parameters (if any)","    * @return probeKey {String} - A string identifying the probe","    */","    buildProbeKey: function(probeJSON) {","      var probeKey = probeJSON.probeClass,","          initParams = probeJSON.initParams;","","      // Allow probes to be externally identified by name","      if (probeJSON.probeName) {","        return probeJSON.probeName;","      }","","      if (initParams) {","        _.keys(initParams).sort().forEach(function(key){","          probeKey += ':' + key + '=' + initParams[key];","        });","      }","      return probeKey;","    },","","    /**","    * Determine the connection to use for a probe","    *","    * This uses the connection parameters of the specified monitor to determine","    * (or create) the connection to use for the probe.","    *","    * If the probe can be instantiated internally, a null is returned as the","    * connection.","    *","    * This attempts to use an existing connection if available.  If not, a","    * connection attempt will be made with the host. If the host cannot be","    * reached directly, it returns a connection with the gateway.","    *","    * @method determineConnection","    * @protected","    * @param monitorJSON {Object} - The connection attributes of the monitor","    * @param makeNewConnections {Boolean} - Establish a new connection if one doesn't exist?","    * @param callback {Function(error, connection)} - Called when the connection is known","    * <ul>","    *   <li>error - Set if any errors</li>","    *   <li>connection - The connection object, or null to run in this process</li>","    * <ul>","    */","    determineConnection: function(monitorJSON, makeNewConnections, callback) {","      var t = this,","          connection = null,","          probeName = monitorJSON.probeName,","          probeClass = monitorJSON.probeClass,","          errStr = '',","          hostName = monitorJSON.hostName,","          appName = monitorJSON.appName,","          appInstance = monitorJSON.appInstance,","          thisHostName = t.getHostName().toLowerCase(),","          thisAppName = Config.Monitor.appName  || 'unknown',","          thisAppInstance = typeof process !== 'undefined' ? process.env.NODE_APP_INSTANCE : '1';","","      // Return a found connection immediately if it's connected.","      // If connecting, wait for connection to complete.","      // If not connected (and not connecting) re-try the connection.","      var connectedCheck = function(isGateway) {","","        // Remove the host/app/instance params if connecting directly.","        if (!isGateway) {","          delete monitorJSON.hostName;","          delete monitorJSON.appName;","          delete monitorJSON.appInstance;","        }","","        // Define the connect/error listeners","        var onConnect = function() {","          removeListeners();","          callback(null, connection);","        };","        var onError = function(err) {","          removeListeners();","          log.error('connect.error', err);","          callback({msg: 'connection error', err:err});","        };","        var removeListeners = function() {","          connection.off('connect', onConnect);","          connection.off('error', onError);","        };","","        // Wait if the connection is still awaiting connect","        if (connection && connection.connecting) {","          connection.on('connect', onConnect);","          connection.on('error', onError);","          return;","        }","","        // Re-try if disconnected","        if (connection && !connection.connected) {","          connection.on('connect', onConnect);","          connection.on('error', onError);","          return connection.connect();","        }","","        // Verified connection","        return callback(null, connection);","      };","","      // Connect with this process (internally)?","      hostName = hostName ? hostName.toLowerCase() : null;","      var thisHost = (!hostName || hostName === thisHostName);","      var thisApp = (!appName || appName === thisAppName);","      var thisInstance = (!appInstance || appInstance === thisAppInstance);","      if (thisHost && thisApp && thisInstance) {","","        // Connect internally if the probe is available","        if (t.runningProbesByKey[probeName] || Probe.classes[probeClass] != null) {","          return callback(null, null);","        }","","        // Give named auto-start probes time to start up","        var autoStarts = Monitor.Config.Monitor.autoStart;","        if (probeName && !probeClass && autoStarts.length) {","          var autoStart = Monitor._.find(autoStarts, function(probeDef) {","            return probeDef.probeName === probeName;","          });","          if (autoStart) {","            setTimeout(function() {","              t.determineConnection(monitorJSON, makeNewConnections, callback);","            },10);","            return;","          }","        }","","        // No probe with that name in this process.","        // Fallback to the default gateway.","        if (!t.defaultGateway) {","          errStr = 'Probe class \"' + probeClass + '\" not available in this process';","          log.error('connect.internal', errStr);","          return callback({err:errStr});","        }","        connection = t.defaultGateway;","        return connectedCheck(true);","      }","","      // Return if connection is known","      connection = t.findConnection(hostName, appName, appInstance);","      if (connection) {","        return connectedCheck();","      }","","      // Prefer the gateway if it exists","      if (t.defaultGateway) {","        connection = t.defaultGateway;","        return connectedCheck(true);","      }","","      // See if we can establish new connections with the host","      if (hostName && makeNewConnections) {","        t.addHostConnections(hostName, function(err) {","          if (err) {","            log.error('connect.toHost', err);","            return callback(err);","          }","","          // Try finding now that new connections have been made","          connection = t.findConnection(hostName, appName, appInstance);","          if (!connection) {","            errStr = 'No route to host: ' + Monitor.toServerString(monitorJSON);","            log.error('connect.toHost', errStr);","            return callback({err:errStr});","          }","","          return connectedCheck();","        });","","        // Wait for addHostConnections to complete","        return;","      }","","      // We tried...","      if (!hostName) {","        // App name was specified, it wasn't this process, and no hostname","        errStr = 'No host specified for app: ' + appName;","        log.error('connect', errStr);","        return callback({msg:errStr},null);","      } else {","        // Not allowed to try remote hosts","        errStr = 'Not a gateway to remote monitors';","        log.error('connect', errStr);","        return callback({msg:errStr});","      }","    },","","    /**","    * Find an existing connection to use","    *","    * This method looks into the existing known connections to find one","    * that matches the specified parameters.","    *","    * Firewalled connections are not returned.","    *","    * @method findConnection","    * @protected","    * @param hostName {String} - Host name to find a connection for (null = any host)","    * @param appName {String} - App name to find a connection with (null = any app)","    * @param appInstance {Any} - Application instance running on this host (null = any instance)","    * @return connection {Connection} - A Connection object if found, otherwise null","    */","    findConnection: function(hostName, appName, appInstance) {","      var t = this, thisInstance = 0;","      return t.connections.find(function(conn) {","","        // Host or app matches if not specified or if specified and equal","        var matchesHost = !hostName || conn.isThisHost(hostName);","        var matchesApp = !appName || appName === conn.get('remoteAppName');","        var matchesInstance = !appInstance || appInstance === conn.get('remoteAppInstance');","        var remoteFirewall = conn.get('remoteFirewall');","","        // This is a match if host + app + instance matches, and it's not firewalled","        return (!remoteFirewall && matchesHost && matchesApp && matchesInstance);","      });","    },","","    /**","    * Find all connections matching the selection criteria","    *","    * This method looks into the existing known connections to find all","    * that match the specified parameters.","    *","    * Firewalled connections are not returned.","    *","    * @method findConnections","    * @protected","    * @param hostName {String} - Host name to search for (null = any host)","    * @param appName {String} - App name to search for (null = any app)","    * @return connections {Array of Connection} - An array of Connection objects matching the criteria","    */","    findConnections: function(hostName, appName) {","      var t = this;","      return t.connections.filter(function(conn) {","","        // Host or app matches if not specified or if specified and equal","        var matchesHost = !hostName || conn.isThisHost(hostName);","        var matchesApp = !appName || appName === conn.get('remoteAppName');","        var remoteFirewall = conn.get('remoteFirewall');","","        // This is a match if host + app matches, and it's not firewalled","        return (!remoteFirewall && matchesHost && matchesApp);","      });","    },","","    /**","    * Add connections for the specified host","    *","    * This performs a scan of monitor ports on the server, and adds connections","    * for newly discovered servers.","    *","    * It can take a while to complete, and if called for the same host before","    * completion, it will save the callback and call all callbacks when the","    * original task is complete.","    *","    * @method addHostConnections","    * @protected","    * @param hostName {String} - The host to add connections with","    * @param callback {Function(error)} - Called when complete","    */","    addHostConnections: function(hostName, callback) {","      var t = this,","          errStr = '',","          connectedPorts = [],","          portStart = Config.Monitor.serviceBasePort,","          portEnd = Config.Monitor.serviceBasePort + Config.Monitor.portsToScan - 1;","","      // Create an array to hold callbacks for this host","      if (!t.addHostCallbacks[hostName]) {","        t.addHostCallbacks[hostName] = [];","      }","","      // Remember this callback and return if we're already adding connections for this host","      if (t.addHostCallbacks[hostName].push(callback) > 1) {","        return;","      }","","      // Called when done","      var doneAdding = function(error) {","        t.addHostCallbacks[hostName].forEach(function(cb) {","          cb(error);","        });","        delete t.addHostCallbacks[hostName];","      };","","      // Build the list of ports already connected","      t.connections.each(function(connection){","        var host = connection.get('hostName').toLowerCase();","        var port = connection.get('hostPort');","        if (host === hostName && port >= portStart && port <= portEnd) {","          connectedPorts.push(port);","        }","      });","","      // Scan non-connected ports","      var portsToScan = Config.Monitor.portsToScan - connectedPorts.length;","      if (portsToScan === 0) {","        errStr = 'All monitor ports in use.  Increase the Config.Monitor.portsToScan configuration';","        log.error('addHostConnections', errStr);","        return doneAdding(errStr);","      }","      var doneScanning = function() {","        var conn = this; // called in the context of the connection","        conn.off('connect disconnect error', doneScanning);","        if (--portsToScan === 0) {","          return doneAdding();","        }","      };","      for (var i = portStart; i <= portEnd; i++) {","        if (connectedPorts.indexOf(i) < 0) {","          var connection = t.addConnection({hostName:hostName, hostPort:i});","          connection.on('connect disconnect error', doneScanning, connection);","        }","      }","    },","","    /**","    * Connect to an internal probe implementation","    *","    * This connects with a probe running in this process.  It will instantiate","    * the probe if it isn't currently running.","    *","    * @method connectInternal","    * @protected","    * @param monitorJSON {Object} - The monitor toJSON data.  Containing:","    *     @param monitorJSON.probeClass {String} - The probe class name to connect with (required)","    *     @param monitorJSON.initParams {Object} - Probe initialization parameters.","    * @param callback {Function(error, probeImpl)} - Called when connected","    */","    connectInternal: function(monitorJSON, callback) {","","      // Build a key for this probe from the probeClass and initParams","      var t = this,","          probeKey = t.buildProbeKey(monitorJSON),","          probeName = monitorJSON.probeName,","          probeClass = monitorJSON.probeClass,","          initParams = monitorJSON.initParams,","          probeImpl = null;","","      var whenDone = function(error) {","","        // Wait one tick before firing the callback.  This simulates a remote","        // connection, making the client callback order consistent, regardless","        // of a local or remote connection.","        setTimeout(function() {","","          // Dont connect the probe on error","          if (error) {","            if (probeImpl) {","              delete t.runningProbesByKey[probeKey];","              delete t.runningProbesById[probeImpl.id];","              try {","                // This may fail depending on how many resources were created","                // by the probe before failure.  Ignore errors.","                probeImpl.release();","              } catch (e){}","            }","            return callback(error);","          }","","          // Probes are released based on reference count","          probeImpl.refCount++;","          log.info('connectInternal', {probeKey: probeKey, probeId: probeImpl.id});","          callback(null, probeImpl);","        }, 0);","      };","","      // Get the probe instance","      probeImpl = t.runningProbesByKey[probeKey];","      if (!probeImpl) {","","        // Instantiate the probe","        var ProbeClass = Probe.classes[probeClass];","        if (!ProbeClass) {","          return whenDone({msg:'Probe not available: ' + probeClass});","        }","        var initOptions = {asyncInit: false, callback: whenDone};","        try {","          // Deep copy the init params, because Backbone mutates them.  This","          // is bad if the init params came in from defaults of another object,","          // because those defaults will get mutated.","          var paramCopy = Monitor.deepCopy(initParams);","","          // Extend the probe name into the probe if known","          if (probeName) {","            paramCopy.probeName = probeName;","          }","","          // Instantiate a new probe","          probeImpl = new ProbeClass(paramCopy, initOptions);","          probeImpl.set({","            id: Monitor.generateUniqueId(),","            writableAttributes: ProbeClass.prototype.writableAttributes || []","          });","          probeImpl.refCount = 0;","          probeImpl.probeKey = probeKey;","          t.runningProbesByKey[probeKey] = probeImpl;","          t.runningProbesById[probeImpl.id] = probeImpl;","        } catch (e) {","          var error = {msg: 'Error instantiating probe ' + probeClass, error: e.message};","          return whenDone(error);","        }","","        // Return early if the probe constructor transferred responsibility","        // for calling the callback.","        if (initOptions.asyncInit) {","          return;","        }","      }","","      // The probe impl is found, and instantiated if necessary","      whenDone();","    },","","    /**","    * Disconnect with an internal probe implementation.","    *","    * @method disconnectInternal","    * @protected","    * @param probeId {String} - The probe implementation ID to disconnect","    * @param callback {Function(error, probeImpl)} - Called when disconnected","    */","    disconnectInternal: function(probeId, callback) {","      var t = this, probeImpl = t.runningProbesById[probeId];","      if (!probeImpl) {return callback('Probe not running');}","      if (--probeImpl.refCount === 0) {","","        // Release probe resources & internal references if still no references after a while","        setTimeout(function() {","          if (probeImpl.refCount === 0) {","            try {","              probeImpl.release();","            } catch (e){}","            delete t.runningProbesByKey[probeImpl.probeKey];","            delete t.runningProbesById[probeId];","          }","        }, PROBE_TIMEOUT_MS);","      }","      callback(null, probeImpl);","    },","","    /**","    * Connect to an external probe implementation.","    *","    * This connects with a probe running in another process.  It will","    * coordinate the remote instantiation of the probe if it's not running.","    *","    * @method connectExternal","    * @protected","    * @param monitorJSON {Object} - An object containing:","    *     @param monitorJSON.probeClass {String} - The probe class name (required)","    *     @param monitorJSON.initParams {Object} - Probe initialization parameters (if any)","    * @param connection {Connection} - The connection to use","    * @param callback {Function(error, probeProxy)} - Called when connected","    */","    connectExternal: function(monitorJSON, connection, callback) {","","      // Build a key for this probe from the probeClass and initParams","      var t = this,","          errStr = '',","          probeKey = t.buildProbeKey(monitorJSON);","","      // Get the probe proxy","      var probeId = connection.remoteProbeIdsByKey[probeKey];","      var probeProxy = connection.remoteProbesById[probeId];","","      if (!probeProxy) {","","        // Connect with the remote probe","        connection.emit('probe:connect', monitorJSON, function(error, probeJSON){","          if (error) {","            errStr = \"probe:connect returned an error for probeClass '\" + monitorJSON.probeClass +","              \"' on \" + Monitor.toServerString(monitorJSON);","            return callback({err: error, msg: errStr});","          }","          probeId = probeJSON.id;","","          // See if the proxy was created while waiting for return","          probeProxy = connection.remoteProbesById[probeId];","          if (probeProxy) {","            probeProxy.refCount++;","            log.info('connectExternal.connected.existingProxy', {probeId: probeId, refCount: probeProxy.refCount, whileWaiting: true});","            return callback(null, probeProxy);","          }","","          // Create the probe proxy","          probeProxy = new Probe(probeJSON);","          probeProxy.refCount = 1;","          probeProxy.connection = connection;","          connection.remoteProbeIdsByKey[probeKey] = probeId;","          connection.remoteProbesById[probeId] = probeProxy;","          connection.addEvent('probe:change:' + probeId, function(attrs){probeProxy.set(attrs);});","          log.info('connectExternal.connected.newProxy', {probeId: probeId});","          return callback(null, probeProxy);","        });","        return;","      }","","      // Probes are released based on reference count","      probeProxy.refCount++;","      log.info('connectExternal.connected.existingProxy', {probeId: probeId, refCount: probeProxy.refCount});","      return callback(null, probeProxy);","    },","","    /**","    * Disconnect with an external probe implementation.","    *","    * @method disconnectExternal","    * @protected","    * @param connection {Connection} - The connection to use","    * @param probeId {String} - Probe ID","    * @param callback {Function(error)} - Called when disconnected","    */","    disconnectExternal: function(connection, probeId, callback) {","      var t = this, proxy = connection.remoteProbesById[probeId];","      if (!proxy) {return callback('Probe not running');}","      if (--proxy.refCount === 0) {","        // Release probe resources","        proxy.release();","        proxy.connection = null;","        delete connection.remoteProbesById[probeId];","        delete connection.remoteProbeIdsByKey[proxy.probeKey];","        connection.removeEvent('probe:change:' + probeId);","        return connection.emit('probe:disconnect', {probeId:probeId}, function(error){","          return callback(error);","        });","      }","      callback(null);","    }","","  });","","}(this));",""],"l":{"5":1,"8":1,"20":1,"53":1,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"84":0,"85":0,"86":0,"115":0,"116":0,"117":0,"118":0,"129":0,"130":0,"131":0,"132":0,"133":0,"135":0,"149":0,"150":0,"168":0,"172":0,"173":0,"177":0,"179":0,"180":0,"181":0,"183":0,"186":0,"189":0,"190":0,"191":0,"193":0,"194":0,"195":0,"196":0,"197":0,"199":0,"200":0,"203":0,"204":0,"217":0,"218":0,"219":0,"220":0,"221":0,"240":0,"241":0,"250":0,"251":0,"252":0,"253":0,"257":0,"258":0,"261":0,"262":0,"263":0,"264":0,"265":0,"268":0,"273":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"284":0,"288":0,"292":0,"293":0,"295":0,"316":0,"317":0,"320":0,"323":0,"324":0,"325":0,"327":0,"328":0,"329":0,"330":0,"334":0,"335":0,"337":0,"354":0,"358":0,"359":0,"362":0,"363":0,"364":0,"367":0,"394":0,"409":0,"412":0,"413":0,"414":0,"415":0,"419":0,"420":0,"421":0,"423":0,"424":0,"425":0,"426":0,"428":0,"429":0,"430":0,"434":0,"435":0,"436":0,"437":0,"441":0,"442":0,"443":0,"444":0,"448":0,"452":0,"453":0,"454":0,"455":0,"456":0,"459":0,"460":0,"464":0,"465":0,"466":0,"467":0,"469":0,"470":0,"471":0,"473":0,"479":0,"480":0,"481":0,"482":0,"484":0,"485":0,"489":0,"490":0,"491":0,"495":0,"496":0,"497":0,"501":0,"502":0,"503":0,"504":0,"505":0,"509":0,"510":0,"511":0,"512":0,"513":0,"516":0,"520":0,"524":0,"526":0,"527":0,"528":0,"531":0,"532":0,"533":0,"553":0,"554":0,"557":0,"558":0,"559":0,"560":0,"563":0,"582":0,"583":0,"586":0,"587":0,"588":0,"591":0,"611":0,"618":0,"619":0,"623":0,"624":0,"628":0,"629":0,"630":0,"632":0,"636":0,"637":0,"638":0,"639":0,"640":0,"645":0,"646":0,"647":0,"648":0,"649":0,"651":0,"652":0,"653":0,"654":0,"655":0,"658":0,"659":0,"660":0,"661":0,"682":0,"689":0,"694":0,"697":0,"698":0,"699":0,"700":0,"701":0,"704":0,"707":0,"711":0,"712":0,"713":0,"718":0,"719":0,"722":0,"723":0,"724":0,"726":0,"727":0,"731":0,"734":0,"735":0,"739":0,"740":0,"744":0,"745":0,"746":0,"747":0,"749":0,"750":0,"755":0,"756":0,"761":0,"773":0,"774":0,"775":0,"778":0,"779":0,"780":0,"781":0,"783":0,"784":0,"788":0,"808":0,"813":0,"814":0,"816":0,"819":0,"820":0,"821":0,"823":0,"825":0,"828":0,"829":0,"830":0,"831":0,"832":0,"836":0,"837":0,"838":0,"839":0,"840":0,"841":0,"842":0,"843":0,"845":0,"849":0,"850":0,"851":0,"864":0,"865":0,"866":0,"868":0,"869":0,"870":0,"871":0,"872":0,"873":0,"874":0,"877":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Sync.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/Sync.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":1,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":1,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0},"b":{"1":[1,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0,0,0],"32":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":78,"loc":{"start":{"line":78,"column":17},"end":{"line":78,"column":46}}},"3":{"name":"(anonymous_3)","line":85,"loc":{"start":{"line":85,"column":11},"end":{"line":85,"column":44}}},"4":{"name":"(anonymous_4)","line":112,"loc":{"start":{"line":112,"column":13},"end":{"line":112,"column":42}}},"5":{"name":"(anonymous_5)","line":136,"loc":{"start":{"line":136,"column":25},"end":{"line":136,"column":58}}},"6":{"name":"(anonymous_6)","line":160,"loc":{"start":{"line":160,"column":61},"end":{"line":160,"column":77}}},"7":{"name":"(anonymous_7)","line":168,"loc":{"start":{"line":168,"column":21},"end":{"line":168,"column":45}}},"8":{"name":"(anonymous_8)","line":222,"loc":{"start":{"line":222,"column":40},"end":{"line":222,"column":83}}},"9":{"name":"(anonymous_9)","line":229,"loc":{"start":{"line":229,"column":24},"end":{"line":229,"column":39}}},"10":{"name":"(anonymous_10)","line":264,"loc":{"start":{"line":264,"column":43},"end":{"line":264,"column":86}}},"11":{"name":"(anonymous_11)","line":268,"loc":{"start":{"line":268,"column":19},"end":{"line":268,"column":35}}},"12":{"name":"(anonymous_12)","line":276,"loc":{"start":{"line":276,"column":32},"end":{"line":276,"column":43}}},"13":{"name":"(anonymous_13)","line":285,"loc":{"start":{"line":285,"column":26},"end":{"line":285,"column":58}}},"14":{"name":"(anonymous_14)","line":308,"loc":{"start":{"line":308,"column":28},"end":{"line":308,"column":60}}},"15":{"name":"(anonymous_15)","line":349,"loc":{"start":{"line":349,"column":24},"end":{"line":349,"column":39}}},"16":{"name":"(anonymous_16)","line":387,"loc":{"start":{"line":387,"column":28},"end":{"line":387,"column":52}}},"17":{"name":"(anonymous_17)","line":416,"loc":{"start":{"line":416,"column":37},"end":{"line":416,"column":55}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":437,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":11,"column":20}},"3":{"start":{"line":14,"column":2},"end":{"line":17,"column":31}},"4":{"start":{"line":78,"column":2},"end":{"line":89,"column":4}},"5":{"start":{"line":79,"column":4},"end":{"line":81,"column":5}},"6":{"start":{"line":80,"column":6},"end":{"line":80,"column":58}},"7":{"start":{"line":84,"column":4},"end":{"line":84,"column":47}},"8":{"start":{"line":85,"column":4},"end":{"line":88,"column":6}},"9":{"start":{"line":86,"column":6},"end":{"line":86,"column":104}},"10":{"start":{"line":87,"column":6},"end":{"line":87,"column":51}},"11":{"start":{"line":112,"column":2},"end":{"line":117,"column":4}},"12":{"start":{"line":113,"column":4},"end":{"line":113,"column":17}},"13":{"start":{"line":114,"column":4},"end":{"line":114,"column":48}},"14":{"start":{"line":115,"column":4},"end":{"line":115,"column":28}},"15":{"start":{"line":116,"column":4},"end":{"line":116,"column":30}},"16":{"start":{"line":136,"column":2},"end":{"line":199,"column":4}},"17":{"start":{"line":137,"column":4},"end":{"line":137,"column":17}},"18":{"start":{"line":138,"column":4},"end":{"line":138,"column":28}},"19":{"start":{"line":141,"column":4},"end":{"line":143,"column":5}},"20":{"start":{"line":142,"column":6},"end":{"line":142,"column":70}},"21":{"start":{"line":146,"column":4},"end":{"line":153,"column":5}},"22":{"start":{"line":147,"column":6},"end":{"line":152,"column":7}},"23":{"start":{"line":148,"column":8},"end":{"line":148,"column":68}},"24":{"start":{"line":149,"column":8},"end":{"line":149,"column":84}},"25":{"start":{"line":151,"column":8},"end":{"line":151,"column":62}},"26":{"start":{"line":158,"column":4},"end":{"line":165,"column":5}},"27":{"start":{"line":160,"column":6},"end":{"line":163,"column":10}},"28":{"start":{"line":162,"column":8},"end":{"line":162,"column":45}},"29":{"start":{"line":164,"column":6},"end":{"line":164,"column":13}},"30":{"start":{"line":168,"column":4},"end":{"line":178,"column":6}},"31":{"start":{"line":169,"column":6},"end":{"line":177,"column":7}},"32":{"start":{"line":170,"column":8},"end":{"line":172,"column":9}},"33":{"start":{"line":171,"column":10},"end":{"line":171,"column":63}},"34":{"start":{"line":173,"column":8},"end":{"line":173,"column":35}},"35":{"start":{"line":175,"column":8},"end":{"line":175,"column":70}},"36":{"start":{"line":176,"column":8},"end":{"line":176,"column":32}},"37":{"start":{"line":181,"column":4},"end":{"line":197,"column":5}},"38":{"start":{"line":184,"column":6},"end":{"line":184,"column":59}},"39":{"start":{"line":185,"column":6},"end":{"line":185,"column":43}},"40":{"start":{"line":186,"column":6},"end":{"line":186,"column":52}},"41":{"start":{"line":192,"column":6},"end":{"line":196,"column":7}},"42":{"start":{"line":193,"column":8},"end":{"line":193,"column":70}},"43":{"start":{"line":195,"column":8},"end":{"line":195,"column":67}},"44":{"start":{"line":222,"column":2},"end":{"line":242,"column":4}},"45":{"start":{"line":223,"column":4},"end":{"line":223,"column":17}},"46":{"start":{"line":226,"column":4},"end":{"line":226,"column":76}},"47":{"start":{"line":227,"column":4},"end":{"line":227,"column":50}},"48":{"start":{"line":228,"column":4},"end":{"line":228,"column":49}},"49":{"start":{"line":229,"column":4},"end":{"line":241,"column":7}},"50":{"start":{"line":230,"column":6},"end":{"line":235,"column":7}},"51":{"start":{"line":231,"column":8},"end":{"line":233,"column":9}},"52":{"start":{"line":232,"column":10},"end":{"line":232,"column":53}},"53":{"start":{"line":234,"column":8},"end":{"line":234,"column":31}},"54":{"start":{"line":238,"column":6},"end":{"line":238,"column":34}},"55":{"start":{"line":239,"column":6},"end":{"line":239,"column":43}},"56":{"start":{"line":240,"column":6},"end":{"line":240,"column":50}},"57":{"start":{"line":264,"column":2},"end":{"line":372,"column":4}},"58":{"start":{"line":265,"column":4},"end":{"line":265,"column":57}},"59":{"start":{"line":268,"column":4},"end":{"line":344,"column":6}},"60":{"start":{"line":271,"column":6},"end":{"line":273,"column":7}},"61":{"start":{"line":272,"column":8},"end":{"line":272,"column":31}},"62":{"start":{"line":276,"column":6},"end":{"line":282,"column":8}},"63":{"start":{"line":277,"column":8},"end":{"line":277,"column":71}},"64":{"start":{"line":278,"column":8},"end":{"line":278,"column":43}},"65":{"start":{"line":279,"column":8},"end":{"line":279,"column":57}},"66":{"start":{"line":280,"column":8},"end":{"line":280,"column":39}},"67":{"start":{"line":281,"column":8},"end":{"line":281,"column":33}},"68":{"start":{"line":285,"column":6},"end":{"line":305,"column":8}},"69":{"start":{"line":286,"column":8},"end":{"line":286,"column":32}},"70":{"start":{"line":289,"column":8},"end":{"line":292,"column":9}},"71":{"start":{"line":290,"column":10},"end":{"line":290,"column":78}},"72":{"start":{"line":291,"column":10},"end":{"line":291,"column":17}},"73":{"start":{"line":295,"column":8},"end":{"line":298,"column":9}},"74":{"start":{"line":296,"column":10},"end":{"line":296,"column":78}},"75":{"start":{"line":297,"column":10},"end":{"line":297,"column":39}},"76":{"start":{"line":301,"column":8},"end":{"line":304,"column":9}},"77":{"start":{"line":302,"column":10},"end":{"line":302,"column":75}},"78":{"start":{"line":303,"column":10},"end":{"line":303,"column":23}},"79":{"start":{"line":308,"column":6},"end":{"line":335,"column":8}},"80":{"start":{"line":311,"column":8},"end":{"line":311,"column":54}},"81":{"start":{"line":312,"column":8},"end":{"line":315,"column":9}},"82":{"start":{"line":313,"column":10},"end":{"line":313,"column":74}},"83":{"start":{"line":314,"column":10},"end":{"line":314,"column":17}},"84":{"start":{"line":318,"column":8},"end":{"line":318,"column":49}},"85":{"start":{"line":319,"column":8},"end":{"line":322,"column":9}},"86":{"start":{"line":320,"column":10},"end":{"line":320,"column":70}},"87":{"start":{"line":321,"column":10},"end":{"line":321,"column":32}},"88":{"start":{"line":325,"column":8},"end":{"line":325,"column":44}},"89":{"start":{"line":326,"column":8},"end":{"line":334,"column":9}},"90":{"start":{"line":327,"column":10},"end":{"line":327,"column":71}},"91":{"start":{"line":328,"column":10},"end":{"line":328,"column":31}},"92":{"start":{"line":331,"column":10},"end":{"line":331,"column":70}},"93":{"start":{"line":332,"column":10},"end":{"line":332,"column":37}},"94":{"start":{"line":333,"column":10},"end":{"line":333,"column":39}},"95":{"start":{"line":338,"column":6},"end":{"line":338,"column":40}},"96":{"start":{"line":339,"column":6},"end":{"line":339,"column":54}},"97":{"start":{"line":342,"column":6},"end":{"line":342,"column":78}},"98":{"start":{"line":343,"column":6},"end":{"line":343,"column":53}},"99":{"start":{"line":347,"column":4},"end":{"line":347,"column":53}},"100":{"start":{"line":348,"column":4},"end":{"line":348,"column":45}},"101":{"start":{"line":349,"column":4},"end":{"line":371,"column":7}},"102":{"start":{"line":350,"column":6},"end":{"line":355,"column":7}},"103":{"start":{"line":351,"column":8},"end":{"line":353,"column":9}},"104":{"start":{"line":352,"column":10},"end":{"line":352,"column":71}},"105":{"start":{"line":354,"column":8},"end":{"line":354,"column":31}},"106":{"start":{"line":358,"column":6},"end":{"line":358,"column":38}},"107":{"start":{"line":363,"column":6},"end":{"line":365,"column":7}},"108":{"start":{"line":364,"column":8},"end":{"line":364,"column":26}},"109":{"start":{"line":368,"column":6},"end":{"line":368,"column":43}},"110":{"start":{"line":369,"column":6},"end":{"line":369,"column":92}},"111":{"start":{"line":370,"column":6},"end":{"line":370,"column":50}},"112":{"start":{"line":387,"column":2},"end":{"line":400,"column":4}},"113":{"start":{"line":388,"column":4},"end":{"line":388,"column":18}},"114":{"start":{"line":389,"column":4},"end":{"line":398,"column":5}},"115":{"start":{"line":392,"column":8},"end":{"line":392,"column":34}},"116":{"start":{"line":393,"column":8},"end":{"line":393,"column":14}},"117":{"start":{"line":396,"column":8},"end":{"line":396,"column":36}},"118":{"start":{"line":397,"column":8},"end":{"line":397,"column":14}},"119":{"start":{"line":399,"column":4},"end":{"line":399,"column":16}},"120":{"start":{"line":416,"column":2},"end":{"line":434,"column":4}},"121":{"start":{"line":419,"column":4},"end":{"line":419,"column":17}},"122":{"start":{"line":420,"column":4},"end":{"line":420,"column":73}},"123":{"start":{"line":423,"column":4},"end":{"line":423,"column":31}},"124":{"start":{"line":424,"column":4},"end":{"line":426,"column":6}},"125":{"start":{"line":429,"column":4},"end":{"line":431,"column":5}},"126":{"start":{"line":430,"column":6},"end":{"line":430,"column":42}},"127":{"start":{"line":433,"column":4},"end":{"line":433,"column":18}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":52}}]},"2":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"3":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":16},"end":{"line":116,"column":23}},{"start":{"line":116,"column":27},"end":{"line":116,"column":29}}]},"4":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":14},"end":{"line":138,"column":21}},{"start":{"line":138,"column":25},"end":{"line":138,"column":27}}]},"5":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":4},"end":{"line":141,"column":4}},{"start":{"line":141,"column":4},"end":{"line":141,"column":4}}]},"6":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":8},"end":{"line":141,"column":24}},{"start":{"line":141,"column":28},"end":{"line":141,"column":64}}]},"7":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":4},"end":{"line":146,"column":4}},{"start":{"line":146,"column":4},"end":{"line":146,"column":4}}]},"8":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":6},"end":{"line":147,"column":6}},{"start":{"line":147,"column":6},"end":{"line":147,"column":6}}]},"9":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":4},"end":{"line":158,"column":4}},{"start":{"line":158,"column":4},"end":{"line":158,"column":4}}]},"10":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":8},"end":{"line":158,"column":32}},{"start":{"line":158,"column":36},"end":{"line":158,"column":52}}]},"11":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":6},"end":{"line":169,"column":6}},{"start":{"line":169,"column":6},"end":{"line":169,"column":6}}]},"12":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":8},"end":{"line":170,"column":8}},{"start":{"line":170,"column":8},"end":{"line":170,"column":8}}]},"13":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":4},"end":{"line":181,"column":4}},{"start":{"line":181,"column":4},"end":{"line":181,"column":4}}]},"14":{"line":181,"type":"binary-expr","locations":[{"start":{"line":181,"column":8},"end":{"line":181,"column":25}},{"start":{"line":181,"column":30},"end":{"line":181,"column":43}},{"start":{"line":181,"column":47},"end":{"line":181,"column":64}}]},"15":{"line":184,"type":"binary-expr","locations":[{"start":{"line":184,"column":24},"end":{"line":184,"column":41}},{"start":{"line":184,"column":45},"end":{"line":184,"column":58}}]},"16":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":6},"end":{"line":192,"column":6}},{"start":{"line":192,"column":6},"end":{"line":192,"column":6}}]},"17":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":6},"end":{"line":230,"column":6}},{"start":{"line":230,"column":6},"end":{"line":230,"column":6}}]},"18":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":8},"end":{"line":231,"column":8}},{"start":{"line":231,"column":8},"end":{"line":231,"column":8}}]},"19":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":6},"end":{"line":271,"column":6}},{"start":{"line":271,"column":6},"end":{"line":271,"column":6}}]},"20":{"line":286,"type":"binary-expr","locations":[{"start":{"line":286,"column":18},"end":{"line":286,"column":25}},{"start":{"line":286,"column":29},"end":{"line":286,"column":31}}]},"21":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":8},"end":{"line":289,"column":8}},{"start":{"line":289,"column":8},"end":{"line":289,"column":8}}]},"22":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":8},"end":{"line":295,"column":8}},{"start":{"line":295,"column":8},"end":{"line":295,"column":8}}]},"23":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":8},"end":{"line":301,"column":8}},{"start":{"line":301,"column":8},"end":{"line":301,"column":8}}]},"24":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":8},"end":{"line":312,"column":8}},{"start":{"line":312,"column":8},"end":{"line":312,"column":8}}]},"25":{"line":319,"type":"if","locations":[{"start":{"line":319,"column":8},"end":{"line":319,"column":8}},{"start":{"line":319,"column":8},"end":{"line":319,"column":8}}]},"26":{"line":319,"type":"binary-expr","locations":[{"start":{"line":319,"column":12},"end":{"line":319,"column":21}},{"start":{"line":319,"column":25},"end":{"line":319,"column":48}}]},"27":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":8},"end":{"line":326,"column":8}},{"start":{"line":326,"column":8},"end":{"line":326,"column":8}}]},"28":{"line":350,"type":"if","locations":[{"start":{"line":350,"column":6},"end":{"line":350,"column":6}},{"start":{"line":350,"column":6},"end":{"line":350,"column":6}}]},"29":{"line":351,"type":"if","locations":[{"start":{"line":351,"column":8},"end":{"line":351,"column":8}},{"start":{"line":351,"column":8},"end":{"line":351,"column":8}}]},"30":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":6},"end":{"line":363,"column":6}},{"start":{"line":363,"column":6},"end":{"line":363,"column":6}}]},"31":{"line":389,"type":"switch","locations":[{"start":{"line":390,"column":6},"end":{"line":390,"column":23}},{"start":{"line":391,"column":6},"end":{"line":393,"column":14}},{"start":{"line":394,"column":6},"end":{"line":394,"column":25}},{"start":{"line":395,"column":6},"end":{"line":397,"column":14}}]},"32":{"line":429,"type":"if","locations":[{"start":{"line":429,"column":4},"end":{"line":429,"column":4}},{"start":{"line":429,"column":4},"end":{"line":429,"column":4}}]}},"code":["// Sync.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading - this runs server-side only","  var Monitor = root.Monitor || require('./Monitor'),","      logger = Monitor.getLogger('Sync'),","      Backbone = Monitor.Backbone,","      _ = Monitor._;","","  // Constants","  var METHOD_CREATE = 'create',","      METHOD_READ = 'read',","      METHOD_UPDATE = 'update',","      METHOD_DELETE = 'delete';","","  /**","  * Probe based data synchronization with server-side storage.","  *","  * This method returns a function conforming to the Backbone","  * <a href=\"http://documentcloud.github.com/backbone/#Sync\">Sync</a>","  * API, offering","  * <a href=\"http://documentcloud.github.com/backbone/#Model-fetch\">```fetch```</a>,","  * <a href=\"http://documentcloud.github.com/backbone/#Model-save\">```save```</a>, and","  * <a href=\"http://documentcloud.github.com/backbone/#Model-destroy\">```destroy```</a>","  * functionality to any Backbone data model.","  *","  * The returned function can be assigned to the ```sync``` element when defining the","  * data model:","  *","  *     var BlogEntry = Backbone.Model.extend({","  *       ...","  *       sync: Monitor.Sync('BlogEntry'),","  *       ...","  *     });","  *","  * The sync function can also be assigned to any Backbone model after construction:","  *","  *     var myBook = new Book({id:\"44329\"});","  *     myBook.sync = Monitor.Sync('Book');","  *     myBook.fetch();","  *","  * In addition to providing the standard ```fetch```, ```save```, and ```destroy```","  * functionality, Sync offers *live data synchronization*, updating the data model","  * as changes are detected on the server.","  *","  *     // Turn on live data synchronization","  *     myBook.fetch({liveSync:true});","  *","  * This fetches the ```myBook``` instance with the contents of the Book class","  * id ```44329```, persists local changes to ```myBook```, and keeps ```myBook```","  * up to date with changes detected on the server.","  *","  * Live data synchronization consumes resources on both the client and server.","  * To release those resources, make sure to call the ```clear()``` method on","  * the data model. Otherwise, resources are released when the server connection","  * is terminated.","  *","  *     // Clear the object, turning off live synchronization","  *     myBook.clear();","  *","  * See the <a href=\"http://documentcloud.github.com/backbone/#Sync\">Backbone documentation</a>","  * for more information about the Backbone.sync functionality.","  *","  * @static","  * @method Sync","  * @param className {String} Name of the class to synchronize with","  * @param [options] {Object} Additional sync options","  *     @param options.hostName {String} Host name to use for the Sync probe.","  *       If not specified, the closest server hosting Sync probe will be","  *       determined (this server, or the default gateway)","  *     @param options.appName {String} Server appName (see Monitor.appName)","  *     @param options.appInstance {String} Application instance (see Monitor.appInstance)","  * @return {sync} A sync method to assign to a Backbone class or instance.","  */","  Monitor.Sync = function(className, options) {","    if (!className) {","      throw new Error('Sync class name must be provided');","    }","","    // Get a Sync object and bind it to the sync function","    var syncObj = new Sync(className, options);","    return function(method, model, options) {","      logger.info('sync', {className: className, method:method, model:model.toJSON(), options:options});","      return syncObj._sync(method, model, options);","    };","  };","","  /**","  * Live data model synchronization.","  *","  * This class can be attached to Backbone models to synchronize backend data using the","  * <a href=\"http://documentcloud.github.com/backbone/#Model-fetch\">```fetch```</a>,","  * <a href=\"http://documentcloud.github.com/backbone/#Model-save\">```save```</a>, and","  * <a href=\"http://documentcloud.github.com/backbone/#Model-destroy\">```destroy```</a>","  * Backbone API methods.","  *","  * It also provides two-way change based synchronization, updating data on the server as","  * changes are made to the model, and updating the client model as changes are detected","  * on the server.","  *","  * Communication is <a href=\"Probe.html\">Probe</a> based, leveraging the built-in","  * connection, routing, and socket-io functionality.  The <a href=\"FileSyncProbe.html\">FileSyncProbe</a>","  * is provided for file-based model persistence, and others can be written to","  * implement alternate persistence mechanisms.","  *","  * @private","  * @class Sync","  */","  var Sync = function(className, options) {","    var t = this;","    logger.info('syncInit', className, options);","    t.className = className;","    t.options = options || {};","  };","","  /**","  * Provide the sync API to a backbone data model","  *","  * See the <a href=\"http://documentcloud.github.com/backbone/#Sync\">Backbone documentation</a>","  * for more information on this method.","  *","  * @private","  * @method _sync","  * @param method {String} A CRUD enumeration of \"create\", \"read\", \"update\", or \"delete\"","  * @param model {Backbone.Model or Backbone.Collection} The model or collection to act upon","  * @param [options] {Object} Success and error callbacks, and additional options to","  *   pass on to the sync implementation.","  *     @param [options.liveSync] - Turn on the live update functionality","  *     @param [options.silenceErrors] - Silence the logging of errors (they're expected)","  *     @param [options.success] - The method to call on method success","  *     @param [options.error] - The method to call on method error","  */","  Sync.prototype._sync = function(method, model, options) {","    var t = this;","    options = options || {};","","    // Cannot liveSync with a collection (too many issues)","    if (options.liveSync && model instanceof Backbone.Collection) {","      return options.error(null, 'Cannot liveSync with a collection');","    }","","    // Generate an ID if necessary","    if (!model.has('id')) {","      if (method === METHOD_CREATE) {","        model.set({id: Monitor.generateUniqueId()}, {silent: true});","        logger.info('_sync.generateUniqueId', t.className, model.toJSON(), options);","      } else {","        return options.error(null, 'ID element must be set.');","      }","    }","","    // Special case: LiveSync on CREATE.  LiveSync requires a persisted object,","    // so if requesting liveSync on a create, we have to use the class monitor","    // for the create, then get an instance monitor for the liveSync.","    if (method === METHOD_CREATE && options.liveSync) {","      // Call this method again without liveSync (this uses the class monitor)","      t._sync(method, model, {error: options.error, success: function(params){","        // Now connect w/liveSync using a fetch","        t._sync(METHOD_READ, model, options);","      }});","      return;","    }","","    // Create a function to run once complete","    var onComplete = function(error, params) {","      if (error) {","        if (!options.silenceErrors) {","          logger.error('_sync.onComplete', t.className, error);","        }","        options.error(null, error);","      } else {","        logger.info('_sync.onComplete', t.className, model.get('id'));","        options.success(params);","      }","    };","","    // Is the proper syncMonitor already connected?","    if (model.syncMonitor || (t.syncMonitor && !options.liveSync)) {","","      // Send the control message to the connected monitor","      var syncMonitor = model.syncMonitor || t.syncMonitor;","      var opts = t._getOpts(method, model);","      syncMonitor.control(method, opts, onComplete);","","    } else {","","      // Connect an instance level syncMonitor to the model if liveSync","      // is specified, otherwise create a class level syncMonitor","      if (options.liveSync) {","        t._connectInstanceMonitor(method, model, options, onComplete);","      } else {","        t._connectClassMonitor(method, model, options, onComplete);","      }","    }","","  };","","  /**","  * Connect and send the control message to a Sync probe for this class.","  *","  * This creates a monitor to a Sync probe with the specified className.","  * The monitor is used to send CRUD control messages for any ID within","  * the class.","  *","  * Once connected, it sends the specified control message to the probe.","  *","  * This monitor is used for non-liveSync interactions.","  *","  * @private","  * @method _connectClassMonitor","  * @param method {String} The requested CRUD method","  * @param model {Backbone.Model} The data model to perform the operation on","  * @param [options] {Object} Options","  *     @param [options.silenceErrors] - Silence the logging of errors (they're expected)","  * @param callback {function(error, params)} - Called when connected","  *     @param callback.error {Mixed} - Set if it couldn't connect","  *     @param callback.params {Object} - Updated data model parameters","  */","  Sync.prototype._connectClassMonitor = function(method, model, options, callback) {","    var t = this;","","    // Connect a syncMonitor for the class","    logger.info('connectClassMonitor', t.className, method, model.toJSON());","    var monitorParams = t._getMonitorParams(null);","    var syncMonitor = new Monitor(monitorParams);","    syncMonitor.connect(function(error){","      if (error) {","        if (!options.silenceErrors) {","          logger.error('connectClassMonitor', error);","        }","        return callback(error);","      }","","      // Attach the syncMonitor and forward the initial control message","      t.syncMonitor = syncMonitor;","      var opts = t._getOpts(method, model);","      syncMonitor.control(method, opts, callback);","    });","  };","","  /**","  * Connect and send the control message to a liveSync monitor for the model","  *","  * This creates a monitor to a Sync probe for the model instance, and","  * attaches event listeners onto the monitor and the data model.","  *","  * Once connected, it sends the specified control message to the probe.","  *","  * Changes on the server are automatically propagated to the local","  * data model, and local changes to the data model are automatically","  * propagated to the server.","  *","  * @private","  * @method _connectInstanceMonitor","  * @param method {String} The requested CRUD method","  * @param model {Backbone.Model} The data model to perform the operation on","  * @param callback {function(error, params)} - Called when connected","  *     @param callback.error {Mixed} - Set if it couldn't connect","  *     @param callback.params {Object} - Updated data model parameters","  */","  Sync.prototype._connectInstanceMonitor = function(method, model, options, callback) {","    var t = this, syncMonitor, modelId = model.get('id');","","    // Called when done connecting","    var whenDone = function(error) {","","      // Don't connect the instance monitor if errors","      if (error) {","        return callback(error);","      }","","      // Called to disconnect the listeners","      var disconnectListeners = function() {","        logger.info('disconnectLiveSync', t.className, model.toJSON());","        model.off('change', modelListener);","        model.syncMonitor.off('change', monitorListener);","        model.syncMonitor.disconnect();","        model.syncMonitor = null;","      };","","      // Client-side listener - for persisting changes to the server","      var modelListener = function(changedModel, options) {","        options = options || {};","","        // Don't persist unless the model is different","        if (_.isEqual(JSON.parse(JSON.stringify(model)), JSON.parse(JSON.stringify(model.syncMonitor.get('model'))))) {","          logger.info('modelListener.noChanges', t.className, model.toJSON());","          return;","        }","","        // Disconnect listeners if the ID changes","        if (model.get('id') !== modelId) {","          logger.info('modelListener.alteredId', t.className, model.toJSON());","          return disconnectListeners();","        }","","        // Persist changes to the server (unless the changes originated from there)","        if (!options.isSyncChanging) {","          logger.info('modelListener.saving', t.className, model.toJSON());","          model.save();","        }","      };","","      // Server-side listener - for updating server changes into the model","      var monitorListener = function(changedModel, options) {","","        // Don't update unless the model is different","        var newModel = model.syncMonitor.get('model');","        if (_.isEqual(JSON.parse(JSON.stringify(model)), JSON.parse(JSON.stringify(newModel)))) {","          logger.info('monitorListener.noChanges', t.className, newModel);","          return;","        }","","        // Disconnect if the model was deleted or the ID isn't the same","        var isDeleted = (_.size(newModel) === 0);","        if (isDeleted || newModel.id !== modelId)  {","          logger.info('modelListener.deleted', t.className, newModel);","          disconnectListeners();","        }","","        // Forward changes to the model (including server-side delete)","        var newOpts = {isSyncChanging:true};","        if (isDeleted) {","          logger.info('modelListener.deleting', t.className, newModel);","          model.clear(newOpts);","        } else {","          // Make sure the model is set to exactly the new contents (vs. override)","          logger.info('modelListener.setting', t.className, newModel);","          model.clear({silent:true});","          model.set(newModel, newOpts);","        }","      };","","      // Connect the listeners","      model.on('change', modelListener);","      model.syncMonitor.on('change', monitorListener);","","      // Send back the initial data model","      logger.info('connectInstanceMonitor.done', t.className, model.toJSON());","      callback(null, model.syncMonitor.get('model'));","    };","","    // Create a liveSync monitor for the model","    var monitorParams = t._getMonitorParams(modelId);","    syncMonitor = new Monitor(monitorParams);","    syncMonitor.connect(function(error){","      if (error) {","        if (!options.silenceErrors) {","          logger.error('connectInstanceMonitor.monitorConnect', error);","        }","        return whenDone(error);","      }","","      // Attach the connected syncMonitor to the model","      model.syncMonitor = syncMonitor;","","      // If the initial method is read, then the monitor already","      // contains the results.  Otherwise, another round-trip is","      // necessary for the initial control request.","      if (method === METHOD_READ) {","        return whenDone();","      }","","      // Forward the initial control","      var opts = t._getOpts(method, model);","      logger.info('connectInstanceMonitor.forwarding', method, t.className, model.toJSON());","      syncMonitor.control(method, opts, whenDone);","    });","  };","","  /**","  * Prepare the control options","  *","  * This prepares the control options to include the ID element","  * on a fetch or delete, and the entire model on a create or","  * update.","  *","  * @private","  * @method _getOpts","  * @param method {Enum} One of the CRUD methods","  * @param model {Backbone.Model} The model to prepare the opts from","  * @return {Object} The options object to pass to the probe","  */","  Sync.prototype._getOpts = function(method, model) {","    var opts = {};","    switch (method) {","      case METHOD_READ:","      case METHOD_DELETE:","        opts.id = model.get('id');","        break;","      case METHOD_CREATE:","      case METHOD_UPDATE:","        opts.model = model.toJSON();","        break;","    }","    return opts;","  };","","  /**","  * Prepare the init parameters for a monitor to a Sync probe","  *","  * The monitor init params for the class monitor and the liveSync","  * model monitor only differ in the modelId, so this method was","  * broken out to reduce code duplication.","  *","  * @private","  * @method _getMonitorParams","  * @param [modelId] {String} Id to the data model.  If set, then params","  *   will be built for liveSync to a data model with that id.","  *   params for the class.","  * @return {Object} The monitor parameters","  */","  Sync.prototype._getMonitorParams = function(modelId) {","","    // Build server connection parameters from this instance of Sync","    var t = this;","    var params = _.pick(t.options, 'hostName', 'appName', 'appInstance');","","    // Add probe and class parameters","    params.probeClass = 'Sync';","    params.initParams = {","      className: t.className","    };","","    // Add the model id if this is a liveSync probe","    if (modelId) {","      params.initParams.modelId = modelId;","    }","","    return params;","  };","","","}(this));",""],"l":{"5":1,"8":1,"14":1,"78":1,"79":0,"80":0,"84":0,"85":0,"86":0,"87":0,"112":1,"113":0,"114":0,"115":0,"116":0,"136":1,"137":0,"138":0,"141":0,"142":0,"146":0,"147":0,"148":0,"149":0,"151":0,"158":0,"160":0,"162":0,"164":0,"168":0,"169":0,"170":0,"171":0,"173":0,"175":0,"176":0,"181":0,"184":0,"185":0,"186":0,"192":0,"193":0,"195":0,"222":1,"223":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"234":0,"238":0,"239":0,"240":0,"264":1,"265":0,"268":0,"271":0,"272":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"285":0,"286":0,"289":0,"290":0,"291":0,"295":0,"296":0,"297":0,"301":0,"302":0,"303":0,"308":0,"311":0,"312":0,"313":0,"314":0,"318":0,"319":0,"320":0,"321":0,"325":0,"326":0,"327":0,"328":0,"331":0,"332":0,"333":0,"338":0,"339":0,"342":0,"343":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"354":0,"358":0,"363":0,"364":0,"368":0,"369":0,"370":0,"387":1,"388":0,"389":0,"392":0,"393":0,"396":0,"397":0,"399":0,"416":1,"419":0,"420":0,"423":0,"424":0,"429":0,"430":0,"433":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/DataModelProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/DataModelProbe.js","s":{"1":1,"2":1,"3":1},"b":{"1":[1,1]},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":1},"end":{"line":6,"column":15}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":33,"column":9}},"2":{"start":{"line":9,"column":2},"end":{"line":9,"column":54}},"3":{"start":{"line":25,"column":2},"end":{"line":31,"column":5}}},"branchMap":{"1":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":16},"end":{"line":9,"column":28}},{"start":{"line":9,"column":32},"end":{"line":9,"column":53}}]}},"code":["// DataModelProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","","(function(root){","","  // Module loading - this runs server-side only","  var Monitor = root.Monitor || require('../Monitor');","","  /**","  * Probe representation of a simple data model","  *","  * This probe allows remote creation, manipulation, and change moitoring for","  * arbitrary data. It is useful for monitor applications needing to maintain","  * a small amount of state on the system being monitored.","  *","  * @class DataModelProbe","  * @extends Probe","  * @constructor","  * @param [initParams] - Initialization parameters.  An object containing the","  *   initial state of the data model.  All properties become data model","  *   elements, readable and writable by all monitors connected to the probe.","  */","  var DataModelProbe = Monitor.DataModelProbe = Monitor.Probe.extend({","","    // These are required for Probes","    probeClass: 'DataModel',","    writableAttributes: '*'","","  });","","}(this));",""],"l":{"6":1,"9":1,"25":1}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/RecipeProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/RecipeProbe.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0},"b":{"1":[1,1],"2":[1,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":1},"end":{"line":9,"column":15}}},"2":{"name":"(anonymous_2)","line":72,"loc":{"start":{"line":72,"column":16},"end":{"line":72,"column":45}}},"3":{"name":"(anonymous_3)","line":95,"loc":{"start":{"line":95,"column":13},"end":{"line":95,"column":24}}},"4":{"name":"(anonymous_4)","line":98,"loc":{"start":{"line":98,"column":25},"end":{"line":98,"column":35}}},"5":{"name":"(anonymous_5)","line":110,"loc":{"start":{"line":110,"column":19},"end":{"line":110,"column":46}}},"6":{"name":"(anonymous_6)","line":122,"loc":{"start":{"line":122,"column":22},"end":{"line":122,"column":38}}},"7":{"name":"(anonymous_7)","line":155,"loc":{"start":{"line":155,"column":18},"end":{"line":155,"column":45}}},"8":{"name":"(anonymous_8)","line":166,"loc":{"start":{"line":166,"column":25},"end":{"line":166,"column":41}}},"9":{"name":"(anonymous_9)","line":198,"loc":{"start":{"line":198,"column":22},"end":{"line":198,"column":40}}},"10":{"name":"(anonymous_10)","line":225,"loc":{"start":{"line":225,"column":25},"end":{"line":225,"column":35}}},"11":{"name":"(anonymous_11)","line":254,"loc":{"start":{"line":254,"column":15},"end":{"line":254,"column":26}}},"12":{"name":"(anonymous_12)","line":256,"loc":{"start":{"line":256,"column":24},"end":{"line":256,"column":39}}},"13":{"name":"(anonymous_13)","line":271,"loc":{"start":{"line":271,"column":17},"end":{"line":271,"column":44}}},"14":{"name":"(anonymous_14)","line":311,"loc":{"start":{"line":311,"column":9},"end":{"line":311,"column":27}}},"15":{"name":"(anonymous_15)","line":339,"loc":{"start":{"line":339,"column":16},"end":{"line":339,"column":34}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":351,"column":9}},"2":{"start":{"line":12,"column":2},"end":{"line":17,"column":28}},"3":{"start":{"line":59,"column":2},"end":{"line":348,"column":5}},"4":{"start":{"line":73,"column":6},"end":{"line":73,"column":19}},"5":{"start":{"line":76,"column":6},"end":{"line":76,"column":24}},"6":{"start":{"line":77,"column":6},"end":{"line":77,"column":23}},"7":{"start":{"line":80,"column":6},"end":{"line":83,"column":7}},"8":{"start":{"line":81,"column":8},"end":{"line":81,"column":72}},"9":{"start":{"line":82,"column":8},"end":{"line":82,"column":15}},"10":{"start":{"line":86,"column":6},"end":{"line":86,"column":22}},"11":{"start":{"line":89,"column":6},"end":{"line":92,"column":7}},"12":{"start":{"line":90,"column":8},"end":{"line":90,"column":33}},"13":{"start":{"line":91,"column":8},"end":{"line":91,"column":46}},"14":{"start":{"line":96,"column":6},"end":{"line":97,"column":27}},"15":{"start":{"line":98,"column":6},"end":{"line":100,"column":9}},"16":{"start":{"line":99,"column":8},"end":{"line":99,"column":47}},"17":{"start":{"line":111,"column":6},"end":{"line":113,"column":39}},"18":{"start":{"line":115,"column":6},"end":{"line":119,"column":7}},"19":{"start":{"line":116,"column":8},"end":{"line":116,"column":88}},"20":{"start":{"line":117,"column":8},"end":{"line":117,"column":25}},"21":{"start":{"line":118,"column":8},"end":{"line":118,"column":29}},"22":{"start":{"line":122,"column":6},"end":{"line":138,"column":8}},"23":{"start":{"line":123,"column":8},"end":{"line":123,"column":35}},"24":{"start":{"line":123,"column":27},"end":{"line":123,"column":34}},"25":{"start":{"line":124,"column":8},"end":{"line":129,"column":9}},"26":{"start":{"line":125,"column":10},"end":{"line":125,"column":55}},"27":{"start":{"line":126,"column":10},"end":{"line":126,"column":30}},"28":{"start":{"line":127,"column":10},"end":{"line":127,"column":37}},"29":{"start":{"line":128,"column":10},"end":{"line":128,"column":31}},"30":{"start":{"line":130,"column":8},"end":{"line":134,"column":9}},"31":{"start":{"line":131,"column":10},"end":{"line":133,"column":11}},"32":{"start":{"line":132,"column":12},"end":{"line":132,"column":19}},"33":{"start":{"line":135,"column":8},"end":{"line":135,"column":30}},"34":{"start":{"line":136,"column":8},"end":{"line":136,"column":33}},"35":{"start":{"line":137,"column":8},"end":{"line":137,"column":19}},"36":{"start":{"line":141,"column":6},"end":{"line":144,"column":7}},"37":{"start":{"line":142,"column":8},"end":{"line":142,"column":57}},"38":{"start":{"line":143,"column":8},"end":{"line":143,"column":45}},"39":{"start":{"line":156,"column":6},"end":{"line":157,"column":34}},"40":{"start":{"line":159,"column":6},"end":{"line":163,"column":7}},"41":{"start":{"line":160,"column":8},"end":{"line":160,"column":77}},"42":{"start":{"line":161,"column":8},"end":{"line":161,"column":41}},"43":{"start":{"line":162,"column":8},"end":{"line":162,"column":29}},"44":{"start":{"line":166,"column":6},"end":{"line":182,"column":8}},"45":{"start":{"line":167,"column":8},"end":{"line":167,"column":38}},"46":{"start":{"line":167,"column":30},"end":{"line":167,"column":37}},"47":{"start":{"line":168,"column":8},"end":{"line":173,"column":9}},"48":{"start":{"line":169,"column":10},"end":{"line":169,"column":57}},"49":{"start":{"line":170,"column":10},"end":{"line":170,"column":33}},"50":{"start":{"line":171,"column":10},"end":{"line":171,"column":44}},"51":{"start":{"line":172,"column":10},"end":{"line":172,"column":31}},"52":{"start":{"line":174,"column":8},"end":{"line":178,"column":9}},"53":{"start":{"line":175,"column":10},"end":{"line":177,"column":11}},"54":{"start":{"line":176,"column":12},"end":{"line":176,"column":19}},"55":{"start":{"line":179,"column":8},"end":{"line":179,"column":31}},"56":{"start":{"line":180,"column":8},"end":{"line":180,"column":32}},"57":{"start":{"line":181,"column":8},"end":{"line":181,"column":19}},"58":{"start":{"line":185,"column":6},"end":{"line":185,"column":32}},"59":{"start":{"line":186,"column":6},"end":{"line":186,"column":23}},"60":{"start":{"line":187,"column":6},"end":{"line":189,"column":7}},"61":{"start":{"line":188,"column":8},"end":{"line":188,"column":51}},"62":{"start":{"line":199,"column":6},"end":{"line":201,"column":42}},"63":{"start":{"line":204,"column":6},"end":{"line":209,"column":7}},"64":{"start":{"line":205,"column":8},"end":{"line":207,"column":9}},"65":{"start":{"line":206,"column":10},"end":{"line":206,"column":84}},"66":{"start":{"line":208,"column":8},"end":{"line":208,"column":15}},"67":{"start":{"line":212,"column":6},"end":{"line":245,"column":7}},"68":{"start":{"line":213,"column":8},"end":{"line":213,"column":38}},"69":{"start":{"line":216,"column":8},"end":{"line":244,"column":9}},"70":{"start":{"line":217,"column":10},"end":{"line":227,"column":11}},"71":{"start":{"line":218,"column":12},"end":{"line":218,"column":59}},"72":{"start":{"line":221,"column":12},"end":{"line":226,"column":13}},"73":{"start":{"line":222,"column":14},"end":{"line":222,"column":45}},"74":{"start":{"line":225,"column":14},"end":{"line":225,"column":76}},"75":{"start":{"line":225,"column":36},"end":{"line":225,"column":67}},"76":{"start":{"line":231,"column":13},"end":{"line":244,"column":9}},"77":{"start":{"line":232,"column":10},"end":{"line":238,"column":11}},"78":{"start":{"line":233,"column":12},"end":{"line":233,"column":55}},"79":{"start":{"line":236,"column":12},"end":{"line":236,"column":38}},"80":{"start":{"line":237,"column":12},"end":{"line":237,"column":30}},"81":{"start":{"line":243,"column":10},"end":{"line":243,"column":69}},"82":{"start":{"line":255,"column":6},"end":{"line":255,"column":19}},"83":{"start":{"line":256,"column":6},"end":{"line":260,"column":9}},"84":{"start":{"line":257,"column":8},"end":{"line":259,"column":9}},"85":{"start":{"line":258,"column":10},"end":{"line":258,"column":43}},"86":{"start":{"line":272,"column":6},"end":{"line":273,"column":23}},"87":{"start":{"line":274,"column":6},"end":{"line":278,"column":7}},"88":{"start":{"line":275,"column":8},"end":{"line":275,"column":77}},"89":{"start":{"line":276,"column":8},"end":{"line":276,"column":27}},"90":{"start":{"line":277,"column":8},"end":{"line":277,"column":31}},"91":{"start":{"line":281,"column":6},"end":{"line":281,"column":49}},"92":{"start":{"line":285,"column":6},"end":{"line":292,"column":7}},"93":{"start":{"line":286,"column":8},"end":{"line":286,"column":51}},"94":{"start":{"line":287,"column":8},"end":{"line":287,"column":36}},"95":{"start":{"line":288,"column":8},"end":{"line":288,"column":69}},"96":{"start":{"line":289,"column":8},"end":{"line":291,"column":9}},"97":{"start":{"line":290,"column":10},"end":{"line":290,"column":59}},"98":{"start":{"line":295,"column":6},"end":{"line":300,"column":7}},"99":{"start":{"line":296,"column":8},"end":{"line":296,"column":25}},"100":{"start":{"line":298,"column":8},"end":{"line":298,"column":56}},"101":{"start":{"line":299,"column":8},"end":{"line":299,"column":43}},"102":{"start":{"line":301,"column":6},"end":{"line":301,"column":22}},"103":{"start":{"line":312,"column":6},"end":{"line":313,"column":35}},"104":{"start":{"line":316,"column":6},"end":{"line":330,"column":7}},"105":{"start":{"line":319,"column":8},"end":{"line":321,"column":9}},"106":{"start":{"line":320,"column":10},"end":{"line":320,"column":53}},"107":{"start":{"line":324,"column":8},"end":{"line":324,"column":55}},"108":{"start":{"line":328,"column":8},"end":{"line":328,"column":36}},"109":{"start":{"line":329,"column":8},"end":{"line":329,"column":21}},"110":{"start":{"line":340,"column":6},"end":{"line":341,"column":25}},"111":{"start":{"line":342,"column":6},"end":{"line":344,"column":7}},"112":{"start":{"line":343,"column":8},"end":{"line":343,"column":73}},"113":{"start":{"line":345,"column":6},"end":{"line":345,"column":34}}},"branchMap":{"1":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":16},"end":{"line":12,"column":28}},{"start":{"line":12,"column":32},"end":{"line":12,"column":53}}]},"2":{"line":16,"type":"cond-expr","locations":[{"start":{"line":16,"column":30},"end":{"line":16,"column":43}},{"start":{"line":16,"column":46},"end":{"line":16,"column":50}}]},"3":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"4":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":6},"end":{"line":89,"column":6}},{"start":{"line":89,"column":6},"end":{"line":89,"column":6}}]},"5":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":6},"end":{"line":115,"column":6}},{"start":{"line":115,"column":6},"end":{"line":115,"column":6}}]},"6":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":8},"end":{"line":123,"column":8}},{"start":{"line":123,"column":8},"end":{"line":123,"column":8}}]},"7":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":8},"end":{"line":124,"column":8}},{"start":{"line":124,"column":8},"end":{"line":124,"column":8}}]},"8":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":10},"end":{"line":131,"column":10}},{"start":{"line":131,"column":10},"end":{"line":131,"column":10}}]},"9":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":6},"end":{"line":159,"column":6}},{"start":{"line":159,"column":6},"end":{"line":159,"column":6}}]},"10":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":8},"end":{"line":167,"column":8}},{"start":{"line":167,"column":8},"end":{"line":167,"column":8}}]},"11":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":8},"end":{"line":168,"column":8}},{"start":{"line":168,"column":8},"end":{"line":168,"column":8}}]},"12":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":10},"end":{"line":175,"column":10}},{"start":{"line":175,"column":10},"end":{"line":175,"column":10}}]},"13":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":6},"end":{"line":204,"column":6}},{"start":{"line":204,"column":6},"end":{"line":204,"column":6}}]},"14":{"line":206,"type":"cond-expr","locations":[{"start":{"line":206,"column":44},"end":{"line":206,"column":48}},{"start":{"line":206,"column":51},"end":{"line":206,"column":56}}]},"15":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":8},"end":{"line":216,"column":8}},{"start":{"line":216,"column":8},"end":{"line":216,"column":8}}]},"16":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":10},"end":{"line":217,"column":10}},{"start":{"line":217,"column":10},"end":{"line":217,"column":10}}]},"17":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":12},"end":{"line":221,"column":12}},{"start":{"line":221,"column":12},"end":{"line":221,"column":12}}]},"18":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":13},"end":{"line":231,"column":13}},{"start":{"line":231,"column":13},"end":{"line":231,"column":13}}]},"19":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":10},"end":{"line":232,"column":10}},{"start":{"line":232,"column":10},"end":{"line":232,"column":10}}]},"20":{"line":243,"type":"cond-expr","locations":[{"start":{"line":243,"column":37},"end":{"line":243,"column":41}},{"start":{"line":243,"column":44},"end":{"line":243,"column":49}}]},"21":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":8},"end":{"line":257,"column":8}},{"start":{"line":257,"column":8},"end":{"line":257,"column":8}}]},"22":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":6},"end":{"line":274,"column":6}},{"start":{"line":274,"column":6},"end":{"line":274,"column":6}}]},"23":{"line":281,"type":"binary-expr","locations":[{"start":{"line":281,"column":15},"end":{"line":281,"column":33}},{"start":{"line":281,"column":37},"end":{"line":281,"column":48}}]},"24":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":6},"end":{"line":285,"column":6}},{"start":{"line":285,"column":6},"end":{"line":285,"column":6}}]},"25":{"line":286,"type":"cond-expr","locations":[{"start":{"line":286,"column":25},"end":{"line":286,"column":45}},{"start":{"line":286,"column":48},"end":{"line":286,"column":50}}]},"26":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":6},"end":{"line":316,"column":6}},{"start":{"line":316,"column":6},"end":{"line":316,"column":6}}]},"27":{"line":319,"type":"if","locations":[{"start":{"line":319,"column":8},"end":{"line":319,"column":8}},{"start":{"line":319,"column":8},"end":{"line":319,"column":8}}]}},"code":["// RecipeProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","","/* This class is evil.  You probably shouldn't use it. Or drink. Or drink while using it. */","/*jslint evil: true */","","(function(root){","","  // Module loading - this runs server-side only","  var Monitor = root.Monitor || require('../Monitor'),","      _ = Monitor._,","      Cron = Monitor.Cron,","      logger = Monitor.getLogger('RecipeProbe'),","      vm = Monitor.commonJS ? require('vm') : null,","      Probe = Monitor.Probe;","","  /**","  * Monitor automation probe","  *","  * The Recipe probe monitors other probes and runs instructions when the","  * probes change, and controls other probes based on these instructions.","  *","  * It contains a list of monitors to instantiate, and a script to run when the","  * monitor ```change``` event is fired.","  *","  * When the script fires, the monitors are available to the script by name.","  * The script can ```get()``` monitor values, ```set()``` writable monitor","  * values, and control the monitor using the ```control()`` method.","  *","  * The ```this``` variable is consistent between script runs, so state can be","  * maintained by setting attributes in ```this```.","  *","  * @class RecipeProbe","  * @extends Probe","  * @constructor","  * @param monitors {Object} - Named list of monitors to instantiate","  *   Key: monitor variable name, Value: Monitor model parameters","  * @param script {String} - JavaScript script to run.","  *   The script has access to ```console```, ```logger```, and all defined","  *   monitors by name.","  * @param [recipeName] {String} - Recipe name for logging","  * @param [autoStart=false] {boolean} - Call the start control on instantiation?","  * @param [triggeredBy] {Object} - Trigger the recipe by the items in the object.","  *        Items can include: 'interval', 'cron', and/or monitorName(s)","  *        If 'interval' is the key, the value is the interval in milliseconds","  *        If 'cron' is the key, the value is a string representing the cron pattern","  *        If any monitor name is the key, the value is the monitor event to trigger on.","  *        Example:","  *        triggeredBy: {","  *          interval: 5000,      // This triggers the recipe every 5 seconds","  *          cron: '* * * * * *', // [second] [minute] [hour] [day of month] [month] [day of week]","  *          myMonitor: 'change:someAttribute change:someOtherAttribute'","  *        }","  *        If triggeredBy isn't specified, any monitor change will trigger the recipe.","  * @param [started] {boolean} - Is the recipe started and currently active?","  */","  var RecipeProbe = Monitor.RecipeProbe = Probe.extend({","","    probeClass: 'Recipe',","    writableAttributes: [],","    defaults: {","      recipeName: '',","      monitors: {},","      script: '',","      autoStart: false,","      started: false,","      triggeredBy: null","    },","","    initialize: function(attributes, options){","      var t = this;","","      // Periodic triggers","      t.interval = null;","      t.cronJob = null;","","      // Precondition test","      if (_.size(t.get('monitors')) === 0) {","        logger.error('initialize', 'No monitors defined in the recipe');","        return;","      }","","      // This is a list of monitors (vs. monitor definitions)","      t.monitors = {};","","      // Auto start, calling the callback when started","      if (t.get('autoStart')) {","        options.asyncInit = true;","        t.start_control({}, options.callback);","      }","    },","","    release: function() {","      var t = this,","          args = arguments;","      t.stop_control({}, function(){","        Probe.prototype.release.apply(t, args);","      });","    },","","    /**","    * Start the recipe","    *","    * This connects to each monitor and sets up the recipe triggers","    *","    * @method start_control","    */","    start_control: function(params, callback) {","      var t = this,","          connectError = false,","          monitors = t.get('monitors');","","      if (t.get('started')) {","        var err = {code:'RUNNING', msg:'Cannot start - the recipe is already running.'};","        logger.warn(err);","        return callback(err);","      }","","      // Called when a monitor has connected","      var onConnect = function(error) {","        if (connectError) {return;}","        if (error) {","          var err = {code:'CONNECT_ERROR', err: error};","          connectError = true;","          logger.error('start', err);","          return callback(err);","        }","        for (var name1 in t.monitors) {","          if (!t.monitors[name1].isConnected()) {","            return;","          }","        }","        t.set({started:true});","        t.connectListeners(true);","        callback();","      };","","      // Connect all monitors","      for (var name2 in monitors) {","        t.monitors[name2] = new Monitor(monitors[name2]);","        t.monitors[name2].connect(onConnect);","      }","","    },","","    /**","    * Stop the recipe","    *","    * This disconnects each monitor","    *","    * @method stop_control","    */","    stop_control: function(params, callback) {","      var t = this,","          disconnectError = false;","","      if (!t.get('started')) {","        var err = {code:'NOT_RUNNING', msg:'The recipe is already stopped.'};","        logger.warn('precondition', err);","        return callback(err);","      }","","      // Called when a monitor has disconnected","      var onDisconnect = function(error) {","        if (disconnectError) {return;}","        if (error) {","          var err = {code:'DISONNECT_ERROR', err: error};","          disconnectError = true;","          logger.error('onDisconnect', err);","          return callback(err);","        }","        for (var name1 in t.monitors) {","          if (t.monitors[name1].isConnected()) {","            return;","          }","        }","        t.set({started:false});","        t.compiledScript = null;","        callback();","      };","","      // Disconnect all monitors","      t.connectListeners(false);","      t.context = null;","      for (var name2 in t.monitors) {","        t.monitors[name2].disconnect(onDisconnect);","      }","    },","","    /**","    * Connect the change listeners","    *","    * @private","    * @method connectListeners","    */","    connectListeners: function(connect) {","      var t = this,","          triggeredBy = t.get('triggeredBy'),","          onTrigger = t.onTrigger.bind(t);","","      // Default to listen on changes to all monitors","      if (!triggeredBy) {","        for (var monitorName in t.monitors) {","          t.monitors[monitorName][connect ? 'on' : 'off']('change', t.onTrigger, t);","        }","        return;","      }","","      // Process the elements in triggeredBy","      for (var name in triggeredBy) {","        var value = triggeredBy[name];","","        // Construct a new cron job","        if (name === 'cron') {","          if (connect) {","            t.cronJob = new Cron.CronJob(value, onTrigger);","          }","          else {","            if (t.cronJob.initiated) {","              clearInterval(t.CronJob.timer);","            }","            else {","              setTimeout(function(){clearInterval(t.cronJob.timer);}, 1000);","            }","          }","        }","","        // Set a polling interval","        else if (name === 'interval') {","          if (connect) {","            t.interval = setInterval(onTrigger, value);","          }","          else {","            clearInterval(t.interval);","            t.interval = null;","          }","        }","","        // Must be a monitor name","        else {","          t.monitors[name][connect ? 'on' : 'off'](value, onTrigger);","        }","      }","    },","","    /**","    * Called when a trigger is fired","    *","    * @private","    * @method onTrigger","    */","    onTrigger: function() {","      var t = this;","      t.run_control({}, function(error){","        if (error) {","          logger.error('onTrigger', error);","        }","      });","    },","","    /**","    * Run the recipe script","    *","    * This manually runs a started recipe.  The callback is called immediately","    * after executing the script.","    *","    * @method run_control","    */","    run_control: function(params, callback) {","      var t = this,","          error = null;","      if (!t.get('started')) {","        error = {code:'NOT_RUNNING', msg:'Cannot run - recipe not started.'};","        logger.warn(error);","        return callback(error);","      }","","      // Name the probe","      t.name = t.get('probeName') || t.get('id');","","      // Build a context to pass onto the script.  The context contains","      // a console, a logger, and each monitor by name.","      if (!t.context) {","        t.context = vm ? vm.createContext({}) : {};","        t.context.console = console;","        t.context.logger = Monitor.getLogger('Recipe.run.' + t.name);","        for (var monitorName in t.monitors) {","          t.context[monitorName] = t.monitors[monitorName];","        }","      }","","      // Run the script","      try {","        t.run(t.context);","      } catch(e) {","        error = \"Error running script: \" + e.toString();","        logger.error('run_control', error);","      }","      callback(error);","    },","","    /**","    * Execute the recipe.  This is a private method that can be overridden","    * in derived recipe classes that contain the recipe.","    *","    * @private","    * @method run","    */","    run: function(context) {","      var t = this,","          script = t.get('script');","","      // Run in a VM or exec (if running in a browser)","      if (vm) {","        // Compile the script on first run.  This throws an exception if","        // the script has a problem compiling.","        if (!t.compiledScript) {","          t.compiledScript = vm.createScript(script);","        }","","        // Execute the compiled script","        t.compiledScript.runInContext(context, t.name);","      }","      else {","        // Bring all context variables local, then execute the script","        eval(t.bringLocal(context));","        eval(script);","      }","    },","","    /**","    * Generate a script that brings context members into local scope","    *","    * @private","    * @method bringLocal","    */","    bringLocal: function(context) {","      var varName,","          localVars = [];","      for (varName in context) {","        localVars.push('var ' + varName + ' = context.' + varName + ';');","      }","      return localVars.join('\\n');","    }","","  });","","","}(this));",""],"l":{"9":1,"12":1,"59":1,"73":0,"76":0,"77":0,"80":0,"81":0,"82":0,"86":0,"89":0,"90":0,"91":0,"96":0,"98":0,"99":0,"111":0,"115":0,"116":0,"117":0,"118":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"130":0,"131":0,"132":0,"135":0,"136":0,"137":0,"141":0,"142":0,"143":0,"156":0,"159":0,"160":0,"161":0,"162":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"174":0,"175":0,"176":0,"179":0,"180":0,"181":0,"185":0,"186":0,"187":0,"188":0,"199":0,"204":0,"205":0,"206":0,"208":0,"212":0,"213":0,"216":0,"217":0,"218":0,"221":0,"222":0,"225":0,"231":0,"232":0,"233":0,"236":0,"237":0,"243":0,"255":0,"256":0,"257":0,"258":0,"272":0,"274":0,"275":0,"276":0,"277":0,"281":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"295":0,"296":0,"298":0,"299":0,"301":0,"312":0,"316":0,"319":0,"320":0,"324":0,"328":0,"329":0,"340":0,"342":0,"343":0,"345":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/PollingProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/PollingProbe.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[1,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":16},"end":{"line":52,"column":26}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":17},"end":{"line":56,"column":27}}},"4":{"name":"(anonymous_4)","line":78,"loc":{"start":{"line":78,"column":13},"end":{"line":78,"column":23}}},"5":{"name":"(anonymous_5)","line":83,"loc":{"start":{"line":83,"column":19},"end":{"line":83,"column":29}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":93,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":12,"column":34}},"3":{"start":{"line":15,"column":2},"end":{"line":15,"column":35}},"4":{"start":{"line":16,"column":2},"end":{"line":16,"column":43}},"5":{"start":{"line":47,"column":2},"end":{"line":91,"column":5}},"6":{"start":{"line":53,"column":6},"end":{"line":56,"column":39}},"7":{"start":{"line":56,"column":28},"end":{"line":56,"column":37}},"8":{"start":{"line":57,"column":6},"end":{"line":57,"column":53}},"9":{"start":{"line":61,"column":6},"end":{"line":63,"column":7}},"10":{"start":{"line":62,"column":8},"end":{"line":62,"column":45}},"11":{"start":{"line":66,"column":6},"end":{"line":66,"column":15}},"12":{"start":{"line":67,"column":6},"end":{"line":76,"column":7}},"13":{"start":{"line":68,"column":8},"end":{"line":75,"column":9}},"14":{"start":{"line":69,"column":10},"end":{"line":69,"column":52}},"15":{"start":{"line":71,"column":10},"end":{"line":73,"column":11}},"16":{"start":{"line":72,"column":12},"end":{"line":72,"column":68}},"17":{"start":{"line":74,"column":10},"end":{"line":74,"column":58}},"18":{"start":{"line":79,"column":6},"end":{"line":79,"column":68}},"19":{"start":{"line":80,"column":6},"end":{"line":86,"column":7}},"20":{"start":{"line":83,"column":8},"end":{"line":83,"column":70}},"21":{"start":{"line":83,"column":30},"end":{"line":83,"column":61}},"22":{"start":{"line":84,"column":13},"end":{"line":86,"column":7}},"23":{"start":{"line":85,"column":8},"end":{"line":85,"column":29}},"24":{"start":{"line":87,"column":6},"end":{"line":87,"column":30}},"25":{"start":{"line":88,"column":6},"end":{"line":88,"column":50}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":53}}]},"2":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":6},"end":{"line":61,"column":6}},{"start":{"line":61,"column":6},"end":{"line":61,"column":6}}]},"3":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":10},"end":{"line":61,"column":30}},{"start":{"line":61,"column":34},"end":{"line":61,"column":70}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":6},"end":{"line":67,"column":6}},{"start":{"line":67,"column":6},"end":{"line":67,"column":6}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"6":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":10},"end":{"line":71,"column":10}},{"start":{"line":71,"column":10},"end":{"line":71,"column":10}}]},"7":{"line":79,"type":"cond-expr","locations":[{"start":{"line":79,"column":41},"end":{"line":79,"column":56}},{"start":{"line":79,"column":59},"end":{"line":79,"column":66}}]},"8":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"9":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":10},"end":{"line":80,"column":19}},{"start":{"line":80,"column":23},"end":{"line":80,"column":43}}]},"10":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":13},"end":{"line":84,"column":13}},{"start":{"line":84,"column":13},"end":{"line":84,"column":13}}]}},"code":["// PollingProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading","  var Monitor = root.Monitor || require('../Monitor'),","      _ = Monitor._,","      Cron = Monitor.Cron,","      Probe = Monitor.Probe,","      Backbone = Monitor.Backbone;","","  // Constants","  var DEFAULT_POLL_INTERVAL = 1000;","  var DEFAULT_CRON_PATTERN = \"* * * * * *\";","","  /**","  * ## Base class for probes that require polling to detect and set model changes.","  *","  * The probe wakes up every polling interval and executes the poll() method","  * in the derived class.","  *","  * PollingProbes are instantiated with either a polling interval (in milliseconds)","  * or a cron pattern.  If the polling interval is set, that's what will be used.","  *","  * The cronPattern isn't available in browser-side probes.","  *","  * To disable polling, set the pollInterval to 0.","  *","  * More about cron formats, with examples","  * <ul>","  *   <li><a href=\"http://crontab.org/\">http://crontab.org/</a></li>","  *   <li><a href=\"http://en.wikipedia.org/wiki/Cron\">http://en.wikipedia.org/wiki/Cron</a></li></li>","  *   <li><a href=\"http://www.adminschoice.com/crontab-quick-reference\">http://www.adminschoice.com/crontab-quick-reference</a></li></li>","  * </ul>","  *","  * @class PollingProbe","  * @extends Probe","  * @constructor","  * @param [initParams] {Object} Probe initialization parameters","  *     @param [initParams.pollInterval] {Integer} Polling interval in milliseconds. Default: null","  *     @param [initParams.cronPattern] {String} Crontab syle polling pattern. Default once per second: \"* * * * * *\"","  *","  *   The format is: <i>[second] [minute] [hour] [day of month] [month] [day of week]</i>.<br>","  */","  var PollingProbe = Monitor.PollingProbe = Probe.extend({","    defaults: _.extend({}, Probe.prototype.defaults, {","      pollInterval: null,","      cronPattern: DEFAULT_CRON_PATTERN","    }),","    initialize: function(){","      var t = this,","          pollInterval = t.get('pollInterval'),","          cronPattern = t.get('cronPattern'),","          poll = function(){t.poll();};","      Probe.prototype.initialize.apply(t, arguments);","","      // Override cron for the default 1-second interval","      // (this allows the default to work when Cron isn't available)","      if (pollInterval == null && cronPattern === DEFAULT_CRON_PATTERN) {","        pollInterval = DEFAULT_POLL_INTERVAL;","      }","","      // Poll once, then set up the interval","      t.poll();","      if (pollInterval !== 0) {","        if (pollInterval) {","          t.timer = setInterval(poll, pollInterval);","        } else {","          if (!Cron) {","            throw new Error(\"Cron is not available in this client\");","          }","          t.cronJob = new Cron.CronJob(cronPattern, poll);","        }","      }","    },","    release: function(){","      var t = this, timer = (t.cronJob ? t.cronJob.timer : t.timer);","      if (t.cronJob && !t.cronJob.initiated) {","        // If cron isn't initiated we've been asked to shut down within the","        // first second, and the timer hasn't been set (but will be soon).","        setTimeout(function(){clearInterval(t.cronJob.timer);}, 1000);","      } else if (t.timer) {","        clearInterval(timer);","      }","      t.timer = t.cron = null;","      Probe.prototype.release.apply(t, arguments);","    }","","  });","","}(this));",""],"l":{"5":1,"8":1,"15":1,"16":1,"47":1,"53":0,"56":0,"57":0,"61":0,"62":0,"66":0,"67":0,"68":0,"69":0,"71":0,"72":0,"74":0,"79":0,"80":0,"83":0,"84":0,"85":0,"87":0,"88":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/StreamProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/StreamProbe.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"1":[1,1],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":48,"loc":{"start":{"line":48,"column":16},"end":{"line":48,"column":26}}},"3":{"name":"(anonymous_3)","line":72,"loc":{"start":{"line":72,"column":15},"end":{"line":72,"column":30}}},"4":{"name":"(anonymous_4)","line":88,"loc":{"start":{"line":88,"column":31},"end":{"line":88,"column":41}}},"5":{"name":"(anonymous_5)","line":101,"loc":{"start":{"line":101,"column":11},"end":{"line":101,"column":22}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":122,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":10,"column":20}},"3":{"start":{"line":13,"column":2},"end":{"line":13,"column":37}},"4":{"start":{"line":39,"column":2},"end":{"line":120,"column":5}},"5":{"start":{"line":49,"column":6},"end":{"line":49,"column":19}},"6":{"start":{"line":52,"column":6},"end":{"line":52,"column":53}},"7":{"start":{"line":55,"column":6},"end":{"line":55,"column":37}},"8":{"start":{"line":58,"column":6},"end":{"line":58,"column":19}},"9":{"start":{"line":59,"column":6},"end":{"line":59,"column":21}},"10":{"start":{"line":60,"column":6},"end":{"line":60,"column":25}},"11":{"start":{"line":73,"column":6},"end":{"line":75,"column":49}},"12":{"start":{"line":78,"column":6},"end":{"line":78,"column":25}},"13":{"start":{"line":81,"column":6},"end":{"line":92,"column":7}},"14":{"start":{"line":83,"column":8},"end":{"line":83,"column":18}},"15":{"start":{"line":87,"column":8},"end":{"line":91,"column":9}},"16":{"start":{"line":88,"column":10},"end":{"line":90,"column":43}},"17":{"start":{"line":89,"column":12},"end":{"line":89,"column":22}},"18":{"start":{"line":102,"column":6},"end":{"line":103,"column":27}},"19":{"start":{"line":106,"column":6},"end":{"line":106,"column":27}},"20":{"start":{"line":107,"column":6},"end":{"line":110,"column":9}},"21":{"start":{"line":113,"column":6},"end":{"line":113,"column":19}},"22":{"start":{"line":114,"column":6},"end":{"line":117,"column":7}},"23":{"start":{"line":115,"column":8},"end":{"line":115,"column":30}},"24":{"start":{"line":116,"column":8},"end":{"line":116,"column":23}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":53}}]},"2":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":6},"end":{"line":81,"column":6}},{"start":{"line":81,"column":6},"end":{"line":81,"column":6}}]},"3":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":8}},{"start":{"line":87,"column":8},"end":{"line":87,"column":8}}]},"4":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":6},"end":{"line":114,"column":6}},{"start":{"line":114,"column":6},"end":{"line":114,"column":6}}]}},"code":["// StreamProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading","  var Monitor = root.Monitor || require('../Monitor'),","      Probe = Monitor.Probe,","      _ = Monitor._;","","  // Constants","  var DEFAULT_BUNDLE_INTERVAL = 1000;","","  /**","  * Base class for probes that stream data","  *","  * Offering real time data streaming can result in degraded performance due","  * to the I/O overhead of sending individual stream elements to remote monitors.","  *","  * This class eases that overhead by bundling stream elements, and sending those","  * bundles in scheduled intervals.  The monitor gets to decide the interval based","  * on the stream volume, and their needs.","  *","  * Derived classes output their stream data as elements of the ```bundle```","  * attribute.","  *","  * A ```sequence``` attribute is incremented sequentially to assure change","  * events are fired, and to allow clients to insure stream ordering and","  * completeness.","  *","  * @class StreamProbe","  * @extends Probe","  * @constructor","  * @param [initParams] {Object} Probe initialization parameters","  *     @param [initParams.interval=1000] {Numeric} Number of milliseconds","  *         to wait between bundles.","  */","  var StreamProbe = Monitor.StreamProbe = Probe.extend({","","","    defaults: _.extend({}, Probe.prototype.defaults, {","      bundle: [],","      interval: DEFAULT_BUNDLE_INTERVAL,","      sequence: 0","    }),","","    initialize: function(){","      var t = this;","","      // Initialize parent","      Probe.prototype.initialize.apply(t, arguments);","","      // Moving the interval into an instance variable for performance","      t.interval = t.get('interval');","","      // Set up for the first bundle","      t.queue = [];","      t.timer = null;","      t.lastSendTime = 0;","    },","","    /**","    * Queue an item in the stream","    *","    * This method places the item into the stream and outputs it to the","    * monitor, or queues it up for the next bundle.","    *","    * @method queueItem","    * @param item {Any} Item to place into the queue","    */","    queueItem: function(item) {","      var t = this,","          now = Date.now(),","          msSinceLastSend = now - t.lastSendTime;","","      // Queue the item","      t.queue.push(item);","","      // Send the bundle?","      if (msSinceLastSend > t.interval) {","        // It's been a while since the last send.  Send it now.","        t._send();","      }","      else {","        // Start the timer if it's not already running","        if (!t.timer) {","          t.timer = setTimeout(function(){","            t._send();","          }, t.interval - msSinceLastSend);","        }","      }","    },","","    /**","    * Send the bundle to the montitor","    *","    * @private","    * @method _send","    */","    _send: function() {","      var t = this,","          now = Date.now();","","      // This kicks off the send","      t.lastSendTime = now;","      t.set({","        bundle: t.queue,","        sequence: t.get('sequence') + 1","      });","","      // Reset","      t.queue = [];","      if (t.timer) {","        clearTimeout(t.timer);","        t.timer = null;","      }","    }","","  });","","}(this));",""],"l":{"5":1,"8":1,"13":1,"39":1,"49":0,"52":0,"55":0,"58":0,"59":0,"60":0,"73":0,"78":0,"81":0,"83":0,"87":0,"88":0,"89":0,"102":0,"106":0,"107":0,"113":0,"114":0,"115":0,"116":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/InspectProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/InspectProbe.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0},"b":{"1":[1,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":1},"end":{"line":9,"column":15}}},"2":{"name":"(anonymous_2)","line":55,"loc":{"start":{"line":55,"column":16},"end":{"line":55,"column":36}}},"3":{"name":"(anonymous_3)","line":101,"loc":{"start":{"line":101,"column":17},"end":{"line":101,"column":43}}},"4":{"name":"(anonymous_4)","line":123,"loc":{"start":{"line":123,"column":13},"end":{"line":123,"column":24}}},"5":{"name":"(anonymous_5)","line":140,"loc":{"start":{"line":140,"column":18},"end":{"line":140,"column":45}}},"6":{"name":"(anonymous_6)","line":161,"loc":{"start":{"line":161,"column":15},"end":{"line":161,"column":35}}},"7":{"name":"(anonymous_7)","line":183,"loc":{"start":{"line":183,"column":10},"end":{"line":183,"column":21}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":194,"column":9}},"2":{"start":{"line":12,"column":2},"end":{"line":16,"column":42}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":24}},"4":{"start":{"line":49,"column":2},"end":{"line":192,"column":5}},"5":{"start":{"line":56,"column":6},"end":{"line":56,"column":19}},"6":{"start":{"line":59,"column":6},"end":{"line":59,"column":29}},"7":{"start":{"line":60,"column":6},"end":{"line":62,"column":7}},"8":{"start":{"line":61,"column":8},"end":{"line":61,"column":68}},"9":{"start":{"line":65,"column":6},"end":{"line":73,"column":7}},"10":{"start":{"line":66,"column":8},"end":{"line":70,"column":9}},"11":{"start":{"line":67,"column":10},"end":{"line":67,"column":22}},"12":{"start":{"line":69,"column":10},"end":{"line":69,"column":34}},"13":{"start":{"line":72,"column":8},"end":{"line":72,"column":35}},"14":{"start":{"line":77,"column":6},"end":{"line":77,"column":35}},"15":{"start":{"line":78,"column":6},"end":{"line":78,"column":52}},"16":{"start":{"line":81,"column":6},"end":{"line":84,"column":9}},"17":{"start":{"line":87,"column":6},"end":{"line":91,"column":7}},"18":{"start":{"line":88,"column":8},"end":{"line":88,"column":40}},"19":{"start":{"line":90,"column":8},"end":{"line":90,"column":62}},"20":{"start":{"line":102,"column":6},"end":{"line":102,"column":19}},"21":{"start":{"line":105,"column":6},"end":{"line":107,"column":7}},"22":{"start":{"line":106,"column":8},"end":{"line":106,"column":43}},"23":{"start":{"line":110,"column":6},"end":{"line":118,"column":7}},"24":{"start":{"line":111,"column":8},"end":{"line":111,"column":33}},"25":{"start":{"line":115,"column":8},"end":{"line":115,"column":52}},"26":{"start":{"line":116,"column":8},"end":{"line":116,"column":47}},"27":{"start":{"line":117,"column":8},"end":{"line":117,"column":36}},"28":{"start":{"line":119,"column":6},"end":{"line":119,"column":24}},"29":{"start":{"line":124,"column":6},"end":{"line":124,"column":19}},"30":{"start":{"line":125,"column":6},"end":{"line":129,"column":7}},"31":{"start":{"line":126,"column":8},"end":{"line":126,"column":41}},"32":{"start":{"line":128,"column":8},"end":{"line":128,"column":59}},"33":{"start":{"line":141,"column":6},"end":{"line":141,"column":19}},"34":{"start":{"line":144,"column":6},"end":{"line":144,"column":67}},"35":{"start":{"line":147,"column":6},"end":{"line":147,"column":42}},"36":{"start":{"line":150,"column":6},"end":{"line":150,"column":44}},"37":{"start":{"line":162,"column":6},"end":{"line":163,"column":23}},"38":{"start":{"line":166,"column":6},"end":{"line":172,"column":7}},"39":{"start":{"line":167,"column":8},"end":{"line":167,"column":33}},"40":{"start":{"line":169,"column":8},"end":{"line":169,"column":72}},"41":{"start":{"line":170,"column":8},"end":{"line":170,"column":38}},"42":{"start":{"line":171,"column":8},"end":{"line":171,"column":29}},"43":{"start":{"line":175,"column":6},"end":{"line":175,"column":19}},"44":{"start":{"line":184,"column":6},"end":{"line":185,"column":52}},"45":{"start":{"line":188,"column":6},"end":{"line":190,"column":7}},"46":{"start":{"line":189,"column":8},"end":{"line":189,"column":33}}},"branchMap":{"1":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":16},"end":{"line":12,"column":28}},{"start":{"line":12,"column":32},"end":{"line":12,"column":53}}]},"2":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":6}},{"start":{"line":60,"column":6},"end":{"line":60,"column":6}}]},"3":{"line":61,"type":"cond-expr","locations":[{"start":{"line":61,"column":48},"end":{"line":61,"column":56}},{"start":{"line":61,"column":59},"end":{"line":61,"column":67}}]},"4":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":6}},{"start":{"line":65,"column":6},"end":{"line":65,"column":6}}]},"5":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":66,"column":8}},{"start":{"line":66,"column":8},"end":{"line":66,"column":8}}]},"6":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":12},"end":{"line":66,"column":27}},{"start":{"line":66,"column":31},"end":{"line":66,"column":49}}]},"7":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":6},"end":{"line":87,"column":6}},{"start":{"line":87,"column":6},"end":{"line":87,"column":6}}]},"8":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":6},"end":{"line":105,"column":6}},{"start":{"line":105,"column":6},"end":{"line":105,"column":6}}]},"9":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":6},"end":{"line":110,"column":6}},{"start":{"line":110,"column":6},"end":{"line":110,"column":6}}]},"10":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":6},"end":{"line":125,"column":6}},{"start":{"line":125,"column":6},"end":{"line":125,"column":6}}]},"11":{"line":144,"type":"cond-expr","locations":[{"start":{"line":144,"column":45},"end":{"line":144,"column":58}},{"start":{"line":144,"column":61},"end":{"line":144,"column":66}}]},"12":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":6},"end":{"line":188,"column":6}},{"start":{"line":188,"column":6},"end":{"line":188,"column":6}}]}},"code":["// InspectProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","","/* This class is evil.  You probably shouldn't use it.  Or drink.  Or drink while using it. */","/*jslint evil: true */","","(function(root){","","  // Module loading - this runs server-side only","  var Monitor = root.Monitor || require('../Monitor'),","      _ = Monitor._,","      logger = Monitor.getLogger('InspectProbe'),","      Backbone = Monitor.Backbone,","      PollingProbe = Monitor.PollingProbe;","","  // Constants","  var DEFAULT_DEPTH = 2;","","  /**","  * Inspect and manipulate variables on the monitored server.","  *","  * This class monitors the variable specified by the key.","  *","  * The key is evaluated to determine the variable to monitor, so it may","  * be a complex key starting at global scope.  If the key isn't","  * specified, it monitors all variables in the global scope.","  *","  * If the key points to an object of type Backbone.Model, this probe","  * will update the value in real time, triggered on the *change* event.","  * Otherwise it will update the value as it notices changes, while polling","  * on the specified polling interval (default: 1 second).","  *","  * @class InspectProbe","  * @extends PollingProbe","  * @constructor","  * @param [initParams] - Initialization parameters","  *     @param [initParams.key=null] {String} A global variable name or expression","  *     @param [initParams.depth=2] {Integer} If the key points to an object, this","  *       is the depth to traverse the object for changes.  Default=2, or 1 if","  *       key='window'.","  *     @param [initParams.pollInterval] {Integer} (from <a href=\"PollingProbe.html\">PollingProbe</a>) Polling interval in milliseconds. Default: null","  *     @param [initParams.cronPattern] {String} (from <a href=\"PollingProbe.html\">PollingProbe</a>) Crontab syle polling pattern. Default once per second: \"* * * * * *\"","  * @param model - Monitor data model elements","  *     @param model.value - The value of the element being inspected","  *     @param model.isModel - Is the value a Backbone.Model?","  */","  var InspectProbe = Monitor.InspectProbe = PollingProbe.extend({","","    // These are required for Probes","    probeClass: 'Inspect',","    writableAttributes: ['value'],","","    initialize: function(initParams){","      var t = this;","","      // Get the global object if the key isn't specified","      t.key = initParams.key;","      if (typeof initParams.key === 'undefined') {","        t.key = typeof window === 'undefined' ? 'global' : 'window';","      }","","      // Get a good depth default.  Default unless key = window.","      if (typeof initParams.depth === 'undefined') {","        if (!initParams.key && t.key === 'window') {","          t.depth = 1;","        } else {","          t.depth = DEFAULT_DEPTH;","        }","      } else {","        t.depth = initParams.depth;","      }","","      // Evaluate the expression to see if it's a Backbone.Model","      // This will throw an exception if the key is a bad expression","      t.value = t._evaluate(t.key);","      t.isModel = t.value instanceof Backbone.Model;","","      // Set the initial values","      t.set({","        value: Monitor.deepCopy(t.value, t.depth),","        isModel: t.isModel","      });","","      // Watch for backbone model changes, or initialize the polling probe","      if (t.isModel) {","        t.value.on('change', t.poll, t);","      } else {","        PollingProbe.prototype.initialize.apply(t, arguments);","      }","    },","","    /**","    * Remotely set the inspected variable's value","    *","    * @method set_control","    * @param attrs {Object} Name/Value attributes to set.  All must be writable.","    * @param callback {Function(error)} Called when the attributes are set or error","    */","    set_control: function(attrs, callback) {","      var t = this;","","      // Value is the only thing to set","      if (typeof attrs.value === 'undefined') {","        return callback({code:'NO_VALUE'});","      }","","      // Set the model elements.  These cause change events to fire","      if (t.isModel) {","        t.value.set(attrs.value);","      }","      else {","        // Set the variable directly","        var jsonValue = JSON.stringify(attrs.value);","        t._evaluate(t.key + ' = ' + jsonValue);","        t.set('value', attrs.value);","      }","      return callback();","    },","","    // Stop watching for change events or polling","    release: function() {","      var t = this;","      if (t.isModel) {","        t.value.off('change', t.poll, t);","      } else {","        PollingProbe.prototype.release.apply(t, arguments);","      }","    },","","    /**","    * Evaluate an expression, returning the depth-limited results","    *","    * @method eval_control","    * @param expression {String} Expression to evaluate","    * @param [depth=2] {Integer} Depth of the object to return","    * @return value {Mixed} Returns the depth-limited value","    */","    eval_control: function(expression, depth){","      var t = this;","","      // Determine a default depth","      depth = typeof depth === 'undefined' ? DEFAULT_DEPTH : depth;","","      // Get the raw value","      var value = t._evaluate(expression);","","      // Return the depth limited results","      return Monitor.deepCopy(value, depth);","    },","","    /**","    * Evaluate an expression, returning the raw results","    *","    * @protected","    * @method _evaluate","    * @param expression {String} Expression to evaluate","    * @return value {Mixed} Returns the expression value","    */","    _evaluate: function(expression){","      var t = this,","          value = null;","","      // Evaluate the expression","      try {","        value = eval(expression);","      } catch (e) {","        var err = 'Unable to evaluate expression: \"' + expression + '\"';","        logger.error('evaluate', err);","        throw new Error(err);","      }","","      // Return the value","      return value;","    },","","    /**","    * Poll for changes in the evaluation","    *","    * @method poll","    */","    poll: function() {","      var t = this,","          newValue = t.eval_control(t.key, t.depth);","","      // Set the new value if it has changed from the current value","      if (!_.isEqual(newValue, t.get('value'))) {","        t.set({value: newValue});","      }","    }","  });","","}(this));",""],"l":{"9":1,"12":1,"19":1,"49":1,"56":0,"59":0,"60":0,"61":0,"65":0,"66":0,"67":0,"69":0,"72":0,"77":0,"78":0,"81":0,"87":0,"88":0,"90":0,"102":0,"105":0,"106":0,"110":0,"111":0,"115":0,"116":0,"117":0,"119":0,"124":0,"125":0,"126":0,"128":0,"141":0,"144":0,"147":0,"150":0,"162":0,"166":0,"167":0,"169":0,"170":0,"171":0,"175":0,"184":0,"188":0,"189":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/StatProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/StatProbe.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[1,1]},"f":{"1":1,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":16}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":16},"end":{"line":44,"column":26}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":18},"end":{"line":51,"column":29}}},"4":{"name":"(anonymous_4)","line":60,"loc":{"start":{"line":60,"column":13},"end":{"line":60,"column":24}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":67,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":11,"column":26}},"3":{"start":{"line":14,"column":2},"end":{"line":14,"column":28}},"4":{"start":{"line":36,"column":2},"end":{"line":65,"column":5}},"5":{"start":{"line":45,"column":6},"end":{"line":45,"column":19}},"6":{"start":{"line":48,"column":6},"end":{"line":48,"column":59}},"7":{"start":{"line":51,"column":6},"end":{"line":56,"column":8}},"8":{"start":{"line":53,"column":8},"end":{"line":53,"column":44}},"9":{"start":{"line":54,"column":8},"end":{"line":54,"column":69}},"10":{"start":{"line":55,"column":8},"end":{"line":55,"column":38}},"11":{"start":{"line":57,"column":6},"end":{"line":57,"column":43}},"12":{"start":{"line":61,"column":6},"end":{"line":61,"column":19}},"13":{"start":{"line":62,"column":6},"end":{"line":62,"column":44}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":53}}]}},"code":["// StatProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root) {","","  // Module loading - this runs server-side only","  var Monitor = root.Monitor || require('../Monitor'),","      _ = Monitor._,","      StreamProbe = Monitor.StreamProbe,","      Stat = Monitor.Stat;","","  // Constants","  var DEFAULT_PATTERN = '*';","","  /**","  * Remote application statistics monitoring","  *","  * This probe forwards application statistics to the monitor.","  *","  * @class StatProbe","  * @extends StreamProbe","  * @constructor","  * @param [initParams] {Object} Probe initialization parameters","  *     @param [initParams.pattern=*] {String} Stat name pattern to monitor (see <a href=\"Stat.html\">Stat</a>)","  *     @param [initParams.interval=1000] {Numeric} Queue interval (see <a href=\"StreamProbe.html\">StreamProbe</a>)","  * @param model {Object} Monitor data model elements","  *     @param model.bundle {Stat array} Array of Stat elements.","  *         @param model.bundle.timestamp {String} Timestamp of the stat entry","  *         @param model.bundle.module {String} Stat module","  *         @param model.bundle.name {String} Stat name","  *         @param model.bundle.value {Numeric} Stat value","  *         @param model.bundle.type {String} 'c'ounter, 'g'ague, or 'ms'timer","  *     @param model.sequence {Integer} A numeric incrementer causing a change event","  */","  var StatProbe = Monitor.StatProbe = StreamProbe.extend({","","    probeClass: 'Stat',","","    defaults: _.extend({}, StreamProbe.prototype.defaults, {","      pattern: DEFAULT_PATTERN","    }),","","    initialize: function(){","      var t = this;","","      // Call parent constructor","      StreamProbe.prototype.initialize.apply(t, arguments);","","      // The watcher just forwards all args to queueItem as an array","      t.watcher = function() {","        // Add timestamp as the first element","        var logElems = _.toArray(arguments);","        logElems.splice(0,0,JSON.stringify(new Date()).substr(1,24));","        t.queueItem.call(t, logElems);","      };","      Stat.on(t.get('pattern'), t.watcher);","    },","","    release: function() {","      var t = this;","      Stat.off(t.get('pattern'), t.watcher);","    }","","  });","","}(this));",""],"l":{"5":1,"8":1,"14":1,"36":1,"45":0,"48":0,"51":0,"53":0,"54":0,"55":0,"57":0,"61":0,"62":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/LogProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/LogProbe.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[1,1]},"f":{"1":1,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":16}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":16},"end":{"line":44,"column":26}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":18},"end":{"line":51,"column":29}}},"4":{"name":"(anonymous_4)","line":60,"loc":{"start":{"line":60,"column":13},"end":{"line":60,"column":24}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":67,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":11,"column":24}},"3":{"start":{"line":14,"column":2},"end":{"line":14,"column":28}},"4":{"start":{"line":36,"column":2},"end":{"line":65,"column":5}},"5":{"start":{"line":45,"column":6},"end":{"line":45,"column":19}},"6":{"start":{"line":48,"column":6},"end":{"line":48,"column":59}},"7":{"start":{"line":51,"column":6},"end":{"line":56,"column":8}},"8":{"start":{"line":53,"column":8},"end":{"line":53,"column":44}},"9":{"start":{"line":54,"column":8},"end":{"line":54,"column":69}},"10":{"start":{"line":55,"column":8},"end":{"line":55,"column":38}},"11":{"start":{"line":57,"column":6},"end":{"line":57,"column":42}},"12":{"start":{"line":61,"column":6},"end":{"line":61,"column":19}},"13":{"start":{"line":62,"column":6},"end":{"line":62,"column":43}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":53}}]}},"code":["// LogProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root) {","","  // Module loading - this runs server-side only","  var Monitor = root.Monitor || require('../Monitor'),","      _ = Monitor._,","      StreamProbe = Monitor.StreamProbe,","      Log = Monitor.Log;","","  // Constants","  var DEFAULT_PATTERN = '*';","","  /**","  * Remote application log monitoring","  *","  * This probe forwards application logs to the monitor.","  *","  * @class LogProbe","  * @extends StreamProbe","  * @constructor","  * @param [initParams] {Object} Probe initialization parameters","  *     @param [initParams.pattern=*] {String} Log name pattern to monitor (see <a href=\"Log.html\">Log</a>)","  *     @param [initParams.interval=1000] {Numeric} Queue interval (see <a href=\"StreamProbe.html\">StreamProbe</a>)","  * @param model {Object} Monitor data model elements","  *     @param model.bundle {Log array} Array of Log elements.","  *         @param model.bundle.timestamp {String} Timestamp of the log statement","  *         @param model.bundle.logType {String} Log type (error, info, etc)","  *         @param model.bundle.module {String} Module that emitted the log","  *         @param model.bundle.name {String} Log entry name","  *         @param model.bundle.args {any[]} Arguments to the log statement","  *     @param model.sequence {Integer} A numeric incrementer causing a change event","  */","  var LogProbe = Monitor.LogProbe = StreamProbe.extend({","","    probeClass: 'Log',","","    defaults: _.extend({}, StreamProbe.prototype.defaults, {","      pattern: DEFAULT_PATTERN","    }),","","    initialize: function(){","      var t = this;","","      // Call parent constructor","      StreamProbe.prototype.initialize.apply(t, arguments);","","      // The watcher just forwards all args to queueItem as an array","      t.watcher = function() {","        // Add timestamp as the first element","        var logElems = _.toArray(arguments);","        logElems.splice(0,0,JSON.stringify(new Date()).substr(1,24));","        t.queueItem.call(t, logElems);","      };","      Log.on(t.get('pattern'), t.watcher);","    },","","    release: function() {","      var t = this;","      Log.off(t.get('pattern'), t.watcher);","    }","","  });","","}(this));",""],"l":{"5":1,"8":1,"14":1,"36":1,"45":0,"48":0,"51":0,"53":0,"54":0,"55":0,"57":0,"61":0,"62":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/FileProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/FileProbe.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0},"b":{"1":[1,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":79,"loc":{"start":{"line":79,"column":16},"end":{"line":79,"column":45}}},"3":{"name":"(anonymous_3)","line":107,"loc":{"start":{"line":107,"column":19},"end":{"line":107,"column":47}}},"4":{"name":"(anonymous_4)","line":127,"loc":{"start":{"line":127,"column":13},"end":{"line":127,"column":24}}},"5":{"name":"(anonymous_5)","line":164,"loc":{"start":{"line":164,"column":20},"end":{"line":164,"column":54}}},"6":{"name":"(anonymous_6)","line":179,"loc":{"start":{"line":179,"column":39},"end":{"line":179,"column":65}}},"7":{"name":"(anonymous_7)","line":185,"loc":{"start":{"line":185,"column":17},"end":{"line":185,"column":27}}},"8":{"name":"(anonymous_8)","line":190,"loc":{"start":{"line":190,"column":31},"end":{"line":190,"column":52}}},"9":{"name":"(anonymous_9)","line":204,"loc":{"start":{"line":204,"column":13},"end":{"line":204,"column":24}}},"10":{"name":"(anonymous_10)","line":251,"loc":{"start":{"line":251,"column":24},"end":{"line":251,"column":58}}},"11":{"name":"(anonymous_11)","line":262,"loc":{"start":{"line":262,"column":23},"end":{"line":262,"column":34}}},"12":{"name":"(anonymous_12)","line":263,"loc":{"start":{"line":263,"column":42},"end":{"line":263,"column":62}}},"13":{"name":"(anonymous_13)","line":294,"loc":{"start":{"line":294,"column":19},"end":{"line":294,"column":30}}},"14":{"name":"(anonymous_14)","line":310,"loc":{"start":{"line":310,"column":22},"end":{"line":310,"column":56}}},"15":{"name":"(anonymous_15)","line":317,"loc":{"start":{"line":317,"column":27},"end":{"line":317,"column":37}}},"16":{"name":"(anonymous_16)","line":321,"loc":{"start":{"line":321,"column":28},"end":{"line":321,"column":43}}},"17":{"name":"(anonymous_17)","line":330,"loc":{"start":{"line":330,"column":38},"end":{"line":330,"column":53}}},"18":{"name":"(anonymous_18)","line":353,"loc":{"start":{"line":353,"column":20},"end":{"line":353,"column":45}}},"19":{"name":"(anonymous_19)","line":356,"loc":{"start":{"line":356,"column":27},"end":{"line":356,"column":37}}},"20":{"name":"(anonymous_20)","line":357,"loc":{"start":{"line":357,"column":31},"end":{"line":357,"column":51}}},"21":{"name":"(anonymous_21)","line":366,"loc":{"start":{"line":366,"column":25},"end":{"line":366,"column":47}}},"22":{"name":"(anonymous_22)","line":379,"loc":{"start":{"line":379,"column":24},"end":{"line":379,"column":44}}},"23":{"name":"(anonymous_23)","line":380,"loc":{"start":{"line":380,"column":55},"end":{"line":380,"column":69}}},"24":{"name":"(anonymous_24)","line":412,"loc":{"start":{"line":412,"column":26},"end":{"line":412,"column":45}}},"25":{"name":"(anonymous_25)","line":430,"loc":{"start":{"line":430,"column":26},"end":{"line":430,"column":37}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":434,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":12,"column":29}},"3":{"start":{"line":15,"column":2},"end":{"line":15,"column":23}},"4":{"start":{"line":74,"column":2},"end":{"line":135,"column":5}},"5":{"start":{"line":80,"column":6},"end":{"line":80,"column":19}},"6":{"start":{"line":81,"column":6},"end":{"line":81,"column":53}},"7":{"start":{"line":84,"column":6},"end":{"line":86,"column":7}},"8":{"start":{"line":85,"column":8},"end":{"line":85,"column":75}},"9":{"start":{"line":89,"column":6},"end":{"line":89,"column":55}},"10":{"start":{"line":90,"column":6},"end":{"line":92,"column":7}},"11":{"start":{"line":91,"column":8},"end":{"line":91,"column":45}},"12":{"start":{"line":95,"column":6},"end":{"line":95,"column":31}},"13":{"start":{"line":96,"column":6},"end":{"line":96,"column":38}},"14":{"start":{"line":99,"column":6},"end":{"line":124,"column":7}},"15":{"start":{"line":102,"column":8},"end":{"line":102,"column":96}},"16":{"start":{"line":107,"column":8},"end":{"line":116,"column":10}},"17":{"start":{"line":108,"column":10},"end":{"line":108,"column":46}},"18":{"start":{"line":109,"column":10},"end":{"line":109,"column":70}},"19":{"start":{"line":112,"column":10},"end":{"line":115,"column":11}},"20":{"start":{"line":113,"column":12},"end":{"line":113,"column":28}},"21":{"start":{"line":114,"column":12},"end":{"line":114,"column":28}},"22":{"start":{"line":119,"column":8},"end":{"line":122,"column":10}},"23":{"start":{"line":123,"column":8},"end":{"line":123,"column":75}},"24":{"start":{"line":128,"column":6},"end":{"line":128,"column":19}},"25":{"start":{"line":129,"column":6},"end":{"line":131,"column":7}},"26":{"start":{"line":130,"column":8},"end":{"line":130,"column":26}},"27":{"start":{"line":132,"column":6},"end":{"line":132,"column":50}},"28":{"start":{"line":164,"column":2},"end":{"line":212,"column":4}},"29":{"start":{"line":167,"column":4},"end":{"line":170,"column":5}},"30":{"start":{"line":168,"column":6},"end":{"line":168,"column":25}},"31":{"start":{"line":169,"column":6},"end":{"line":169,"column":19}},"32":{"start":{"line":171,"column":4},"end":{"line":171,"column":71}},"33":{"start":{"line":172,"column":4},"end":{"line":172,"column":50}},"34":{"start":{"line":175,"column":4},"end":{"line":175,"column":23}},"35":{"start":{"line":176,"column":4},"end":{"line":200,"column":5}},"36":{"start":{"line":178,"column":6},"end":{"line":187,"column":7}},"37":{"start":{"line":179,"column":8},"end":{"line":181,"column":11}},"38":{"start":{"line":180,"column":10},"end":{"line":180,"column":26}},"39":{"start":{"line":184,"column":8},"end":{"line":186,"column":10}},"40":{"start":{"line":190,"column":6},"end":{"line":199,"column":9}},"41":{"start":{"line":192,"column":8},"end":{"line":194,"column":9}},"42":{"start":{"line":193,"column":10},"end":{"line":193,"column":36}},"43":{"start":{"line":195,"column":8},"end":{"line":197,"column":9}},"44":{"start":{"line":196,"column":10},"end":{"line":196,"column":17}},"45":{"start":{"line":198,"column":8},"end":{"line":198,"column":34}},"46":{"start":{"line":203,"column":4},"end":{"line":211,"column":6}},"47":{"start":{"line":205,"column":8},"end":{"line":209,"column":9}},"48":{"start":{"line":206,"column":10},"end":{"line":206,"column":26}},"49":{"start":{"line":208,"column":10},"end":{"line":208,"column":31}},"50":{"start":{"line":251,"column":2},"end":{"line":280,"column":4}},"51":{"start":{"line":254,"column":4},"end":{"line":257,"column":5}},"52":{"start":{"line":255,"column":6},"end":{"line":255,"column":25}},"53":{"start":{"line":256,"column":6},"end":{"line":256,"column":19}},"54":{"start":{"line":258,"column":4},"end":{"line":258,"column":73}},"55":{"start":{"line":259,"column":4},"end":{"line":259,"column":50}},"56":{"start":{"line":262,"column":4},"end":{"line":271,"column":6}},"57":{"start":{"line":263,"column":6},"end":{"line":270,"column":9}},"58":{"start":{"line":264,"column":8},"end":{"line":267,"column":9}},"59":{"start":{"line":266,"column":10},"end":{"line":266,"column":31}},"60":{"start":{"line":269,"column":8},"end":{"line":269,"column":40}},"61":{"start":{"line":274,"column":4},"end":{"line":276,"column":5}},"62":{"start":{"line":275,"column":6},"end":{"line":275,"column":21}},"63":{"start":{"line":279,"column":4},"end":{"line":279,"column":56}},"64":{"start":{"line":294,"column":2},"end":{"line":297,"column":4}},"65":{"start":{"line":295,"column":4},"end":{"line":295,"column":36}},"66":{"start":{"line":310,"column":2},"end":{"line":341,"column":4}},"67":{"start":{"line":313,"column":4},"end":{"line":316,"column":5}},"68":{"start":{"line":314,"column":6},"end":{"line":314,"column":22}},"69":{"start":{"line":315,"column":6},"end":{"line":315,"column":18}},"70":{"start":{"line":317,"column":4},"end":{"line":317,"column":40}},"71":{"start":{"line":318,"column":4},"end":{"line":318,"column":25}},"72":{"start":{"line":321,"column":4},"end":{"line":340,"column":7}},"73":{"start":{"line":324,"column":6},"end":{"line":326,"column":7}},"74":{"start":{"line":325,"column":8},"end":{"line":325,"column":30}},"75":{"start":{"line":329,"column":6},"end":{"line":329,"column":41}},"76":{"start":{"line":330,"column":6},"end":{"line":339,"column":9}},"77":{"start":{"line":333,"column":8},"end":{"line":335,"column":9}},"78":{"start":{"line":334,"column":10},"end":{"line":334,"column":51}},"79":{"start":{"line":338,"column":8},"end":{"line":338,"column":23}},"80":{"start":{"line":353,"column":2},"end":{"line":400,"column":4}},"81":{"start":{"line":356,"column":4},"end":{"line":356,"column":40}},"82":{"start":{"line":357,"column":4},"end":{"line":399,"column":7}},"83":{"start":{"line":358,"column":6},"end":{"line":360,"column":7}},"84":{"start":{"line":359,"column":8},"end":{"line":359,"column":29}},"85":{"start":{"line":363,"column":6},"end":{"line":397,"column":7}},"86":{"start":{"line":366,"column":8},"end":{"line":391,"column":11}},"87":{"start":{"line":367,"column":10},"end":{"line":369,"column":11}},"88":{"start":{"line":368,"column":12},"end":{"line":368,"column":34}},"89":{"start":{"line":372,"column":10},"end":{"line":374,"column":11}},"90":{"start":{"line":373,"column":12},"end":{"line":373,"column":30}},"91":{"start":{"line":377,"column":10},"end":{"line":377,"column":37}},"92":{"start":{"line":378,"column":10},"end":{"line":378,"column":31}},"93":{"start":{"line":379,"column":10},"end":{"line":390,"column":13}},"94":{"start":{"line":380,"column":12},"end":{"line":389,"column":15}},"95":{"start":{"line":381,"column":14},"end":{"line":381,"column":44}},"96":{"start":{"line":382,"column":14},"end":{"line":388,"column":15}},"97":{"start":{"line":383,"column":16},"end":{"line":385,"column":17}},"98":{"start":{"line":384,"column":18},"end":{"line":384,"column":45}},"99":{"start":{"line":387,"column":16},"end":{"line":387,"column":41}},"100":{"start":{"line":396,"column":8},"end":{"line":396,"column":41}},"101":{"start":{"line":412,"column":2},"end":{"line":418,"column":4}},"102":{"start":{"line":413,"column":4},"end":{"line":413,"column":46}},"103":{"start":{"line":414,"column":4},"end":{"line":416,"column":5}},"104":{"start":{"line":415,"column":6},"end":{"line":415,"column":74}},"105":{"start":{"line":417,"column":4},"end":{"line":417,"column":27}},"106":{"start":{"line":430,"column":2},"end":{"line":432,"column":4}},"107":{"start":{"line":431,"column":4},"end":{"line":431,"column":21}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":53}}]},"2":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":6}},{"start":{"line":84,"column":6},"end":{"line":84,"column":6}}]},"3":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":6},"end":{"line":90,"column":6}},{"start":{"line":90,"column":6},"end":{"line":90,"column":6}}]},"4":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":6},"end":{"line":99,"column":6}},{"start":{"line":99,"column":6},"end":{"line":99,"column":6}}]},"5":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":10},"end":{"line":112,"column":10}},{"start":{"line":112,"column":10},"end":{"line":112,"column":10}}]},"6":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":6},"end":{"line":129,"column":6}},{"start":{"line":129,"column":6},"end":{"line":129,"column":6}}]},"7":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":4},"end":{"line":167,"column":4}},{"start":{"line":167,"column":4},"end":{"line":167,"column":4}}]},"8":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":4},"end":{"line":176,"column":4}},{"start":{"line":176,"column":4},"end":{"line":176,"column":4}}]},"9":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":8},"end":{"line":176,"column":16}},{"start":{"line":176,"column":20},"end":{"line":176,"column":35}}]},"10":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":8},"end":{"line":192,"column":8}},{"start":{"line":192,"column":8},"end":{"line":192,"column":8}}]},"11":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":8},"end":{"line":195,"column":8}},{"start":{"line":195,"column":8},"end":{"line":195,"column":8}}]},"12":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":8},"end":{"line":205,"column":8}},{"start":{"line":205,"column":8},"end":{"line":205,"column":8}}]},"13":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":4},"end":{"line":254,"column":4}},{"start":{"line":254,"column":4},"end":{"line":254,"column":4}}]},"14":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":8},"end":{"line":264,"column":8}},{"start":{"line":264,"column":8},"end":{"line":264,"column":8}}]},"15":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":4},"end":{"line":274,"column":4}},{"start":{"line":274,"column":4},"end":{"line":274,"column":4}}]},"16":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":4},"end":{"line":313,"column":4}},{"start":{"line":313,"column":4},"end":{"line":313,"column":4}}]},"17":{"line":317,"type":"binary-expr","locations":[{"start":{"line":317,"column":15},"end":{"line":317,"column":23}},{"start":{"line":317,"column":27},"end":{"line":317,"column":39}}]},"18":{"line":318,"type":"binary-expr","locations":[{"start":{"line":318,"column":11},"end":{"line":318,"column":15}},{"start":{"line":318,"column":19},"end":{"line":318,"column":24}}]},"19":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":6},"end":{"line":324,"column":6}},{"start":{"line":324,"column":6},"end":{"line":324,"column":6}}]},"20":{"line":324,"type":"binary-expr","locations":[{"start":{"line":324,"column":10},"end":{"line":324,"column":15}},{"start":{"line":324,"column":19},"end":{"line":324,"column":41}}]},"21":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":8},"end":{"line":333,"column":8}},{"start":{"line":333,"column":8},"end":{"line":333,"column":8}}]},"22":{"line":356,"type":"binary-expr","locations":[{"start":{"line":356,"column":15},"end":{"line":356,"column":23}},{"start":{"line":356,"column":27},"end":{"line":356,"column":39}}]},"23":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":6},"end":{"line":358,"column":6}},{"start":{"line":358,"column":6},"end":{"line":358,"column":6}}]},"24":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":6},"end":{"line":363,"column":6}},{"start":{"line":363,"column":6},"end":{"line":363,"column":6}}]},"25":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":10},"end":{"line":367,"column":10}},{"start":{"line":367,"column":10},"end":{"line":367,"column":10}}]},"26":{"line":372,"type":"if","locations":[{"start":{"line":372,"column":10},"end":{"line":372,"column":10}},{"start":{"line":372,"column":10},"end":{"line":372,"column":10}}]},"27":{"line":381,"type":"binary-expr","locations":[{"start":{"line":381,"column":26},"end":{"line":381,"column":30}},{"start":{"line":381,"column":34},"end":{"line":381,"column":43}}]},"28":{"line":382,"type":"if","locations":[{"start":{"line":382,"column":14},"end":{"line":382,"column":14}},{"start":{"line":382,"column":14},"end":{"line":382,"column":14}}]},"29":{"line":383,"type":"if","locations":[{"start":{"line":383,"column":16},"end":{"line":383,"column":16}},{"start":{"line":383,"column":16},"end":{"line":383,"column":16}}]},"30":{"line":414,"type":"if","locations":[{"start":{"line":414,"column":4},"end":{"line":414,"column":4}},{"start":{"line":414,"column":4},"end":{"line":414,"column":4}}]},"31":{"line":414,"type":"binary-expr","locations":[{"start":{"line":414,"column":8},"end":{"line":414,"column":17}},{"start":{"line":414,"column":21},"end":{"line":414,"column":45}}]}},"code":["// FileProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading - this runs server-side only","  var Monitor = root.Monitor || require('../Monitor'),","      _ = Monitor._,","      Probe = Monitor.Probe,","      FS = require('fs'),","      Path = require('path');","","  // This must be set using setRootPath() before the probe will operate","  var ROOT_PATH = null;","  ","  // TODO: Implement streaming - possibly with the 10.x streaming interface?","  // http://blog.strongloop.com/practical-examples-of-the-new-node-js-streams-api/?goback=%2Egde_3208061_member_245121234","","  /**","  * Baseline Probe Classes","  *","  * The probes in this module offer baseline functionality, and provide examples for building custom probes.","  *","  * @module Probes","  */","","  /**","  * Probe for monitoring a file on the O/S.","  *","  * This probe monitors a file for changes.  It can either contain the full file","  * contents, or the most recent file changes.","  *","  * For security purposes, this probe is disabled by default.  The application","  * server must set the root directory path using ```setRootPath()``` before","  * the probe will operate.","  *","  * To enable FileProbe on the server:","  *","  *     // Enable the File probe under the user home directory","  *     var Monitor = require('monitor');","  *     Monitor.FileProbe.setRootPath('/home/public');","  *","  * This class also contains server-side utility methods for file and","  * directory manipulation.","  *","  * Using the FileProbe (client or server):","  *","  *     // Watch the template for changes","  *     var indexTemplate = new Monitor({","  *       probeClass: 'File',","  *       initParams: {","  *         path: 'templates/index.html'","  *       }","  *     });","  *     indexTemplate.connect(function(error) {","  *       console.log(\"Connected\");","  *     });","  *","  * Once connected, the ```text``` field of ```indexTemplate``` will be set to","  * the file contents, and the ```change``` listener will fire whenever the","  * server detects a change in the template file.","  *","  * @class FileProbe","  * @extends Probe","  * @constructor","  * @param initParams {Object} Remote initialization parameters","  *     @param initParams.path {String} Path to the file beneath the server-specified root path.","  *     @param [initParams.tail=false] {Boolean} false:text contains current file content, true: text contains last changes.","  * @param model {Object} Monitor data model elements","  *     @param model.text {String} Full file contents, or last file changes.","  *     @param model.error {String} File read errors.","  */","  var FileProbe = Monitor.FileProbe = Probe.extend({","","    probeClass: 'File',","    defaults: {path:'', tail:false, text:''},","","    initialize: function(attributes, options){","      var t = this;","      Probe.prototype.initialize.apply(t, arguments);","","      // Disable the probe if the root path hasn't been set","      if (!ROOT_PATH) {","        throw new Error('File probe has not been enabled on this server.');","      }","","      // Don't allow a path above the root path","      t.fullPath = Path.join(ROOT_PATH, t.get('path'));","      if (t.fullPath.indexOf(ROOT_PATH) !== 0) {","        throw new Error('Invalid file path');","      }","","      // Assume callback responsibility.","      options.asyncInit = true;","      var callback = options.callback;","","      // Set up for reading or tailing","      if (t.get('tail')) {","","        //TODO: Implement tail","        return callback({code:'UNDER_CONSTRUCTION', msg:'Tail functionality not implemented.'});","","      } else {","","        // Build the function to call on initial load and subsequent change","        t.onLoad = function(error, newContent) {","          var firstLoad = (callback !== null);","          t.set({error: error, text: newContent}, {silent:firstLoad});","","          // Call the init callback on first load","          if (firstLoad) {","            callback(error);","            callback = null;","          }","        };","","        // Load and watch the file","        var watcherOpts = {","          preload: true,","          persistent: true","        };","        t.watcher = FileProbe.watchLoad(t.fullPath, watcherOpts, t.onLoad);","      }","    },","","    release: function() {","      var t = this;","      if (t.watcher) {","        t.watcher.close();","      }","      Probe.prototype.release.apply(t, arguments);","    }","","  });","","  /**","  * Build a backwards compatible file change watcher","  *","  * The Node.js","  * <a href=\"http://nodejs.org/api/all.html#all_fs_watch_filename_options_listener\">```fs.watch```</a>","  * functionality was introduced in version 0.6.x.  This method builds a watcher","  * object that uses the new funcitonality, and degrades to the polling style","  * ``fs.watchFile`` functionality if running with node.js that doesn't have","  * ```fs.watch```.","  *","  * The provided callback is only fired if the file has changed.","  *","  * When done watching, make sure to call the ```close()``` method of the","  * returned object to release resources consumed by file watching.","  *","  * @static","  * @method watch","  * @param path {String} Path to the file","  * @param [options] {Object} File watch options","  *     @param [options.persistent=false] {Boolean} File encoding type.","  *     @param [options.pollStyle=false] {Boolean} Use the older polling-style watchFile.","  *     @param [options.interval=10] {Integer} Polling interval (if pollStyle=true)","  * @param callback {Function (event)} Function called on file change.","  *     @param callabck.event {String} One of 'change' or 'rename' (delete = 'rename')","  * @return {Object} An object that contains a ```close()``` method to call when","  *     done watching.","  */","  FileProbe.watch = function(path, options, callback) {","","    // Process arguments","    if (typeof options === 'function') {","      callback = options;","      options = {};","    }","    var defaultOpts = {persistent:false, pollStyle:false, interval:10};","    var opts = _.extend({}, defaultOpts, options);","","    // Use fs.watch or fs.watchFile","    var watcher = null;","    if (FS.watch && !opts.pollStyle) {","      // Latest watch method","      try {","        watcher = FS.watch(path, opts, function(event, filename) {","          callback(event);","        });","      } catch (e) {","        // Return a mock watcher.  The callback will be called on error.","        watcher = {","          close: function(){}","        };","      }","    }","    else {","      FS.watchFile(path, opts, function(curr, prev) {","        // Detect file deletion","        if (curr.nlink === 0) {","          return callback('rename');","        }","        if (curr.mtime.getTime() === prev.mtime.getTime()) {","          return;","        }","        return callback('change');","      });","    }","","    // Return the object for closing","    return {","      close: function() {","        if (watcher) {","          watcher.close();","        } else {","          FS.unwatchFile(path);","        }","      }","    };","  };","","  /**","  * Watch a file for changes and reload the content on change","  *","  * This method accepts a callback function that is invoked whenever the file","  * contents have changed.  If preload is requested, the callback is also called","  * on the initial file contents.","  *","  *     // Monitor the homePage.html template","  *     var FileProbe = Monitor.FileProbe;","  *     var path = __dirname + \"/templates/homePage.html\";","  *     var options = {preload:true};","  *     var homePageWatcher = FileProbe.watchLoad(path, options, function(error, content) {","  *       console.log(\"Home page template: \" + content)","  *     });","  *","  * This uses the Node.js","  * <a href=\"http://nodejs.org/api/all.html#all_fs_watch_filename_options_listener\">```fs.watch```</a>","  * functionality if available, or the older polling mechanism if running on","  * a pre-0.6.x version of Node.js.","  *","  * When done watching, call the ```close()``` method of the returned watcher","  * object.  This releases all resources associated with file watching.","  *","  *     // Stop watching the homePage template","  *     homePageWatcher.close();","  *","  * @static","  * @method watchLoad","  * @param path {String} Path to the file","  * @param [options] {Object} File watch options","  *     @param options.encoding='utf8' {String} File encoding type.","  *     @param options.preload=false {boolean} Preload the contents, calling the callback when preloaded.","  *     @param options.persistent=false {boolean} Persistent file watching?","  * @param callback {Function (error, content)} Function called on file change (or error), and on preload if requested.","  * @return {Object} An object that contains a ```close()``` method to call when","  *     done watching.","  */","  FileProbe.watchLoad = function(path, options, callback) {","","    // Process arguments","    if (typeof options === 'function') {","      callback = options;","      options = {};","    }","    var defaultOpts = {encoding:'utf8', preload:false, persistent:false};","    var opts = _.extend({}, defaultOpts, options);","","    // Build the function to call when the file changes","    var onFileChange = function() {","      FS.readFile(path, options.encoding, function(err, text) {","        if (err) {","          // Forward the error","          return callback(err);","        }","        // Success","        callback(null, text.toString());","      });","    };","","    // Read initial file contents if requested","    if (options.preload) {","      onFileChange();","    }","","    // Connect the file watcher","    return FileProbe.watch(path, options, onFileChange);","  };","","  /**","  * Tail a file","  *","  * @static","  * @method tail","  * @param path {String} Path to the file","  * @param [options] {Object} File watch options","  *     @param options.encoding=UTF8 {String} File encoding type.","  * @param callback {Function (content)} Function called on change","  * @return {Object} An object that contains a ```close()``` method to call when","  *     done tailing.","  */","  FileProbe.tail = function() {","    var t = this, path = t.fullPath;","","  };","","  /**","  * Create a directory recursively","  *","  * This makes a directory and all nodes above it that need creating.","  *","  * @static","  * @method mkdir_r","  * @param dirname {String} Full directory path to be made","  * @param [mode=0777] {Object} Directory creation mode (see fs.mkdir)","  * @param [callback] {Function(error)} Called when complete, with possible error.","  */","  FileProbe.mkdir_r = function(dirname, mode, callback) {","","    // Optional arguments","    if (typeof mode === 'function') {","      callback = mode;","      mode = null;","    }","    callback = callback || function(){};","    mode = mode || '777';","","    // First attempt","    FS.mkdir(dirname, mode, function(err1) {","","      // Success","      if (!err1 || err1.code === 'EEXIST') {","        return callback(null);","      }","","      // Failure.  Try making parent.","      var parent = Path.dirname(dirname);","      FileProbe.mkdir_r(parent, mode, function(err2) {","","        // Successful parent create.  Try child one more time.","        if (!err2) {","          return FS.mkdir(dirname, mode, callback);","        }","","        // Couldn't make parent.","        callback(err2);","      });","    });","  };","","  /**","  * Remove a file or directory recursively","  *","  * This is equivalent to shell rm -rf {filepath or dirpath}.","  *","  * @static","  * @method rm_rf","  * @param path {String} Path to a directory or file to remove","  * @param callback {function(error)} Function to call when done, with possible error.","  */","  FileProbe.rm_rf = function(path, callback) {","","    // Get the file/dir status","    callback = callback || function(){};","    var stats = FS.lstat(path, function(err, stats){","      if (err) {","        return callback(err);","      }","","      // If it's a directory, remove all files then the directory","      if (stats.isDirectory()) {","","        // Read all files in the directory","        FS.readdir(path, function(err1, files) {","          if (err1) {","            return callback(err1);","          }","","          // Done if no files","          if (files.length === 0) {","            return callback();","          }","","          // Remove all files asynchronously","          var numLeft = files.length;","          var lastError = null;","          files.forEach(function (filename) {","            FileProbe.rm_rf(Path.join(path, filename), function(err2){","              lastError = err2 || lastError;","              if (--numLeft === 0) {","                if (lastError) {","                  return callback(lastError);","                }","                // Remove the original directory","                FS.rmdir(path, callback);","              }","            });","          });","        });","      }","","      // Directly remove if it's any non-directory type","      else {","        return FS.unlink(path, callback);","      }","","    });","  };","","  /**","  * Set the server root path for the file probe","  *","  * For security purposes, this must be set server-side before the File probe","  * will operate.  It will not accept any changes once set.","  *","  * @static","  * @method setRootPath","  * @param rootPath {String} A path to the root directory for the FilePath probe","  */","  FileProbe.setRootPath = function(rootPath) {","    var normalized = Path.normalize(rootPath);","    if (ROOT_PATH && ROOT_PATH !== normalized) {","      throw new Error('Cannot change the File probe root path once set.');","    }","    ROOT_PATH = normalized;","  };","","  /**","  * Get the current root path.","  *","  * As a static method, this is only available on the server running the probe.","  * For security purposes, this is not exposed in the FileProbe data model.","  *","  * @static","  * @method getRootPath","  * @return {String} The path to the root directory for the FilePath probe","  */","  FileProbe.getRootPath = function() {","    return ROOT_PATH;","  };","","}(this));",""],"l":{"5":1,"8":1,"15":1,"74":1,"80":0,"81":0,"84":0,"85":0,"89":0,"90":0,"91":0,"95":0,"96":0,"99":0,"102":0,"107":0,"108":0,"109":0,"112":0,"113":0,"114":0,"119":0,"123":0,"128":0,"129":0,"130":0,"132":0,"164":1,"167":0,"168":0,"169":0,"171":0,"172":0,"175":0,"176":0,"178":0,"179":0,"180":0,"184":0,"190":0,"192":0,"193":0,"195":0,"196":0,"198":0,"203":0,"205":0,"206":0,"208":0,"251":1,"254":0,"255":0,"256":0,"258":0,"259":0,"262":0,"263":0,"264":0,"266":0,"269":0,"274":0,"275":0,"279":0,"294":1,"295":0,"310":1,"313":0,"314":0,"315":0,"317":0,"318":0,"321":0,"324":0,"325":0,"329":0,"330":0,"333":0,"334":0,"338":0,"353":1,"356":0,"357":0,"358":0,"359":0,"363":0,"366":0,"367":0,"368":0,"372":0,"373":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"387":0,"396":0,"412":1,"413":0,"414":0,"415":0,"417":0,"430":1,"431":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/ReplProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/ReplProbe.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":1,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":1,"61":1,"62":1,"63":5,"64":0,"65":1,"66":1,"67":1,"68":0,"69":0,"70":1,"71":0,"72":0,"73":0,"74":1,"75":1,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":1,"95":0,"96":1,"97":0,"98":1,"99":1,"100":1,"101":1,"102":0,"103":1,"104":1,"105":0,"106":1,"107":0,"108":0},"b":{"1":[1,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[1,0],"16":[0,0],"17":[0,0,0,0],"18":[0,0],"19":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":5,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":16},"end":{"line":44,"column":45}}},"3":{"name":"(anonymous_3)","line":49,"loc":{"start":{"line":49,"column":23},"end":{"line":49,"column":33}}},"4":{"name":"(anonymous_4)","line":76,"loc":{"start":{"line":76,"column":13},"end":{"line":76,"column":27}}},"5":{"name":"(anonymous_5)","line":93,"loc":{"start":{"line":93,"column":13},"end":{"line":93,"column":23}}},"6":{"name":"(anonymous_6)","line":106,"loc":{"start":{"line":106,"column":26},"end":{"line":106,"column":53}}},"7":{"name":"(anonymous_7)","line":128,"loc":{"start":{"line":128,"column":19},"end":{"line":128,"column":46}}},"8":{"name":"(anonymous_8)","line":148,"loc":{"start":{"line":148,"column":16},"end":{"line":148,"column":43}}},"9":{"name":"(anonymous_9)","line":160,"loc":{"start":{"line":160,"column":18},"end":{"line":160,"column":36}}},"10":{"name":"(anonymous_10)","line":162,"loc":{"start":{"line":162,"column":46},"end":{"line":162,"column":76}}},"11":{"name":"(anonymous_11)","line":189,"loc":{"start":{"line":189,"column":19},"end":{"line":189,"column":34}}},"12":{"name":"(anonymous_12)","line":202,"loc":{"start":{"line":202,"column":13},"end":{"line":202,"column":29}}},"13":{"name":"(anonymous_13)","line":203,"loc":{"start":{"line":203,"column":37},"end":{"line":203,"column":47}}},"14":{"name":"(anonymous_14)","line":208,"loc":{"start":{"line":208,"column":13},"end":{"line":208,"column":29}}},"15":{"name":"(anonymous_15)","line":209,"loc":{"start":{"line":209,"column":37},"end":{"line":209,"column":47}}},"16":{"name":"(anonymous_16)","line":213,"loc":{"start":{"line":213,"column":31},"end":{"line":213,"column":46}}},"17":{"name":"(anonymous_17)","line":217,"loc":{"start":{"line":217,"column":33},"end":{"line":217,"column":48}}},"18":{"name":"(anonymous_18)","line":225,"loc":{"start":{"line":225,"column":30},"end":{"line":225,"column":43}}},"19":{"name":"(anonymous_19)","line":235,"loc":{"start":{"line":235,"column":46},"end":{"line":235,"column":58}}},"20":{"name":"(anonymous_20)","line":255,"loc":{"start":{"line":255,"column":20},"end":{"line":255,"column":35}}},"21":{"name":"(anonymous_21)","line":258,"loc":{"start":{"line":258,"column":30},"end":{"line":258,"column":44}}},"22":{"name":"(anonymous_22)","line":264,"loc":{"start":{"line":264,"column":30},"end":{"line":264,"column":47}}},"23":{"name":"(anonymous_23)","line":268,"loc":{"start":{"line":268,"column":31},"end":{"line":268,"column":47}}},"24":{"name":"(anonymous_24)","line":271,"loc":{"start":{"line":271,"column":34},"end":{"line":271,"column":50}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":276,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":15,"column":46}},"3":{"start":{"line":18,"column":2},"end":{"line":18,"column":28}},"4":{"start":{"line":19,"column":2},"end":{"line":19,"column":61}},"5":{"start":{"line":33,"column":2},"end":{"line":186,"column":5}},"6":{"start":{"line":45,"column":6},"end":{"line":45,"column":19}},"7":{"start":{"line":46,"column":6},"end":{"line":46,"column":53}},"8":{"start":{"line":49,"column":6},"end":{"line":63,"column":9}},"9":{"start":{"line":50,"column":8},"end":{"line":50,"column":37}},"10":{"start":{"line":51,"column":8},"end":{"line":59,"column":9}},"11":{"start":{"line":52,"column":10},"end":{"line":56,"column":13}},"12":{"start":{"line":58,"column":10},"end":{"line":58,"column":56}},"13":{"start":{"line":60,"column":8},"end":{"line":60,"column":43}},"14":{"start":{"line":61,"column":8},"end":{"line":61,"column":26}},"15":{"start":{"line":62,"column":8},"end":{"line":62,"column":47}},"16":{"start":{"line":77,"column":6},"end":{"line":77,"column":19}},"17":{"start":{"line":78,"column":6},"end":{"line":81,"column":9}},"18":{"start":{"line":94,"column":6},"end":{"line":94,"column":19}},"19":{"start":{"line":95,"column":6},"end":{"line":95,"column":22}},"20":{"start":{"line":96,"column":6},"end":{"line":96,"column":20}},"21":{"start":{"line":107,"column":6},"end":{"line":107,"column":19}},"22":{"start":{"line":108,"column":6},"end":{"line":110,"column":7}},"23":{"start":{"line":109,"column":8},"end":{"line":109,"column":67}},"24":{"start":{"line":113,"column":6},"end":{"line":118,"column":7}},"25":{"start":{"line":114,"column":8},"end":{"line":114,"column":42}},"26":{"start":{"line":117,"column":8},"end":{"line":117,"column":32}},"27":{"start":{"line":129,"column":6},"end":{"line":129,"column":19}},"28":{"start":{"line":130,"column":6},"end":{"line":132,"column":7}},"29":{"start":{"line":131,"column":8},"end":{"line":131,"column":26}},"30":{"start":{"line":133,"column":6},"end":{"line":137,"column":7}},"31":{"start":{"line":134,"column":8},"end":{"line":134,"column":45}},"32":{"start":{"line":136,"column":8},"end":{"line":136,"column":38}},"33":{"start":{"line":138,"column":6},"end":{"line":138,"column":28}},"34":{"start":{"line":149,"column":6},"end":{"line":149,"column":19}},"35":{"start":{"line":150,"column":6},"end":{"line":150,"column":52}},"36":{"start":{"line":161,"column":6},"end":{"line":161,"column":19}},"37":{"start":{"line":162,"column":6},"end":{"line":182,"column":9}},"38":{"start":{"line":163,"column":8},"end":{"line":173,"column":9}},"39":{"start":{"line":164,"column":10},"end":{"line":164,"column":30}},"40":{"start":{"line":165,"column":10},"end":{"line":167,"column":11}},"41":{"start":{"line":166,"column":12},"end":{"line":166,"column":44}},"42":{"start":{"line":168,"column":10},"end":{"line":170,"column":11}},"43":{"start":{"line":169,"column":12},"end":{"line":169,"column":39}},"44":{"start":{"line":171,"column":10},"end":{"line":171,"column":28}},"45":{"start":{"line":172,"column":10},"end":{"line":172,"column":22}},"46":{"start":{"line":174,"column":8},"end":{"line":176,"column":9}},"47":{"start":{"line":175,"column":10},"end":{"line":175,"column":28}},"48":{"start":{"line":177,"column":8},"end":{"line":179,"column":9}},"49":{"start":{"line":178,"column":10},"end":{"line":178,"column":28}},"50":{"start":{"line":180,"column":8},"end":{"line":180,"column":26}},"51":{"start":{"line":181,"column":8},"end":{"line":181,"column":34}},"52":{"start":{"line":183,"column":6},"end":{"line":183,"column":18}},"53":{"start":{"line":189,"column":2},"end":{"line":196,"column":4}},"54":{"start":{"line":190,"column":4},"end":{"line":190,"column":17}},"55":{"start":{"line":191,"column":4},"end":{"line":191,"column":20}},"56":{"start":{"line":192,"column":4},"end":{"line":192,"column":32}},"57":{"start":{"line":193,"column":4},"end":{"line":195,"column":5}},"58":{"start":{"line":194,"column":6},"end":{"line":194,"column":28}},"59":{"start":{"line":197,"column":2},"end":{"line":197,"column":49}},"60":{"start":{"line":199,"column":2},"end":{"line":199,"column":39}},"61":{"start":{"line":200,"column":2},"end":{"line":200,"column":39}},"62":{"start":{"line":201,"column":2},"end":{"line":206,"column":7}},"63":{"start":{"line":203,"column":6},"end":{"line":205,"column":8}},"64":{"start":{"line":204,"column":8},"end":{"line":204,"column":66}},"65":{"start":{"line":207,"column":2},"end":{"line":212,"column":7}},"66":{"start":{"line":209,"column":6},"end":{"line":211,"column":8}},"67":{"start":{"line":213,"column":2},"end":{"line":216,"column":4}},"68":{"start":{"line":214,"column":4},"end":{"line":214,"column":17}},"69":{"start":{"line":215,"column":4},"end":{"line":215,"column":26}},"70":{"start":{"line":217,"column":2},"end":{"line":221,"column":4}},"71":{"start":{"line":218,"column":4},"end":{"line":218,"column":17}},"72":{"start":{"line":219,"column":2},"end":{"line":219,"column":58}},"73":{"start":{"line":220,"column":4},"end":{"line":220,"column":19}},"74":{"start":{"line":224,"column":2},"end":{"line":224,"column":31}},"75":{"start":{"line":225,"column":2},"end":{"line":252,"column":4}},"76":{"start":{"line":226,"column":4},"end":{"line":232,"column":5}},"77":{"start":{"line":227,"column":6},"end":{"line":227,"column":23}},"78":{"start":{"line":228,"column":6},"end":{"line":230,"column":7}},"79":{"start":{"line":229,"column":8},"end":{"line":229,"column":49}},"80":{"start":{"line":231,"column":6},"end":{"line":231,"column":31}},"81":{"start":{"line":233,"column":4},"end":{"line":233,"column":14}},"82":{"start":{"line":234,"column":4},"end":{"line":234,"column":25}},"83":{"start":{"line":235,"column":4},"end":{"line":243,"column":7}},"84":{"start":{"line":236,"column":6},"end":{"line":242,"column":7}},"85":{"start":{"line":237,"column":19},"end":{"line":237,"column":44}},"86":{"start":{"line":238,"column":19},"end":{"line":238,"column":44}},"87":{"start":{"line":239,"column":19},"end":{"line":239,"column":52}},"88":{"start":{"line":241,"column":10},"end":{"line":241,"column":19}},"89":{"start":{"line":244,"column":4},"end":{"line":250,"column":5}},"90":{"start":{"line":245,"column":6},"end":{"line":249,"column":7}},"91":{"start":{"line":246,"column":8},"end":{"line":246,"column":23}},"92":{"start":{"line":248,"column":8},"end":{"line":248,"column":37}},"93":{"start":{"line":251,"column":4},"end":{"line":251,"column":15}},"94":{"start":{"line":255,"column":2},"end":{"line":257,"column":4}},"95":{"start":{"line":256,"column":4},"end":{"line":256,"column":23}},"96":{"start":{"line":258,"column":2},"end":{"line":260,"column":4}},"97":{"start":{"line":259,"column":4},"end":{"line":259,"column":54}},"98":{"start":{"line":261,"column":2},"end":{"line":261,"column":57}},"99":{"start":{"line":262,"column":2},"end":{"line":262,"column":57}},"100":{"start":{"line":263,"column":2},"end":{"line":263,"column":58}},"101":{"start":{"line":264,"column":2},"end":{"line":266,"column":4}},"102":{"start":{"line":265,"column":4},"end":{"line":265,"column":45}},"103":{"start":{"line":267,"column":2},"end":{"line":267,"column":17}},"104":{"start":{"line":268,"column":2},"end":{"line":270,"column":4}},"105":{"start":{"line":269,"column":4},"end":{"line":269,"column":30}},"106":{"start":{"line":271,"column":2},"end":{"line":274,"column":4}},"107":{"start":{"line":272,"column":4},"end":{"line":272,"column":45}},"108":{"start":{"line":273,"column":4},"end":{"line":273,"column":42}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":53}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":8}},{"start":{"line":51,"column":8},"end":{"line":51,"column":8}}]},"3":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":6},"end":{"line":108,"column":6}},{"start":{"line":108,"column":6},"end":{"line":108,"column":6}}]},"4":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":10},"end":{"line":108,"column":37}},{"start":{"line":108,"column":41},"end":{"line":108,"column":58}}]},"5":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":6},"end":{"line":113,"column":6}},{"start":{"line":113,"column":6},"end":{"line":113,"column":6}}]},"6":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":6},"end":{"line":130,"column":6}},{"start":{"line":130,"column":6},"end":{"line":130,"column":6}}]},"7":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":10},"end":{"line":130,"column":29}},{"start":{"line":130,"column":33},"end":{"line":130,"column":43}}]},"8":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":6},"end":{"line":133,"column":6}},{"start":{"line":133,"column":6},"end":{"line":133,"column":6}}]},"9":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":8},"end":{"line":163,"column":8}},{"start":{"line":163,"column":8},"end":{"line":163,"column":8}}]},"10":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":10},"end":{"line":165,"column":10}},{"start":{"line":165,"column":10},"end":{"line":165,"column":10}}]},"11":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":10},"end":{"line":168,"column":10}},{"start":{"line":168,"column":10},"end":{"line":168,"column":10}}]},"12":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":8},"end":{"line":174,"column":8}},{"start":{"line":174,"column":8},"end":{"line":174,"column":8}}]},"13":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":8},"end":{"line":177,"column":8}},{"start":{"line":177,"column":8},"end":{"line":177,"column":8}}]},"14":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":4},"end":{"line":193,"column":4}},{"start":{"line":193,"column":4},"end":{"line":193,"column":4}}]},"15":{"line":225,"type":"binary-expr","locations":[{"start":{"line":225,"column":15},"end":{"line":225,"column":26}},{"start":{"line":225,"column":30},"end":{"line":252,"column":3}}]},"16":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":226,"column":4}},{"start":{"line":226,"column":4},"end":{"line":226,"column":4}}]},"17":{"line":236,"type":"switch","locations":[{"start":{"line":237,"column":8},"end":{"line":237,"column":44}},{"start":{"line":238,"column":8},"end":{"line":238,"column":44}},{"start":{"line":239,"column":8},"end":{"line":239,"column":52}},{"start":{"line":240,"column":8},"end":{"line":241,"column":19}}]},"18":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":6},"end":{"line":245,"column":6}},{"start":{"line":245,"column":6},"end":{"line":245,"column":6}}]},"19":{"line":245,"type":"binary-expr","locations":[{"start":{"line":245,"column":10},"end":{"line":245,"column":20}},{"start":{"line":245,"column":24},"end":{"line":245,"column":45}}]}},"code":["// ReplProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading - this runs server-side only","  var Monitor = root.Monitor || require('../Monitor'),","      _ = Monitor._,","      Probe = Monitor.Probe,","      REPL = require('repl'),","      Stream = require('stream'),","      util = require('util'),","      events = require('events'),","      ChildProcess = require('child_process');","","  // Statics","  var CONSOLE_PROMPT = '> ';","  var NEW_REPL = (typeof REPL.disableColors === 'undefined');","","  /**","  * A probe based Read-Execute-Print-Loop console for node.js processes","  *","  * @class ReplProbe","  * @extends Probe","  * @constructor","  * @param initParams {Object} Probe initialization parameters","  *     @param initParams.uniqueInstance - Usually specified to obtain a unique REPL probe instance","  * @param model {Object} Monitor data model elements","  *     @param model.output {String} Last (current) REPL output line","  *     @param model.sequence {Integer} Increasing sequence number - to enforce unique line output","  */","  var ReplProbe = Monitor.ReplProbe = Probe.extend({","","    probeClass: 'Repl',","    description: 'A socket.io based Read-Execute-Print-Loop console for node.js processes.',","    defaults: {","      // This assures output events are sent, even if the","      // data is the same as the prior output.","      sequence: 0,","      output: ''","    },","","    initialize: function(attributes, options){","      var t = this;","      Probe.prototype.initialize.apply(t, arguments);","","      // Don't send change events before connected","      process.nextTick(function(){","        t.stream = new ReplStream(t);","        if (NEW_REPL) {","          t.repl = require('repl').start({","            prompt: CONSOLE_PROMPT,","            input: t.stream,","            output: t.stream","          });","        } else {","          t.repl = REPL.start(CONSOLE_PROMPT, t.stream);","        }","        t.htmlConsole = new HtmlConsole(t);","        t.shellCmd = null;","        t.repl.context.console = t.htmlConsole;","      });","    },","","    /**","    * Send output to the terminal","    *","    * This forces the change event even if the last output is the same","    * as this output.","    *","    * @protected","    * @method output","    * @param str {String} String to output to the repl console","    */","    _output: function(str) {","      var t = this;","      t.set({","        output: str,","        sequence: t.get('sequence') + 1","      });","    },","","    /**","    * Release any resources consumed by this probe.","    *","    * Stop the REPL console.  Consoles live 1-1 with a UI counterpart, so stop","    * requests exit the underlying repl console.  If the probe is re-started it","    * will get a new repl stream and console.","    *","    * @method release","    */","    release: function(){","      var t = this;","      t.stream = null;","      t.repl = null;","    },","","    /**","    * Process an autocomplete request from the client","    *","    * @method autocomplete","    * @param {Object} params Named parameters","    * @param {Function(error, returnParams)} callback Callback function","    */","    autocomplete_control: function(params, callback) {","      var t = this;","      if (typeof(params) !== 'string' || params.length < 1) {","        callback(\"Autocomplete paramter must be a nonzero string\");","      }","","      // Forward to the completion mechanism if it can be completed","      if (params.substr(-1).match(/([0-9])|([a-z])|([A-Z])|([_])/)) {","        t.repl.complete(params, callback);","      } else {","        // Return a no-op autocomplete","        callback(null, [[],'']);","      }","    },","","    /**","    * Handle user input from the console line","    *","    * @method input","    * @param {Object} params Named parameters","    * @param {Function(error, returnParams)} callback Callback function","    */","    input_control: function(params, callback) {","      var t = this;","      if (params === '.break' && t.shellCmd) {","        t.shellCmd.kill();","      }","      if (NEW_REPL) {","        t.stream.emit('data', params + \"\\n\");","      } else {","        t.stream.emit('data', params);","      }","      return callback(null);","    },","","    /**","    * Execute a shell command","    *","    * @method sh","    * @param {Object} params Named parameters","    * @param {Function(error, returnParams)} callback Callback function","    */","    sh_control: function(params, callback) {","      var t = this;","      return callback(null, t._runShellCmd(params));","    },","","    /**","    * Run a shell command and emit the output to the browser.","    *","    * @private","    * @method _runShellCmd","    * @param {String} command - The shell command to invoke","    */","    _runShellCmd: function(command) {","      var t = this;","      t.shellCmd = ChildProcess.exec(command, function(err, stdout, stderr) {","        if (err) {","          var outstr = 'exit';","          if (err.code) {","            outstr += ' (' + err.code + ')';","          }","          if (err.signal) {","            outstr += ' ' + err.signal;","          }","          t._output(outstr);","          return null;","        }","        if (stdout.length) {","          t._output(stdout);","        }","        if (stderr.length) {","          t._output(stderr);","        }","        t.shellCmd = null;","        t._output(CONSOLE_PROMPT);","      });","      return null;","    }","","  });","","  // Define an internal stream class for the probe","  var ReplStream = function(probe){","    var t = this;","    t.probe = probe;","    events.EventEmitter.call(t);","    if (t.setEncoding) {","      t.setEncoding('utf8');","    }","  };","  util.inherits(ReplStream, events.EventEmitter);","  // util.inherits(ReplStream, require('stream'));","  ReplStream.prototype.readable = true;","  ReplStream.prototype.writable = true;","  ['pause','resume','destroySoon','pipe', 'end']","    .forEach(function(fnName){","      ReplStream.prototype[fnName] = function(){","        console.log(\"REPL Stream function unexpected: \" + fnName);","      };","    });","  ['resume']","    .forEach(function(fnName){","      ReplStream.prototype[fnName] = function(){","        // Handled","      };","    });","  ReplStream.prototype.write = function(data) {","    var t = this;","    t.probe._output(data);","  };","  ReplStream.prototype.destroy = function(data) {","    var t = this;","  console.log(\"REPL stream destroy \" + t.probe.get('id'));","    t.probe.stop();","  };","","  // Define format if it's not in util.","  var formatRegExp = /%[sdj]/g;","  var format = util.format || function (f) {","    if (typeof f !== 'string') {","      var objects = [];","      for (var i = 0; i < arguments.length; i++) {","        objects.push(util.inspect(arguments[i]));","      }","      return objects.join(' ');","    }","    var j = 1;","    var args = arguments;","    var str = String(f).replace(formatRegExp, function(x) {","      switch (x) {","        case '%s': return String(args[j++]);","        case '%d': return Number(args[j++]);","        case '%j': return JSON.stringify(args[j++]);","        default:","          return x;","      }","    });","    for (var len = args.length, x = args[j]; j < len; x = args[++j]) {","      if (x === null || typeof x !== 'object') {","        str += ' ' + x;","      } else {","        str += ' ' + util.inspect(x);","      }","    }","    return str;","  };","","  // Re-define the console so it goes to the HTML window","  var HtmlConsole = function(probe){","    this.probe = probe;","  };","  HtmlConsole.prototype.log = function(msg) {","    this.probe._output(format.apply(this, arguments));","  };","  HtmlConsole.prototype.info = HtmlConsole.prototype.log;","  HtmlConsole.prototype.warn = HtmlConsole.prototype.log;","  HtmlConsole.prototype.error = HtmlConsole.prototype.log;","  HtmlConsole.prototype.dir = function(object) {","    this.probe._output(util.inspect(object));","  };","  var times = {};","  HtmlConsole.prototype.time = function(label) {","    times[label] = Date.now();","  };","  HtmlConsole.prototype.timeEnd = function(label) {","    var duration = Date.now() - times[label];","    this.log('%s: %dms', label, duration);","  };","","}(this));",""],"l":{"5":1,"8":1,"18":1,"19":1,"33":1,"45":0,"46":0,"49":0,"50":0,"51":0,"52":0,"58":0,"60":0,"61":0,"62":0,"77":0,"78":0,"94":0,"95":0,"96":0,"107":0,"108":0,"109":0,"113":0,"114":0,"117":0,"129":0,"130":0,"131":0,"133":0,"134":0,"136":0,"138":0,"149":0,"150":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"168":0,"169":0,"171":0,"172":0,"174":0,"175":0,"177":0,"178":0,"180":0,"181":0,"183":0,"189":1,"190":0,"191":0,"192":0,"193":0,"194":0,"197":1,"199":1,"200":1,"201":1,"203":5,"204":0,"207":1,"209":1,"213":1,"214":0,"215":0,"217":1,"218":0,"219":0,"220":0,"224":1,"225":1,"226":0,"227":0,"228":0,"229":0,"231":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"241":0,"244":0,"245":0,"246":0,"248":0,"251":0,"255":1,"256":0,"258":1,"259":0,"261":1,"262":1,"263":1,"264":1,"265":0,"267":1,"268":1,"269":0,"271":1,"272":0,"273":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/ProcessProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/ProcessProbe.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[1,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":1,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":80,"loc":{"start":{"line":80,"column":10},"end":{"line":80,"column":21}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":111,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":11,"column":42}},"3":{"start":{"line":53,"column":2},"end":{"line":109,"column":5}},"4":{"start":{"line":81,"column":6},"end":{"line":103,"column":32}},"5":{"start":{"line":104,"column":6},"end":{"line":104,"column":60}},"6":{"start":{"line":104,"column":27},"end":{"line":104,"column":59}},"7":{"start":{"line":105,"column":6},"end":{"line":105,"column":64}},"8":{"start":{"line":105,"column":29},"end":{"line":105,"column":63}},"9":{"start":{"line":106,"column":6},"end":{"line":106,"column":52}},"10":{"start":{"line":106,"column":25},"end":{"line":106,"column":51}},"11":{"start":{"line":107,"column":6},"end":{"line":107,"column":19}}},"branchMap":{"1":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":16},"end":{"line":9,"column":28}},{"start":{"line":9,"column":32},"end":{"line":9,"column":53}}]},"2":{"line":91,"type":"cond-expr","locations":[{"start":{"line":91,"column":30},"end":{"line":91,"column":46}},{"start":{"line":91,"column":49},"end":{"line":91,"column":50}}]},"3":{"line":92,"type":"cond-expr","locations":[{"start":{"line":92,"column":30},"end":{"line":92,"column":46}},{"start":{"line":92,"column":49},"end":{"line":92,"column":50}}]},"4":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":6},"end":{"line":104,"column":6}},{"start":{"line":104,"column":6},"end":{"line":104,"column":6}}]},"5":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":6},"end":{"line":105,"column":6}},{"start":{"line":105,"column":6},"end":{"line":105,"column":6}}]},"6":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":6},"end":{"line":106,"column":6}},{"start":{"line":106,"column":6},"end":{"line":106,"column":6}}]}},"code":["// ProcessProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading - this runs server-side only","  var util = require('util'), OS = require('os'),","      Monitor = root.Monitor || require('../Monitor'), _ = Monitor._,","      logger = Monitor.getLogger('ProcessProbe'),","      PollingProbe = Monitor.PollingProbe;","","  /**","  * Probe for attaining process and O/S information","  *","  * @class ProcessProbe","  * @extends PollingProbe","  * @constructor","  * @param [initParams] {Object} Probe initialization parameters (from PollingProbe)","  *     @param [initParams.pollInterval] {Integer} Polling interval in milliseconds. Default: null","  *     @param [initParams.cronPattern] {String} Crontab syle polling pattern. Default once per second: \"* * * * * *\"","  * @param model {Object} Monitor data model elements","  *     @param model.platform {String} O/S Platform","  *     @param model.version {String} Node.js compiled-in version","  *     @param model.installPrefix {String} Node.js installation directory","  *     @param model.title {String} The current process title (as reported in ps)","  *     @param model.execPath {String} The path to the current node.js executable","  *     @param model.argv {Array(String)} Arguments passed on the command line to this process","  *     @param model.env {Object} Current environment (inherited)","  *     @param model.cwd {String} Current working directory","  *     @param model.uptime {Integer} Number of seconds the process has been up (if available)","  *     @param model.versions {String} Versions of V8 and dependent libraries (if available)","  *     @param model.arch {String} Processor architecture (if available)","  *     @param model.gid {Integer} Process group ID","  *     @param model.uid {Integer} Process user ID","  *     @param model.pid {Integer} Unique process ID","  *     @param model.umask {Integer} The process file mode creation mask","  *     @param model.memoryUsage {Object} An object describing memory usage of the node.js process","  *         @param model.memoryUsage.rss {Integer} As defined by process.memoryUsage","  *         @param model.memoryUsage.vsize {Integer} As defined by process.memoryUsage","  *         @param model.memoryUsage.heapTotal {Integer} As defined by process.memoryUsage","  *         @param model.memoryUsage.heapUsed {Integer} As defined by process.memoryUsage","  *     @param model.os {Object} An object containing O/S information","  *         @param model.os.hostname {String} Name of the host operating system","  *         @param model.os.type {String} Operating system type","  *         @param model.os.release {String} O/S Release version","  *         @param model.os.uptime {String} O/S Uptime in seconds","  *         @param model.os.loadavg {Array(Number)} An array containing the 1, 5, and 15 minute load averages","  *         @param model.os.freemem {Integer} Free O/S memory (in bytes)","  *         @param model.os.totalmem {Integer} Total O/S memory capacity (in bytes)","  *         @param model.os.cpus {Array(Object)} An array of objects containing information about each CPU/core installed","  */","  var ProcessProbe = Monitor.ProcessProbe = PollingProbe.extend({","","    // These are required for Probes","    probeClass: 'Process',","","    /* not required","    initialize: function(){","      var t = this;","      PollingProbe.prototype.initialize.apply(t, arguments);","      ...","    },","    release: function() {","      var t = this;","      PollingProbe.prototype.release.apply(t, arguments);","      ... // release any resources held","    })","    */","","    /**","    * Poll the probe for changes","    *","    * This method is called by the parent <a href=\"PollingProbe.html\">PollingProbe</a> on the interval specified by the client <a href=\"Monitor.html\">Monitor</a>.","    *","    * It polls for process information, and updates the data model with any changes.","    *","    * @method poll","    */","    poll: function() {","      var t = this,","      attrs = _.extend({","        platform: process.platform,","        version: process.version,","        installPrefix: process.installPrefix,","        title: process.title,","        execPath: process.execPath,","        argv: process.argv,","        env: process.env,","        cwd: process.cwd(),","        gid: process.getgid ? process.getgid() : 0,","        uid: process.getuid ? process.getuid() : 0,","        pid: process.pid,","        umask: process.umask(),","        hostname: OS.hostname(),","        type: OS.type(),","        release: OS.release(),","        osUptime: OS.uptime(),","        loadavg: OS.loadavg(),","        freemem: OS.freemem(),","        totalmem: OS.totalmem(),","        cpus: OS.cpus()","      }, process.memoryUsage());","      if (process.uptime) {attrs.uptime = process.uptime();}","      if (process.versions) {attrs.versions = process.versions;}","      if (process.arch) {attrs.arch = process.arch;}","      t.set(attrs);","    }","  });","","}(this));",""],"l":{"5":1,"8":1,"53":1,"81":0,"104":0,"105":0,"106":0,"107":0}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/SyncProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/SyncProbe.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1},"b":{"1":[1,1],"2":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":16},"end":{"line":43,"column":45}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":48},"end":{"line":53,"column":69}}},"4":{"name":"(anonymous_4)","line":62,"loc":{"start":{"line":62,"column":13},"end":{"line":62,"column":24}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":20},"end":{"line":82,"column":45}}},"6":{"name":"(anonymous_6)","line":100,"loc":{"start":{"line":100,"column":18},"end":{"line":100,"column":43}}},"7":{"name":"(anonymous_7)","line":122,"loc":{"start":{"line":122,"column":20},"end":{"line":122,"column":45}}},"8":{"name":"(anonymous_8)","line":137,"loc":{"start":{"line":137,"column":20},"end":{"line":137,"column":45}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":175,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":9,"column":43}},"3":{"start":{"line":34,"column":2},"end":{"line":141,"column":5}},"4":{"start":{"line":44,"column":6},"end":{"line":44,"column":19}},"5":{"start":{"line":45,"column":6},"end":{"line":45,"column":53}},"6":{"start":{"line":49,"column":6},"end":{"line":52,"column":49}},"7":{"start":{"line":53,"column":6},"end":{"line":55,"column":9}},"8":{"start":{"line":54,"column":8},"end":{"line":54,"column":57}},"9":{"start":{"line":56,"column":6},"end":{"line":56,"column":53}},"10":{"start":{"line":59,"column":6},"end":{"line":59,"column":46}},"11":{"start":{"line":63,"column":6},"end":{"line":63,"column":19}},"12":{"start":{"line":64,"column":6},"end":{"line":64,"column":50}},"13":{"start":{"line":83,"column":6},"end":{"line":83,"column":41}},"14":{"start":{"line":101,"column":6},"end":{"line":101,"column":41}},"15":{"start":{"line":123,"column":6},"end":{"line":123,"column":41}},"16":{"start":{"line":138,"column":6},"end":{"line":138,"column":41}},"17":{"start":{"line":167,"column":2},"end":{"line":170,"column":4}},"18":{"start":{"line":173,"column":2},"end":{"line":173,"column":49}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":53}}]},"2":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":27},"end":{"line":51,"column":53}},{"start":{"line":51,"column":57},"end":{"line":51,"column":76}}]}},"code":["// SyncProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading - this runs server-side only","  var Monitor = root.Monitor || require('../Monitor'),","      _ = Monitor._, Probe = Monitor.Probe;","","  /**","  * Probe for exposing backbone data models from server-side persistence","  *","  * This probe is used by the client-side <a href=\"Sync.html\">Sync</a> class","  * to connect a local backbone model with server-side storage.","  *","  * It delegates to a specialized SyncProbe defined by the server for the","  * specific data class.  For example, the server may determine that one class","  * type uses FileSyncProbe, and another class uses a different persistence","  * mechanism.","  *","  * For security purposes, the server must <a href=\"SyncProbe.html#property_Config\">configure</a> specific SyncProbes for","  * classes, or a default sync probe before this will operate.","  *","  * @class SyncProbe","  * @extends Probe","  * @constructor","  * @param className {String} Name of the class to synchronize with","  * @param [modelId] {String} Id of the data model for live synchronization","  *   If not set, a non-live probe is set up for control access only.","  * @param [model] {Object} If this is a liveSync probe, this contains","  *   the attributes of the current model object.","  */","  var SyncProbe = Monitor.SyncProbe = Probe.extend({","","    probeClass: 'Sync',","    defaults: {","      className: null,","      modelId: null,","      model: null","    },","","    initialize: function(attributes, options){","      var t = this;","      Probe.prototype.initialize.apply(t, arguments);","","      // Determine the probe name based on the class, and coerce this","      // object into one of those by copying all prototype methods.","      var className = t.get('className'),","          config = SyncProbe.Config,","          probeClassName = config.classMap[className] || config.defaultProbe,","          probeClass = SyncProbe[probeClassName];","      _.each(_.functions(probeClass.prototype), function(methodName) {","        t[methodName] = probeClass.prototype[methodName];","      });","      t.probeClass = probeClass.prototype.probeClass;","","      // Forward class initialization to the coerced initialize method","      return t.initialize.apply(t, arguments);","    },","","    release: function() {","      var t = this;","      Probe.prototype.release.apply(t, arguments);","    },","","    /**","    * Create and save a new instance of the class into storage","    *","    * This probe control requests a new instance of a data model to be","    * persisted onto storage.  It is invoked when a data model that has","    * the Sync probe attached calls ```save()``` on a new object.","    *","    * @method create_control","    * @param model {Object} Full data model to save.  This must contain","    *     the id element.","    * @param callback {Function(error, result)} Callback when complete","    *     @param callback.error {Mixed} Set if an error occurs during creation.","    *     @param callback.result {Object} An object containing any differing","    *         parameters from the model sent in.  Normally a blank object.","    */","    create_control: function(args, callback) {","      callback({msg: 'not implemented'});","    },","","    /**","    * Read an instance from storage","    *","    * This probe control reads the instance with the specified id","    * from storage, and returns it in the callback.","    *","    * @method read_control","    * @param id {String} ID of the object to read","    * @param callback {Function(error, result)} Callback when complete","    *     @param callback.error {Mixed} Set if an error occurs during read.","    *       if error.code === 'NOTFOUND' then the requested object wasn't found.","    *       if error.code === 'PARSE' then the document was poorly formatted JSON.","    *     @param callback.result {Object} The full object.","    */","    read_control: function(args, callback) {","      callback({msg: 'not implemented'});","    },","","    /**","    * Update a data model in storage","    *","    * This acts like a REST PUT, meaning it can create a new object, or","    * update an existing object.","    *","    * Backbone has only a save() method.  If the client sets the ID","    * of the object before save(), Backbone thinks the object exists and","    * will call update vs. create.","    *","    * @method update_control","    * @param model {Object} Full data model to save.  This must contain","    *     the id element.","    * @param callback {Function(error, result)} Callback when complete","    *     @param callback.error {Mixed} Set if an error occurs during save.","    *     @param callback.result {Object} An object containing any differing","    *         parameters from the model sent in.  Normally a blank object.","    */","    update_control: function(args, callback) {","      callback({msg: 'not implemented'});","    },","","    /**","    * Delete an instance from storage","    *","    * This probe control deletes the instance with the specified id","    * from storage.","    *","    * @method delete_control","    * @param id {String} ID of the object to read","    * @param callback {Function(error)} Callback when complete","    *     @param callback.error {Mixed} Set if an error occurs during read.","    */","    delete_control: function(args, callback) {","      callback({msg: 'not implemented'});","    }","","  });","","  /**","  * Static Configurations","  *","  * These can be set onto the Monitor.SyncProbe class after it's loaded.","  *","  * The SyncProbe will *not* work until the defaultProbe is defined.","  *","  * Example:","  *","  *     var syncConfig = Monitor.SyncProbe.Config;","  *     syncConfig.defaultProbe = 'FileSyncProbe';","  *     syncConfig.classMap = {","  *       Book: 'MongoDbSync',","  *       Author: 'MongoDbSync'","  *     }","  *","  * @static","  * @property Config","  * @type &lt;Object&gt;","  * <ul>","  *   <li><code>defaultProbe (String)</code> Name of the sync probe to use if the class isn't listed in the classMap</li>","  *   <li><code>classMap (Object)</code> Map of className to sync probe name to use instead of the default for that class</li>","  * </ul>","  */","  var defaultConfig = {","    defaultProbe: '',","    classMap: {}","  };","","  // Expose default configurations to the config package","  SyncProbe.Config = _.extend({}, defaultConfig);","","}(this));",""],"l":{"5":1,"8":1,"34":1,"44":0,"45":0,"49":0,"53":0,"54":0,"56":0,"59":0,"63":0,"64":0,"83":0,"101":0,"123":0,"138":0,"167":1,"173":1}},"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/FileSyncProbe.js":{"path":"/home/travis/build/npmtest/node-npmtest-monitor/monitor/lib/probes/FileSyncProbe.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":1,"123":0,"124":0,"125":0,"126":0,"127":1,"128":0},"b":{"1":[1,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":1},"end":{"line":5,"column":15}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":16},"end":{"line":33,"column":45}}},"3":{"name":"(anonymous_3)","line":63,"loc":{"start":{"line":63,"column":38},"end":{"line":63,"column":63}}},"4":{"name":"(anonymous_4)","line":73,"loc":{"start":{"line":73,"column":26},"end":{"line":73,"column":51}}},"5":{"name":"(anonymous_5)","line":135,"loc":{"start":{"line":135,"column":20},"end":{"line":135,"column":45}}},"6":{"name":"(anonymous_6)","line":143,"loc":{"start":{"line":143,"column":30},"end":{"line":143,"column":56}}},"7":{"name":"(anonymous_7)","line":157,"loc":{"start":{"line":157,"column":18},"end":{"line":157,"column":43}}},"8":{"name":"(anonymous_8)","line":165,"loc":{"start":{"line":165,"column":24},"end":{"line":165,"column":49}}},"9":{"name":"(anonymous_9)","line":174,"loc":{"start":{"line":174,"column":38},"end":{"line":174,"column":60}}},"10":{"name":"(anonymous_10)","line":191,"loc":{"start":{"line":191,"column":20},"end":{"line":191,"column":45}}},"11":{"name":"(anonymous_11)","line":200,"loc":{"start":{"line":200,"column":30},"end":{"line":200,"column":56}}},"12":{"name":"(anonymous_12)","line":207,"loc":{"start":{"line":207,"column":37},"end":{"line":207,"column":53}}},"13":{"name":"(anonymous_13)","line":218,"loc":{"start":{"line":218,"column":73},"end":{"line":218,"column":88}}},"14":{"name":"(anonymous_14)","line":226,"loc":{"start":{"line":226,"column":20},"end":{"line":226,"column":45}}},"15":{"name":"(anonymous_15)","line":234,"loc":{"start":{"line":234,"column":24},"end":{"line":234,"column":50}}},"16":{"name":"(anonymous_16)","line":244,"loc":{"start":{"line":244,"column":28},"end":{"line":244,"column":50}}},"17":{"name":"(anonymous_17)","line":253,"loc":{"start":{"line":253,"column":13},"end":{"line":253,"column":24}}},"18":{"name":"(anonymous_18)","line":275,"loc":{"start":{"line":275,"column":17},"end":{"line":275,"column":45}}},"19":{"name":"(anonymous_19)","line":286,"loc":{"start":{"line":286,"column":24},"end":{"line":286,"column":46}}},"20":{"name":"(anonymous_20)","line":295,"loc":{"start":{"line":295,"column":26},"end":{"line":295,"column":48}}},"21":{"name":"(anonymous_21)","line":325,"loc":{"start":{"line":325,"column":30},"end":{"line":325,"column":49}}},"22":{"name":"(anonymous_22)","line":343,"loc":{"start":{"line":343,"column":30},"end":{"line":343,"column":41}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":347,"column":9}},"2":{"start":{"line":8,"column":2},"end":{"line":15,"column":36}},"3":{"start":{"line":18,"column":2},"end":{"line":18,"column":23}},"4":{"start":{"line":29,"column":2},"end":{"line":313,"column":5}},"5":{"start":{"line":34,"column":6},"end":{"line":34,"column":19}},"6":{"start":{"line":35,"column":6},"end":{"line":35,"column":53}},"7":{"start":{"line":38,"column":6},"end":{"line":40,"column":7}},"8":{"start":{"line":39,"column":8},"end":{"line":39,"column":73}},"9":{"start":{"line":43,"column":6},"end":{"line":45,"column":7}},"10":{"start":{"line":44,"column":8},"end":{"line":44,"column":63}},"11":{"start":{"line":48,"column":6},"end":{"line":48,"column":59}},"12":{"start":{"line":49,"column":6},"end":{"line":51,"column":7}},"13":{"start":{"line":50,"column":8},"end":{"line":50,"column":45}},"14":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":15}},"16":{"start":{"line":59,"column":6},"end":{"line":59,"column":31}},"17":{"start":{"line":60,"column":6},"end":{"line":60,"column":38}},"18":{"start":{"line":63,"column":6},"end":{"line":131,"column":9}},"19":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"20":{"start":{"line":65,"column":10},"end":{"line":65,"column":70}},"21":{"start":{"line":69,"column":8},"end":{"line":69,"column":37}},"22":{"start":{"line":70,"column":8},"end":{"line":70,"column":35}},"23":{"start":{"line":73,"column":8},"end":{"line":122,"column":10}},"24":{"start":{"line":75,"column":10},"end":{"line":76,"column":38}},"25":{"start":{"line":77,"column":10},"end":{"line":77,"column":26}},"26":{"start":{"line":79,"column":10},"end":{"line":84,"column":11}},"27":{"start":{"line":81,"column":12},"end":{"line":81,"column":57}},"28":{"start":{"line":83,"column":12},"end":{"line":83,"column":36}},"29":{"start":{"line":85,"column":10},"end":{"line":92,"column":11}},"30":{"start":{"line":86,"column":12},"end":{"line":90,"column":13}},"31":{"start":{"line":87,"column":14},"end":{"line":87,"column":26}},"32":{"start":{"line":88,"column":14},"end":{"line":88,"column":103}},"33":{"start":{"line":89,"column":14},"end":{"line":89,"column":32}},"34":{"start":{"line":91,"column":12},"end":{"line":91,"column":19}},"35":{"start":{"line":95,"column":10},"end":{"line":109,"column":11}},"36":{"start":{"line":96,"column":12},"end":{"line":96,"column":42}},"37":{"start":{"line":97,"column":12},"end":{"line":97,"column":79}},"38":{"start":{"line":101,"column":12},"end":{"line":104,"column":13}},"39":{"start":{"line":102,"column":14},"end":{"line":102,"column":26}},"40":{"start":{"line":103,"column":14},"end":{"line":103,"column":81}},"41":{"start":{"line":107,"column":12},"end":{"line":107,"column":90}},"42":{"start":{"line":108,"column":12},"end":{"line":108,"column":19}},"43":{"start":{"line":113,"column":10},"end":{"line":113,"column":42}},"44":{"start":{"line":114,"column":10},"end":{"line":116,"column":11}},"45":{"start":{"line":115,"column":12},"end":{"line":115,"column":62}},"46":{"start":{"line":119,"column":10},"end":{"line":121,"column":11}},"47":{"start":{"line":120,"column":12},"end":{"line":120,"column":27}},"48":{"start":{"line":125,"column":8},"end":{"line":128,"column":10}},"49":{"start":{"line":129,"column":8},"end":{"line":129,"column":80}},"50":{"start":{"line":137,"column":6},"end":{"line":137,"column":39}},"51":{"start":{"line":138,"column":6},"end":{"line":140,"column":7}},"52":{"start":{"line":139,"column":8},"end":{"line":139,"column":83}},"53":{"start":{"line":143,"column":6},"end":{"line":154,"column":9}},"54":{"start":{"line":144,"column":8},"end":{"line":146,"column":9}},"55":{"start":{"line":145,"column":10},"end":{"line":145,"column":33}},"56":{"start":{"line":148,"column":8},"end":{"line":150,"column":9}},"57":{"start":{"line":149,"column":10},"end":{"line":149,"column":72}},"58":{"start":{"line":153,"column":8},"end":{"line":153,"column":41}},"59":{"start":{"line":159,"column":6},"end":{"line":159,"column":33}},"60":{"start":{"line":160,"column":6},"end":{"line":162,"column":7}},"61":{"start":{"line":161,"column":8},"end":{"line":161,"column":65}},"62":{"start":{"line":165,"column":6},"end":{"line":188,"column":9}},"63":{"start":{"line":166,"column":8},"end":{"line":168,"column":9}},"64":{"start":{"line":167,"column":10},"end":{"line":167,"column":33}},"65":{"start":{"line":169,"column":8},"end":{"line":171,"column":9}},"66":{"start":{"line":170,"column":10},"end":{"line":170,"column":85}},"67":{"start":{"line":173,"column":8},"end":{"line":173,"column":37}},"68":{"start":{"line":174,"column":8},"end":{"line":187,"column":11}},"69":{"start":{"line":175,"column":10},"end":{"line":177,"column":11}},"70":{"start":{"line":176,"column":12},"end":{"line":176,"column":92}},"71":{"start":{"line":180,"column":10},"end":{"line":180,"column":20}},"72":{"start":{"line":181,"column":10},"end":{"line":185,"column":11}},"73":{"start":{"line":182,"column":12},"end":{"line":182,"column":37}},"74":{"start":{"line":184,"column":12},"end":{"line":184,"column":72}},"75":{"start":{"line":186,"column":10},"end":{"line":186,"column":32}},"76":{"start":{"line":194,"column":6},"end":{"line":194,"column":39}},"77":{"start":{"line":195,"column":6},"end":{"line":197,"column":7}},"78":{"start":{"line":196,"column":8},"end":{"line":196,"column":83}},"79":{"start":{"line":200,"column":6},"end":{"line":222,"column":9}},"80":{"start":{"line":201,"column":8},"end":{"line":203,"column":9}},"81":{"start":{"line":202,"column":10},"end":{"line":202,"column":33}},"82":{"start":{"line":205,"column":8},"end":{"line":206,"column":47}},"83":{"start":{"line":207,"column":8},"end":{"line":221,"column":11}},"84":{"start":{"line":208,"column":10},"end":{"line":210,"column":11}},"85":{"start":{"line":209,"column":12},"end":{"line":209,"column":35}},"86":{"start":{"line":213,"column":10},"end":{"line":215,"column":11}},"87":{"start":{"line":214,"column":12},"end":{"line":214,"column":34}},"88":{"start":{"line":218,"column":10},"end":{"line":220,"column":13}},"89":{"start":{"line":219,"column":12},"end":{"line":219,"column":32}},"90":{"start":{"line":228,"column":6},"end":{"line":228,"column":33}},"91":{"start":{"line":229,"column":6},"end":{"line":231,"column":7}},"92":{"start":{"line":230,"column":8},"end":{"line":230,"column":67}},"93":{"start":{"line":234,"column":6},"end":{"line":250,"column":9}},"94":{"start":{"line":235,"column":8},"end":{"line":237,"column":9}},"95":{"start":{"line":236,"column":10},"end":{"line":236,"column":66}},"96":{"start":{"line":238,"column":8},"end":{"line":238,"column":37}},"97":{"start":{"line":239,"column":8},"end":{"line":241,"column":9}},"98":{"start":{"line":240,"column":10},"end":{"line":240,"column":31}},"99":{"start":{"line":244,"column":8},"end":{"line":249,"column":11}},"100":{"start":{"line":245,"column":10},"end":{"line":247,"column":11}},"101":{"start":{"line":246,"column":12},"end":{"line":246,"column":57}},"102":{"start":{"line":248,"column":10},"end":{"line":248,"column":36}},"103":{"start":{"line":254,"column":6},"end":{"line":254,"column":19}},"104":{"start":{"line":255,"column":6},"end":{"line":258,"column":7}},"105":{"start":{"line":256,"column":8},"end":{"line":256,"column":30}},"106":{"start":{"line":257,"column":8},"end":{"line":257,"column":29}},"107":{"start":{"line":276,"column":6},"end":{"line":277,"column":30}},"108":{"start":{"line":280,"column":6},"end":{"line":280,"column":51}},"109":{"start":{"line":281,"column":6},"end":{"line":283,"column":7}},"110":{"start":{"line":282,"column":8},"end":{"line":282,"column":92}},"111":{"start":{"line":286,"column":6},"end":{"line":310,"column":9}},"112":{"start":{"line":289,"column":8},"end":{"line":291,"column":9}},"113":{"start":{"line":290,"column":10},"end":{"line":290,"column":61}},"114":{"start":{"line":294,"column":8},"end":{"line":294,"column":28}},"115":{"start":{"line":295,"column":8},"end":{"line":309,"column":11}},"116":{"start":{"line":298,"column":10},"end":{"line":300,"column":11}},"117":{"start":{"line":299,"column":12},"end":{"line":299,"column":25}},"118":{"start":{"line":299,"column":26},"end":{"line":299,"column":39}},"119":{"start":{"line":303,"column":10},"end":{"line":305,"column":11}},"120":{"start":{"line":304,"column":12},"end":{"line":304,"column":90}},"121":{"start":{"line":308,"column":10},"end":{"line":308,"column":64}},"122":{"start":{"line":325,"column":2},"end":{"line":331,"column":4}},"123":{"start":{"line":326,"column":4},"end":{"line":326,"column":46}},"124":{"start":{"line":327,"column":4},"end":{"line":329,"column":5}},"125":{"start":{"line":328,"column":6},"end":{"line":328,"column":74}},"126":{"start":{"line":330,"column":4},"end":{"line":330,"column":27}},"127":{"start":{"line":343,"column":2},"end":{"line":345,"column":4}},"128":{"start":{"line":344,"column":4},"end":{"line":344,"column":21}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":53}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":6},"end":{"line":43,"column":6}},{"start":{"line":43,"column":6},"end":{"line":43,"column":6}}]},"4":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"6":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"7":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":10},"end":{"line":79,"column":10}},{"start":{"line":79,"column":10},"end":{"line":79,"column":10}}]},"8":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":14},"end":{"line":79,"column":19}},{"start":{"line":79,"column":23},"end":{"line":79,"column":46}}]},"9":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":10},"end":{"line":85,"column":10}},{"start":{"line":85,"column":10},"end":{"line":85,"column":10}}]},"10":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":12},"end":{"line":86,"column":12}},{"start":{"line":86,"column":12},"end":{"line":86,"column":12}}]},"11":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":101,"column":12}},{"start":{"line":101,"column":12},"end":{"line":101,"column":12}}]},"12":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":10},"end":{"line":114,"column":10}},{"start":{"line":114,"column":10},"end":{"line":114,"column":10}}]},"13":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":14},"end":{"line":114,"column":25}},{"start":{"line":114,"column":29},"end":{"line":114,"column":88}}]},"14":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":10},"end":{"line":119,"column":10}},{"start":{"line":119,"column":10},"end":{"line":119,"column":10}}]},"15":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":6},"end":{"line":138,"column":6}},{"start":{"line":138,"column":6},"end":{"line":138,"column":6}}]},"16":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":10},"end":{"line":138,"column":16}},{"start":{"line":138,"column":20},"end":{"line":138,"column":29}}]},"17":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":8},"end":{"line":144,"column":8}},{"start":{"line":144,"column":8},"end":{"line":144,"column":8}}]},"18":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":148,"column":8}},{"start":{"line":148,"column":8},"end":{"line":148,"column":8}}]},"19":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":6},"end":{"line":160,"column":6}},{"start":{"line":160,"column":6},"end":{"line":160,"column":6}}]},"20":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":8},"end":{"line":166,"column":8}},{"start":{"line":166,"column":8},"end":{"line":166,"column":8}}]},"21":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":8},"end":{"line":169,"column":8}},{"start":{"line":169,"column":8},"end":{"line":169,"column":8}}]},"22":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":10},"end":{"line":175,"column":10}},{"start":{"line":175,"column":10},"end":{"line":175,"column":10}}]},"23":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":6},"end":{"line":195,"column":6}},{"start":{"line":195,"column":6},"end":{"line":195,"column":6}}]},"24":{"line":195,"type":"binary-expr","locations":[{"start":{"line":195,"column":10},"end":{"line":195,"column":16}},{"start":{"line":195,"column":20},"end":{"line":195,"column":29}}]},"25":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":8},"end":{"line":201,"column":8}},{"start":{"line":201,"column":8},"end":{"line":201,"column":8}}]},"26":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":10},"end":{"line":208,"column":10}},{"start":{"line":208,"column":10},"end":{"line":208,"column":10}}]},"27":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":10},"end":{"line":213,"column":10}},{"start":{"line":213,"column":10},"end":{"line":213,"column":10}}]},"28":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":6},"end":{"line":229,"column":6}},{"start":{"line":229,"column":6},"end":{"line":229,"column":6}}]},"29":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":8},"end":{"line":235,"column":8}},{"start":{"line":235,"column":8},"end":{"line":235,"column":8}}]},"30":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":8},"end":{"line":239,"column":8}},{"start":{"line":239,"column":8},"end":{"line":239,"column":8}}]},"31":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":10},"end":{"line":245,"column":10}},{"start":{"line":245,"column":10},"end":{"line":245,"column":10}}]},"32":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":6},"end":{"line":255,"column":6}},{"start":{"line":255,"column":6},"end":{"line":255,"column":6}}]},"33":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":6},"end":{"line":281,"column":6}},{"start":{"line":281,"column":6},"end":{"line":281,"column":6}}]},"34":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":8},"end":{"line":289,"column":8}},{"start":{"line":289,"column":8},"end":{"line":289,"column":8}}]},"35":{"line":289,"type":"binary-expr","locations":[{"start":{"line":289,"column":12},"end":{"line":289,"column":18}},{"start":{"line":289,"column":22},"end":{"line":289,"column":41}}]},"36":{"line":298,"type":"if","locations":[{"start":{"line":298,"column":10},"end":{"line":298,"column":10}},{"start":{"line":298,"column":10},"end":{"line":298,"column":10}}]},"37":{"line":298,"type":"binary-expr","locations":[{"start":{"line":298,"column":14},"end":{"line":298,"column":19}},{"start":{"line":298,"column":23},"end":{"line":298,"column":46}}]},"38":{"line":303,"type":"if","locations":[{"start":{"line":303,"column":10},"end":{"line":303,"column":10}},{"start":{"line":303,"column":10},"end":{"line":303,"column":10}}]},"39":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":4},"end":{"line":327,"column":4}},{"start":{"line":327,"column":4},"end":{"line":327,"column":4}}]},"40":{"line":327,"type":"binary-expr","locations":[{"start":{"line":327,"column":8},"end":{"line":327,"column":17}},{"start":{"line":327,"column":21},"end":{"line":327,"column":45}}]}},"code":["// FileSyncProbe.js (c) 2010-2014 Loren West and other contributors","// May be freely distributed under the MIT license.","// For further details and documentation:","// http://lorenwest.github.com/node-monitor","(function(root){","","  // Module loading - this runs server-side only","  var Monitor = root.Monitor || require('../Monitor'),","      logger = Monitor.getLogger('FileSyncProbe'),","      Probe = Monitor.Probe,","      _ = Monitor._,","      SyncProbe = Monitor.SyncProbe,","      FS = require('fs'),","      Path = require('path'),","      FileProbe = Monitor.FileProbe;","","  // This must be set using setRootPath() before the probe will operate","  var ROOT_PATH = null;","","  /**","  * Probe for synchronizing a Backbone data model with a file on the O/S","  *","  * Probe parameters are listed under <a href=\"SyncProbe.html\">SyncProbe</a>.","  *","  * @class FileSyncProbe","  * @extends Probe","  * @constructor","  */","  var FileSyncProbe = SyncProbe.FileSyncProbe = Probe.extend({","","    probeClass: 'FileSyncProbe',","","    initialize: function(attributes, options){","      var t = this;","      Probe.prototype.initialize.apply(t, arguments);","","      // Disable the probe if the root path hasn't been set","      if (!ROOT_PATH) {","        throw new Error('FileSync has not been enabled on this server.');","      }","","      // Class name must exist","      if (!t.has('className')) {","        throw new Error('FileSync - Class name not specified');","      }","","      // Don't allow a path above the root path","      t.dirPath = Path.join(ROOT_PATH, t.get('className'));","      if (t.dirPath.indexOf(ROOT_PATH) !== 0) {","        throw new Error('Invalid file path');","      }","","      // We're done if this isn't a liveSync probe","      if (!t.has('modelId')) {","        return;","      }","","      // Assume callback responsibility","      options.asyncInit = true;","      var callback = options.callback;","","      // Get the full path to the file","      t.getFullPath(t.get('modelId'), function(error, response){","        if (error) {","          return callback({msg: 'Failed to get the path', err:error});","        }","","        // Get the file and stats","        var fullPath = response.path;","        var stats = response.stats;","","        // Build the function to watch the file","        var onFileWatch = function(error, content) {","","          var isInitializing = (callback !== null),","              initCallback = callback;","          callback = null;","","          if (error && error.code === 'ENOENT') {","            // File doesn't exist. Set the model to null.","            t.set({model: {}}, {silent: isInitializing});","            // Convert the code from the sync probe spec","            error.code = 'NOTFOUND';","          }","          if (error) {","            if (isInitializing) {","              t.release();","              var err = {code: error.code, msg: 'LiveSync requires the file to exist and be readable'};","              initCallback(err);","            }","            return;","          }","","          // Parse the JSON content into a JS object.","          try {","            content = JSON.parse(content);","            logger.info('fileParse', {id: t.get('modelId'), content: content});","          } catch (e) {","","            // Fail the probe on first load error","            if (isInitializing) {","              t.release();","              initCallback({code: 'BAD_FORMAT', msg: 'Non-JSON formatted file'});","            }","","            // Nothing productive to do if the file can't be parsed. Just log it.","            logger.error('fileParse', {error: e, id: t.get('modelId'), content: content});","            return;","          }","","          // Set the content into the model if it's different","          // Have to compare raw objects because toJSON returns deep references to models","          var priorModel = t.get('model');","          if (!priorModel || !_.isEqual(content, JSON.parse(JSON.stringify(priorModel)))) {","            t.set({model: content}, {silent: isInitializing});","          }","","          // Call the initialization callback on first load","          if (isInitializing) {","            initCallback();","          }","        };","","        // Load and watch the file","        var watcherOpts = {","          preload: true,","          persistent: true","        };","        t.fileWatcher = FileProbe.watchLoad(fullPath, watcherOpts, onFileWatch);","","      });","    },","","    // Documentation for these methods in SyncProbe","    create_control: function(args, callback) {","      // Make sure the ID exists","      var t = this, model = args.model;","      if (!model || !model.id) {","        return callback({msg:'SyncProbe create - Data model with ID not present'});","      }","","      // Make sure the file doesn't already exist","      t.getFullPath(model.id, function(error, response) {","        if (error) {","          return callback(error);","        }","","        if (response.stats) {","          return callback({msg:'Document with this ID already exists'});","        }","","        // Forward to the update control","        t.update_control(args, callback);","      });","    },","","    read_control: function(args, callback) {","      // Make sure the ID exists","      var t = this, id = args.id;","      if (!id) {","        return callback({msg:'SyncProbe read - ID not present'});","      }","","      // Read the file","      t.getFullPath(id, function(error, response){","        if (error) {","          return callback(error);","        }","        if (!response.stats) {","          return callback({code: 'NOTFOUND', msg:'Document with this ID not found'});","        }","","        var fullPath = response.path;","        FS.readFile(fullPath, 'utf8', function(error, data) {","          if (error) {","            return callback({code: 'UNKNOWN', msg:'Error reading file', error: error.code});","          }","","          // Parse the file","          var model;","          try {","            model = JSON.parse(data);","          } catch (e) {","            return callback({code: 'PARSE', msg: 'Error parsing file'});","          }","          callback(null, model);","        });","      });","    },","","    update_control: function(args, callback) {","","      // Make sure the ID exists","      var t = this, model = args.model;","      if (!model || !model.id) {","        return callback({msg:'SyncProbe create - Data model with ID not present'});","      }","","      // Make sure the directory exists","      t.getFullPath(model.id, function(error, response) {","        if (error) {","          return callback(error);","        }","","        var fullPath = response.path,","            parentDir = Path.dirname(fullPath);","        FileProbe.mkdir_r(parentDir, function(error) {","          if (error) {","            return callback(error);","          }","","          // Set the contents of the model for liveSync","          if (t.has('modelId')) {","            t.set('model', model);","          }","","          // Write the file","          FS.writeFile(fullPath, JSON.stringify(model, null, 2), 'utf8', function(error){","            callback(error, {});","          });","        });","      });","","    },","","    delete_control: function(args, callback) {","      // Make sure the ID exists","      var t = this, id = args.id;","      if (!id) {","        return callback({msg:'SyncProbe delete - ID not present'});","      }","","      // Set the contents of the model for liveSync","      t.getFullPath(id, function(error, response) {","        if (error) {","          return callback({msg:'Error removing file', err:error});","        }","        var fullPath = response.path;","        if (t.has('modelId')) {","          t.set('model', null);","        }","","        // Remove the file","        FS.unlink(fullPath, function(error, data) {","          if (error) {","            return callback({msg:'Error removing file'});","          }","          return callback(null, {});","        });","      });","    },","","    release: function() {","      var t = this;","      if (t.fileWatcher) {","        t.fileWatcher.close();","        t.fileWatcher = null;","      }","    },","","    /**","    * Get the full path to the file","    *","    * This builds the full pathname to the file, and performs an fs.sync()","    * on that pathname, providing the pathname and sync object in the callback.","    *","    * @method getFullPath","    * @param modelId {String} ID of the data model to sync","    * @param callback {Function(error, return)}","    *   @param callback.error {Object} Error object (null if no error)","    *   @param callback.return {Object} return object","    *     @param callback.return.path {String} Full pathname to the file","    *     @param callback.return.stat {fs.stats} Stats object (null if the file doesn't esixt)","    */","    getFullPath: function(modelId, callback) {","      var t = this,","          dirPath = t.dirPath;","","      // Don't allow relative paths","      var fullPath = Path.join(t.dirPath, modelId);","      if (fullPath.indexOf(dirPath) !== 0) {","        return callback({msg: 'Model ID ' + modelId + ' cannot represent a relative path'});","      }","","      // See if the path represents a directory","      FS.stat(fullPath, function(error, stats){","","        // If this is an existing directory, return a path to dir/index.json","        if (!error && stats.isDirectory()) {","          return t.getFullPath(modelId + '/index', callback);","        }","","        // Normal case - return the path & stat to the json file","        fullPath += '.json';","        FS.stat(fullPath, function(error, stats){","","          // Not an error if error == ENOENT","          if (error && error.code === 'ENOENT') {","            error = null; stats = null;","          }","","          // Process other FS errors","          if (error) {","            return callback({err: error, msg: \"Error while observing file: \" + fullPath});","          }","","          // Forward the callback","          return callback(null, {path: fullPath, stats: stats});","        });","      });","    }","","  });","","  /**","  * Set the server root path for objects stored with this probe","  *","  * For security purposes, this must be set before the SyncFileProbe","  * will operate.  It will not accept any changes once set.","  *","  * @static","  * @method setRootPath","  * @param rootPath {String} A path to the root directory for model object storage","  */","  FileSyncProbe.setRootPath = function(rootPath) {","    var normalized = Path.normalize(rootPath);","    if (ROOT_PATH && ROOT_PATH !== normalized) {","      throw new Error('Cannot change the File probe root path once set.');","    }","    ROOT_PATH = normalized;","  };","","  /**","  * Get the current root path.","  *","  * As a static method, this is only available on the server running the probe.","  * For security purposes, this is not exposed in the FileSyncProbe data model.","  *","  * @static","  * @method getRootPath","  * @return {String} The path to the root directory for the FilePath probe","  */","  FileSyncProbe.getRootPath = function() {","    return ROOT_PATH;","  };","","}(this));",""],"l":{"5":1,"8":1,"18":1,"29":1,"34":0,"35":0,"38":0,"39":0,"43":0,"44":0,"48":0,"49":0,"50":0,"54":0,"55":0,"59":0,"60":0,"63":0,"64":0,"65":0,"69":0,"70":0,"73":0,"75":0,"77":0,"79":0,"81":0,"83":0,"85":0,"86":0,"87":0,"88":0,"89":0,"91":0,"95":0,"96":0,"97":0,"101":0,"102":0,"103":0,"107":0,"108":0,"113":0,"114":0,"115":0,"119":0,"120":0,"125":0,"129":0,"137":0,"138":0,"139":0,"143":0,"144":0,"145":0,"148":0,"149":0,"153":0,"159":0,"160":0,"161":0,"165":0,"166":0,"167":0,"169":0,"170":0,"173":0,"174":0,"175":0,"176":0,"180":0,"181":0,"182":0,"184":0,"186":0,"194":0,"195":0,"196":0,"200":0,"201":0,"202":0,"205":0,"207":0,"208":0,"209":0,"213":0,"214":0,"218":0,"219":0,"228":0,"229":0,"230":0,"234":0,"235":0,"236":0,"238":0,"239":0,"240":0,"244":0,"245":0,"246":0,"248":0,"254":0,"255":0,"256":0,"257":0,"276":0,"280":0,"281":0,"282":0,"286":0,"289":0,"290":0,"294":0,"295":0,"298":0,"299":0,"303":0,"304":0,"308":0,"325":1,"326":0,"327":0,"328":0,"330":0,"343":1,"344":0}}}